{"version":3,"file":"babylon.gui.min.js","mappings":"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","sources":["webpack://BABYLON.GUI/webpack/universalModuleDefinition","webpack://BABYLON.GUI/external umd {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://BABYLON.GUI/webpack/bootstrap","webpack://BABYLON.GUI/webpack/runtime/define property getters","webpack://BABYLON.GUI/webpack/runtime/global","webpack://BABYLON.GUI/webpack/runtime/hasOwnProperty shorthand","webpack://BABYLON.GUI/webpack/runtime/make namespace object","webpack://BABYLON.GUI/../../../../node_modules/tslib/tslib.es6.js","webpack://BABYLON.GUI/../../../lts/gui/generated/2D/valueAndUnit.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/2D/measure.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/2D/math2D.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/2D/controls/control.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/2D/controls/container.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/2D/controls/rectangle.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/2D/controls/textBlock.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/2D/controls/image.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/2D/controls/button.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/2D/controls/stackPanel.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/2D/controls/checkbox.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/2D/controls/textWrapper.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/2D/controls/inputText.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/2D/controls/grid.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/2D/controls/colorpicker.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/2D/controls/ellipse.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/2D/controls/focusableButton.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/2D/controls/inputTextArea.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/2D/controls/inputPassword.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/2D/controls/line.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/2D/multiLinePoint.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/2D/controls/multiLine.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/2D/controls/radioButton.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/2D/controls/sliders/baseSlider.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/2D/controls/sliders/slider.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/2D/controls/selector.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/2D/controls/scrollViewers/scrollViewerWindow.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/2D/controls/sliders/scrollBar.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/2D/controls/sliders/imageScrollBar.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/2D/controls/scrollViewers/scrollViewer.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/2D/controls/toggleButton.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/2D/controls/virtualKeyboard.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/2D/controls/displayGrid.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/2D/controls/sliders/imageBasedSlider.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/2D/controls/statics.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/2D/controls/gradient/BaseGradient.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/2D/controls/gradient/LinearGradient.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/2D/controls/gradient/RadialGradient.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/2D/style.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/2D/advancedDynamicTexture.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/2D/adtInstrumentation.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/2D/xmlLoader.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/vector3WithInfo.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/controls/control3D.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/controls/contentDisplay3D.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/controls/abstractButton3D.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/controls/button3D.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/controls/container3D.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/controls/volumeBasedPanel.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/controls/cylinderPanel.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/materials/fluent/shaders/fluent.vertex.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/materials/fluent/shaders/fluent.fragment.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/materials/fluent/fluentMaterial.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/controls/touchHolographicMenu.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/controls/handMenu.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/materials/fluentBackplate/shaders/fluentBackplate.fragment.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/materials/fluentBackplate/shaders/fluentBackplate.vertex.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/materials/fluentBackplate/fluentBackplateMaterial.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/controls/holographicBackplate.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/controls/holographicButton.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/materials/fluentButton/shaders/fluentButton.fragment.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/materials/fluentButton/shaders/fluentButton.vertex.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/materials/fluentButton/fluentButtonMaterial.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/controls/touchButton3D.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/controls/touchHolographicButton.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/behaviors/defaultBehavior.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/materials/handle/shaders/handle.vertex.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/materials/handle/shaders/handle.fragment.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/gizmos/gizmoHandle.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/materials/handle/handleMaterial.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/gizmos/slateGizmo.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/controls/holographicSlate.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/controls/meshButton3D.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/controls/nearMenu.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/controls/planePanel.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/controls/scatterPanel.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/materials/mrdl/shaders/mrdlSliderBar.fragment.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/materials/mrdl/shaders/mrdlSliderBar.vertex.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/materials/mrdl/mrdlSliderBarMaterial.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/materials/mrdl/shaders/mrdlSliderThumb.fragment.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/materials/mrdl/shaders/mrdlSliderThumb.vertex.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/materials/mrdl/mrdlSliderThumbMaterial.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/materials/mrdl/shaders/mrdlBackplate.fragment.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/materials/mrdl/shaders/mrdlBackplate.vertex.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/materials/mrdl/mrdlBackplateMaterial.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/controls/slider3D.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/controls/spherePanel.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/controls/stackPanel3D.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/controls/touchMeshButton3D.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/materials/mrdl/shaders/mrdlBackglow.fragment.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/materials/mrdl/shaders/mrdlBackglow.vertex.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/materials/mrdl/mrdlBackglowMaterial.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/materials/mrdl/shaders/mrdlFrontplate.fragment.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/materials/mrdl/shaders/mrdlFrontplate.vertex.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/materials/mrdl/mrdlFrontplateMaterial.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/materials/mrdl/shaders/mrdlInnerquad.fragment.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/materials/mrdl/shaders/mrdlInnerquad.vertex.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/materials/mrdl/mrdlInnerquadMaterial.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/controls/MRTK3/touchHolographicButton.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/3D/gui3DManager.ts","webpack://BABYLON.GUI/../../../lts/gui/generated/legacy/legacy.ts","webpack://BABYLON.GUI/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-gui\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-gui\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"BABYLON\"] = root[\"BABYLON\"] || {}, root[\"BABYLON\"][\"GUI\"] = factory(root[\"BABYLON\"]);\n})((typeof self !== \"undefined\" ? self : typeof global !== \"undefined\" ? global : this), (__WEBPACK_EXTERNAL_MODULE__520__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__520__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n","import { Observable } from \"core/Misc/observable\";\r\nimport type { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to specific a value and its associated unit\r\n */\r\nexport class ValueAndUnit {\r\n    private _value = 1;\r\n    private _unit = ValueAndUnit.UNITMODE_PIXEL;\r\n    private _originalUnit: number;\r\n\r\n    /**\r\n     * Gets or sets a value indicating that this value will not scale accordingly with adaptive scaling property\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\r\n     */\r\n    public ignoreAdaptiveScaling = false;\r\n\r\n    /**\r\n     * Observable event triggered each time the value or unit changes\r\n     */\r\n    public onChangedObservable = new Observable<void>();\r\n\r\n    /**\r\n     * Creates a new ValueAndUnit\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store - defaults to ValueAndUnit.UNITMODE_PIXEL\r\n     * @param negativeValueAllowed defines a boolean indicating if the value can be negative\r\n     */\r\n    public constructor(\r\n        value: number,\r\n        /** defines the unit to store */\r\n        unit = ValueAndUnit.UNITMODE_PIXEL,\r\n        /** defines a boolean indicating if the value can be negative */\r\n        public negativeValueAllowed = true\r\n    ) {\r\n        this._value = value;\r\n        this._unit = unit;\r\n        this._originalUnit = unit;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is a percentage */\r\n    public get isPercentage(): boolean {\r\n        return this._unit === ValueAndUnit.UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is store as pixel */\r\n    public get isPixel(): boolean {\r\n        return this._unit === ValueAndUnit.UNITMODE_PIXEL;\r\n    }\r\n\r\n    /**\r\n     * Gets value (without units)\r\n     * @deprecated use value property instead\r\n     */\r\n    public get internalValue(): number {\r\n        return this._value;\r\n    }\r\n\r\n    /** Gets value (without units) */\r\n    public get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    /** Sets value (without units) */\r\n    public set value(value: number) {\r\n        if (value !== this._value) {\r\n            this._value = value;\r\n            this.onChangedObservable.notifyObservers();\r\n        }\r\n    }\r\n\r\n    /** Gets units (without value) */\r\n    public get unit(): number {\r\n        return this._unit;\r\n    }\r\n\r\n    /** Sets units (without value) */\r\n    public set unit(value: number) {\r\n        if (value !== this._unit) {\r\n            this._unit = value;\r\n            this.onChangedObservable.notifyObservers();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets value as pixel\r\n     * @param host defines the root host\r\n     * @param refValue defines the reference value for percentages\r\n     * @returns the value as pixel\r\n     */\r\n    public getValueInPixel(host: AdvancedDynamicTexture, refValue: number): number {\r\n        if (this.isPixel) {\r\n            return this.getValue(host);\r\n        }\r\n\r\n        return this.getValue(host) * refValue;\r\n    }\r\n\r\n    /**\r\n     * Update the current value and unit.\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @returns the current ValueAndUnit\r\n     */\r\n    public updateInPlace(value: number, unit = ValueAndUnit.UNITMODE_PIXEL): ValueAndUnit {\r\n        if (this.value !== value || this.unit !== unit) {\r\n            // set member variables to notify only once\r\n            this._value = value;\r\n            this._unit = unit;\r\n            this.onChangedObservable.notifyObservers();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the value accordingly to its unit\r\n     * @param host  defines the root host\r\n     * @returns the value\r\n     */\r\n    public getValue(host: AdvancedDynamicTexture): number {\r\n        if (host && !this.ignoreAdaptiveScaling && this.unit !== ValueAndUnit.UNITMODE_PERCENTAGE) {\r\n            let width: number = 0;\r\n            let height: number = 0;\r\n\r\n            if (host.idealWidth) {\r\n                width = (this._value * host.getSize().width) / host.idealWidth;\r\n            }\r\n\r\n            if (host.idealHeight) {\r\n                height = (this._value * host.getSize().height) / host.idealHeight;\r\n            }\r\n\r\n            if (host.useSmallestIdeal && host.idealWidth && host.idealHeight) {\r\n                return window.innerWidth < window.innerHeight ? width : height;\r\n            }\r\n\r\n            if (host.idealWidth) {\r\n                // horizontal\r\n                return width;\r\n            }\r\n\r\n            if (host.idealHeight) {\r\n                // vertical\r\n                return height;\r\n            }\r\n        }\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representation of the value\r\n     * @param host defines the root host\r\n     * @param decimals defines an optional number of decimals to display\r\n     * @returns a string\r\n     */\r\n    public toString(host: AdvancedDynamicTexture, decimals?: number): string {\r\n        switch (this._unit) {\r\n            case ValueAndUnit.UNITMODE_PERCENTAGE: {\r\n                const percentage = this.getValue(host) * 100;\r\n                return (decimals ? percentage.toFixed(decimals) : percentage) + \"%\";\r\n            }\r\n            case ValueAndUnit.UNITMODE_PIXEL: {\r\n                const pixels = this.getValue(host);\r\n                return (decimals ? pixels.toFixed(decimals) : pixels) + \"px\";\r\n            }\r\n        }\r\n\r\n        return this._unit.toString();\r\n    }\r\n\r\n    /**\r\n     * Store a value parsed from a string\r\n     * @param source defines the source string\r\n     * @returns true if the value was successfully parsed and updated\r\n     */\r\n    public fromString(source: string | number): boolean {\r\n        const match = ValueAndUnit._Regex.exec(source.toString());\r\n\r\n        if (!match || match.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        let sourceValue = parseFloat(match[1]);\r\n        let sourceUnit = this._originalUnit;\r\n\r\n        if (!this.negativeValueAllowed) {\r\n            if (sourceValue < 0) {\r\n                sourceValue = 0;\r\n            }\r\n        }\r\n\r\n        if (match.length === 4) {\r\n            switch (match[3]) {\r\n                case \"px\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PIXEL;\r\n                    break;\r\n                case \"%\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PERCENTAGE;\r\n                    sourceValue /= 100.0;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (sourceValue === this._value && sourceUnit === this._unit) {\r\n            return false;\r\n        }\r\n\r\n        this._value = sourceValue;\r\n        this._unit = sourceUnit;\r\n        this.onChangedObservable.notifyObservers();\r\n\r\n        return true;\r\n    }\r\n\r\n    // Static\r\n    private static _Regex = /(^-?\\d*(\\.\\d+)?)(%|px)?/;\r\n    private static _UNITMODE_PERCENTAGE = 0;\r\n    private static _UNITMODE_PIXEL = 1;\r\n\r\n    /** UNITMODE_PERCENTAGE */\r\n    public static get UNITMODE_PERCENTAGE(): number {\r\n        return ValueAndUnit._UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** UNITMODE_PIXEL */\r\n    public static get UNITMODE_PIXEL(): number {\r\n        return ValueAndUnit._UNITMODE_PIXEL;\r\n    }\r\n}\r\n","import type { Matrix2D } from \"./math2D\";\r\nimport { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nconst tmpRect = [new Vector2(0, 0), new Vector2(0, 0), new Vector2(0, 0), new Vector2(0, 0)];\r\n\r\nconst tmpRect2 = [new Vector2(0, 0), new Vector2(0, 0), new Vector2(0, 0), new Vector2(0, 0)];\r\n\r\nconst tmpV1 = new Vector2(0, 0);\r\nconst tmpV2 = new Vector2(0, 0);\r\n\r\n/**\r\n * Class used to store 2D control sizes\r\n */\r\nexport class Measure {\r\n    /**\r\n     * Creates a new measure\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public constructor(\r\n        /** defines left coordinate */\r\n        public left: number,\r\n        /** defines top coordinate  */\r\n        public top: number,\r\n        /** defines width dimension  */\r\n        public width: number,\r\n        /** defines height dimension */\r\n        public height: number\r\n    ) {}\r\n\r\n    /**\r\n     * Copy from another measure\r\n     * @param other defines the other measure to copy from\r\n     */\r\n    public copyFrom(other: Measure): void {\r\n        this.left = other.left;\r\n        this.top = other.top;\r\n        this.width = other.width;\r\n        this.height = other.height;\r\n    }\r\n\r\n    /**\r\n     * Copy from a group of 4 floats\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public copyFromFloats(left: number, top: number, width: number, height: number): void {\r\n        this.left = left;\r\n        this.top = top;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    /**\r\n     * Computes the axis aligned bounding box measure for two given measures\r\n     * @param a Input measure\r\n     * @param b Input measure\r\n     * @param result the resulting bounding measure\r\n     */\r\n    public static CombineToRef(a: Measure, b: Measure, result: Measure) {\r\n        const left = Math.min(a.left, b.left);\r\n        const top = Math.min(a.top, b.top);\r\n        const right = Math.max(a.left + a.width, b.left + b.width);\r\n        const bottom = Math.max(a.top + a.height, b.top + b.height);\r\n        result.left = left;\r\n        result.top = top;\r\n        result.width = right - left;\r\n        result.height = bottom - top;\r\n    }\r\n\r\n    /**\r\n     * Computes the axis aligned bounding box of the measure after it is modified by a given transform\r\n     * @param transform the matrix to transform the measure before computing the AABB\r\n     * @param addX number to add to left\r\n     * @param addY number to add to top\r\n     * @param addWidth number to add to width\r\n     * @param addHeight number to add to height\r\n     * @param result the resulting AABB\r\n     */\r\n    public addAndTransformToRef(transform: Matrix2D, addX: number, addY: number, addWidth: number, addHeight: number, result: Measure) {\r\n        const left = this.left + addX;\r\n        const top = this.top + addY;\r\n        const width = this.width + addWidth;\r\n        const height = this.height + addHeight;\r\n\r\n        tmpRect[0].copyFromFloats(left, top);\r\n        tmpRect[1].copyFromFloats(left + width, top);\r\n        tmpRect[2].copyFromFloats(left + width, top + height);\r\n        tmpRect[3].copyFromFloats(left, top + height);\r\n\r\n        tmpV1.copyFromFloats(Number.MAX_VALUE, Number.MAX_VALUE);\r\n        tmpV2.copyFromFloats(0, 0);\r\n        for (let i = 0; i < 4; i++) {\r\n            transform.transformCoordinates(tmpRect[i].x, tmpRect[i].y, tmpRect2[i]);\r\n            tmpV1.x = Math.floor(Math.min(tmpV1.x, tmpRect2[i].x));\r\n            tmpV1.y = Math.floor(Math.min(tmpV1.y, tmpRect2[i].y));\r\n            tmpV2.x = Math.ceil(Math.max(tmpV2.x, tmpRect2[i].x));\r\n            tmpV2.y = Math.ceil(Math.max(tmpV2.y, tmpRect2[i].y));\r\n        }\r\n        result.left = tmpV1.x;\r\n        result.top = tmpV1.y;\r\n        result.width = tmpV2.x - tmpV1.x;\r\n        result.height = tmpV2.y - tmpV1.y;\r\n    }\r\n\r\n    /**\r\n     * Computes the axis aligned bounding box of the measure after it is modified by a given transform\r\n     * @param transform the matrix to transform the measure before computing the AABB\r\n     * @param result the resulting AABB\r\n     */\r\n    public transformToRef(transform: Matrix2D, result: Measure) {\r\n        this.addAndTransformToRef(transform, 0, 0, 0, 0, result);\r\n    }\r\n    /**\r\n     * Check equality between this measure and another one\r\n     * @param other defines the other measures\r\n     * @returns true if both measures are equals\r\n     */\r\n    public isEqualsTo(other: Measure): boolean {\r\n        if (this.left !== other.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this.top !== other.top) {\r\n            return false;\r\n        }\r\n\r\n        if (this.width !== other.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this.height !== other.height) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates an empty measure\r\n     * @returns a new measure\r\n     */\r\n    public static Empty(): Measure {\r\n        return new Measure(0, 0, 0, 0);\r\n    }\r\n}\r\n","import type { Nullable } from \"core/types\";\r\nimport { Vector2 } from \"core/Maths/math.vector\";\r\nimport { Epsilon } from \"core/Maths/math.constants\";\r\n\r\n/**\r\n * Class used to transport Vector2 information for pointer events\r\n */\r\nexport class Vector2WithInfo extends Vector2 {\r\n    /**\r\n     * Creates a new Vector2WithInfo\r\n     * @param source defines the vector2 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(\r\n        source: Vector2,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0\r\n    ) {\r\n        super(source.x, source.y);\r\n    }\r\n}\r\n\r\n/** Class used to provide 2D matrix features */\r\nexport class Matrix2D {\r\n    /** Gets the internal array of 6 floats used to store matrix data */\r\n    public m = new Float32Array(6);\r\n\r\n    /**\r\n     * Creates a new matrix\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     */\r\n    constructor(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number) {\r\n        this.fromValues(m00, m01, m10, m11, m20, m21);\r\n    }\r\n\r\n    /**\r\n     * Fills the matrix from direct values\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     * @returns the current modified matrix\r\n     */\r\n    public fromValues(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number): Matrix2D {\r\n        this.m[0] = m00;\r\n        this.m[1] = m01;\r\n        this.m[2] = m10;\r\n        this.m[3] = m11;\r\n        this.m[4] = m20;\r\n        this.m[5] = m21;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets matrix determinant\r\n     * @returns the determinant\r\n     */\r\n    public determinant(): number {\r\n        return this.m[0] * this.m[3] - this.m[1] * this.m[2];\r\n    }\r\n\r\n    /**\r\n     * Inverses the matrix and stores it in a target matrix\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public invertToRef(result: Matrix2D): Matrix2D {\r\n        const l0 = this.m[0];\r\n        const l1 = this.m[1];\r\n        const l2 = this.m[2];\r\n        const l3 = this.m[3];\r\n        const l4 = this.m[4];\r\n        const l5 = this.m[5];\r\n\r\n        const det = this.determinant();\r\n        if (det < Epsilon * Epsilon) {\r\n            result.m[0] = 0;\r\n            result.m[1] = 0;\r\n            result.m[2] = 0;\r\n            result.m[3] = 0;\r\n            result.m[4] = 0;\r\n            result.m[5] = 0;\r\n            return this;\r\n        }\r\n\r\n        const detDiv = 1 / det;\r\n\r\n        const det4 = l2 * l5 - l3 * l4;\r\n        const det5 = l1 * l4 - l0 * l5;\r\n\r\n        result.m[0] = l3 * detDiv;\r\n        result.m[1] = -l1 * detDiv;\r\n        result.m[2] = -l2 * detDiv;\r\n        result.m[3] = l0 * detDiv;\r\n        result.m[4] = det4 * detDiv;\r\n        result.m[5] = det5 * detDiv;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the current matrix with another one\r\n     * @param other defines the second operand\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public multiplyToRef(other: Matrix2D, result: Matrix2D): Matrix2D {\r\n        const l0 = this.m[0];\r\n        const l1 = this.m[1];\r\n        const l2 = this.m[2];\r\n        const l3 = this.m[3];\r\n        const l4 = this.m[4];\r\n        const l5 = this.m[5];\r\n\r\n        const r0 = other.m[0];\r\n        const r1 = other.m[1];\r\n        const r2 = other.m[2];\r\n        const r3 = other.m[3];\r\n        const r4 = other.m[4];\r\n        const r5 = other.m[5];\r\n\r\n        result.m[0] = l0 * r0 + l1 * r2;\r\n        result.m[1] = l0 * r1 + l1 * r3;\r\n        result.m[2] = l2 * r0 + l3 * r2;\r\n        result.m[3] = l2 * r1 + l3 * r3;\r\n        result.m[4] = l4 * r0 + l5 * r2 + r4;\r\n        result.m[5] = l4 * r1 + l5 * r3 + r5;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Applies the current matrix to a set of 2 floats and stores the result in a vector2\r\n     * @param x defines the x coordinate to transform\r\n     * @param y defines the x coordinate to transform\r\n     * @param result defines the target vector2\r\n     * @returns the current matrix\r\n     */\r\n    public transformCoordinates(x: number, y: number, result: Vector2): Matrix2D {\r\n        result.x = x * this.m[0] + y * this.m[2] + this.m[4];\r\n        result.y = x * this.m[1] + y * this.m[3] + this.m[5];\r\n\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates an identity matrix\r\n     * @returns a new matrix\r\n     */\r\n    public static Identity(): Matrix2D {\r\n        return new Matrix2D(1, 0, 0, 1, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates an identity matrix and stores it in a target matrix\r\n     * @param result defines the target matrix\r\n     */\r\n    public static IdentityToRef(result: Matrix2D): void {\r\n        result.m[0] = 1;\r\n        result.m[1] = 0;\r\n        result.m[2] = 0;\r\n        result.m[3] = 1;\r\n        result.m[4] = 0;\r\n        result.m[5] = 0;\r\n    }\r\n\r\n    /**\r\n     * Creates a translation matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the translation\r\n     * @param y defines the y coordinate of the translation\r\n     * @param result defines the target matrix\r\n     */\r\n    public static TranslationToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(1, 0, 0, 1, x, y);\r\n    }\r\n\r\n    /**\r\n     * Creates a scaling matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the scaling\r\n     * @param y defines the y coordinate of the scaling\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ScalingToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(x, 0, 0, y, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a rotation matrix and stores it in a target matrix\r\n     * @param angle defines the rotation angle\r\n     * @param result defines the target matrix\r\n     */\r\n    public static RotationToRef(angle: number, result: Matrix2D): void {\r\n        const s = Math.sin(angle);\r\n        const c = Math.cos(angle);\r\n\r\n        result.fromValues(c, s, -s, c, 0, 0);\r\n    }\r\n\r\n    private static _TempPreTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempPostTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempRotationMatrix = Matrix2D.Identity();\r\n    private static _TempScalingMatrix = Matrix2D.Identity();\r\n    private static _TempCompose0 = Matrix2D.Identity();\r\n    private static _TempCompose1 = Matrix2D.Identity();\r\n    private static _TempCompose2 = Matrix2D.Identity();\r\n\r\n    /**\r\n     * Composes a matrix from translation, rotation, scaling and parent matrix and stores it in a target matrix\r\n     * @param tx defines the x coordinate of the translation\r\n     * @param ty defines the y coordinate of the translation\r\n     * @param angle defines the rotation angle\r\n     * @param scaleX defines the x coordinate of the scaling\r\n     * @param scaleY defines the y coordinate of the scaling\r\n     * @param parentMatrix defines the parent matrix to multiply by (can be null)\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ComposeToRef(tx: number, ty: number, angle: number, scaleX: number, scaleY: number, parentMatrix: Nullable<Matrix2D>, result: Matrix2D): void {\r\n        Matrix2D.TranslationToRef(tx, ty, Matrix2D._TempPreTranslationMatrix);\r\n\r\n        Matrix2D.ScalingToRef(scaleX, scaleY, Matrix2D._TempScalingMatrix);\r\n\r\n        Matrix2D.RotationToRef(angle, Matrix2D._TempRotationMatrix);\r\n\r\n        Matrix2D.TranslationToRef(-tx, -ty, Matrix2D._TempPostTranslationMatrix);\r\n\r\n        Matrix2D._TempPreTranslationMatrix.multiplyToRef(Matrix2D._TempScalingMatrix, Matrix2D._TempCompose0);\r\n        Matrix2D._TempCompose0.multiplyToRef(Matrix2D._TempRotationMatrix, Matrix2D._TempCompose1);\r\n        if (parentMatrix) {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, Matrix2D._TempCompose2);\r\n            Matrix2D._TempCompose2.multiplyToRef(parentMatrix, result);\r\n        } else {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, result);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Useful math functions\r\n */\r\nexport class MathTools {\r\n    /**\r\n     * Default rounding precision for GUI elements. It should be\r\n     * set to a power of ten, where the exponent means the number\r\n     * of decimal digits to round to, i.e, 100 means 2 decimal digits,\r\n     * 1000 means 3 decimal digits, etc. Default is 100 (2 decimal digits).\r\n     */\r\n    public static DefaultRoundingPrecision = 100;\r\n\r\n    /**\r\n     * Rounds a number to the nearest multiple of a given precision\r\n     * @param value the value to be rounded\r\n     * @param precision the multiple to which the value will be rounded. Default is 100 (2 decimal digits)\r\n     * @returns\r\n     */\r\n    public static Round(value: number, precision: number = MathTools.DefaultRoundingPrecision): number {\r\n        return Math.round(value * precision) / precision;\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/naming-convention */\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport { Vector2, Vector3, Matrix } from \"core/Maths/math.vector\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"core/Events/pointerEvents\";\r\nimport { Logger } from \"core/Misc/logger\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport type { Container } from \"./container\";\r\nimport type { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Measure } from \"../measure\";\r\nimport type { Style } from \"../style\";\r\nimport { Matrix2D, Vector2WithInfo } from \"../math2D\";\r\nimport { GetClass, RegisterClass } from \"core/Misc/typeStore\";\r\nimport { SerializationHelper, serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasGradient, ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport { EngineStore } from \"core/Engines/engineStore\";\r\nimport type { IAccessibilityTag } from \"core/IAccessibilityTag\";\r\nimport type { IPointerEvent } from \"core/Events/deviceInputEvents\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { Animation } from \"core/Animations/animation\";\r\nimport type { BaseGradient } from \"./gradient/BaseGradient\";\r\n\r\n/**\r\n * Root class used for all 2D controls\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#controls\r\n */\r\nexport class Control implements IAnimatable {\r\n    /**\r\n     * Gets or sets a boolean indicating if alpha must be an inherited value (false by default)\r\n     */\r\n    public static AllowAlphaInheritance = false;\r\n\r\n    private _alpha = 1;\r\n    private _alphaSet = false;\r\n    private _zIndex = 0;\r\n    /** @internal */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** Gets or sets the control parent */\r\n    public parent: Nullable<Container>;\r\n    /** @internal */\r\n    public _currentMeasure = Measure.Empty();\r\n    /** @internal */\r\n    public _tempPaddingMeasure = Measure.Empty();\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    private _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _font: string;\r\n    /** @internal */\r\n    public _width = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @internal */\r\n    public _height = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @internal */\r\n    protected _fontOffset: { ascent: number; height: number; descent: number };\r\n    private _color = \"\";\r\n    private _style: Nullable<Style> = null;\r\n    private _styleObserver: Nullable<Observer<Style>>;\r\n    /** @internal */\r\n    protected _horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    /** @internal */\r\n    protected _verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n    /** @internal */\r\n    protected _isDirty = true;\r\n    /** @internal */\r\n    protected _wasDirty = false;\r\n    /** @internal */\r\n    public _tempParentMeasure = Measure.Empty();\r\n    /** @internal */\r\n    public _prevCurrentMeasureTransformedIntoGlobalSpace = Measure.Empty();\r\n    /** @internal */\r\n    public _cachedParentMeasure = Measure.Empty();\r\n    private _descendantsOnlyPadding = false;\r\n    private _paddingLeft = new ValueAndUnit(0);\r\n    private _paddingRight = new ValueAndUnit(0);\r\n    private _paddingTop = new ValueAndUnit(0);\r\n    private _paddingBottom = new ValueAndUnit(0);\r\n    /** @internal */\r\n    public _left = new ValueAndUnit(0);\r\n    /** @internal */\r\n    public _top = new ValueAndUnit(0);\r\n    private _scaleX = 1.0;\r\n    private _scaleY = 1.0;\r\n    private _rotation = 0;\r\n    private _transformCenterX = 0.5;\r\n    private _transformCenterY = 0.5;\r\n    /** @internal */\r\n    public _transformMatrix = Matrix2D.Identity();\r\n    /** @internal */\r\n    protected _invertTransformMatrix = Matrix2D.Identity();\r\n    /** @internal */\r\n    protected _transformedPosition = Vector2.Zero();\r\n    private _isMatrixDirty = true;\r\n    private _cachedOffsetX: number;\r\n    private _cachedOffsetY: number;\r\n    private _isVisible = true;\r\n    private _isHighlighted = false;\r\n    private _highlightColor = \"#4affff\";\r\n    protected _highlightLineWidth = 2;\r\n    /** @internal */\r\n    public _linkedMesh: Nullable<TransformNode>;\r\n    private _fontSet = false;\r\n    private _dummyVector2 = Vector2.Zero();\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _doNotRender = false;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    private _evaluatedMeasure = new Measure(0, 0, 0, 0);\r\n    private _evaluatedParentMeasure = new Measure(0, 0, 0, 0);\r\n    protected _isEnabled = true;\r\n    protected _disabledColor = \"#9a9a9a\";\r\n    protected _disabledColorItem = \"#6a6a6a\";\r\n    protected _isReadOnly = false;\r\n    private _gradient: Nullable<BaseGradient> = null;\r\n    /** @internal */\r\n    protected _rebuildLayout = false;\r\n\r\n    /** @internal */\r\n    public _customData: any = {};\r\n\r\n    /** @internal */\r\n    public _isClipped = false;\r\n\r\n    /** @internal */\r\n    public _automaticSize = false;\r\n\r\n    /** @internal */\r\n    public _tag: any;\r\n\r\n    /**\r\n     * Gets or sets the unique id of the node. Please note that this number will be updated when the control is added to a container\r\n     */\r\n    public uniqueId: number;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the control is readonly (default: false).\r\n     * A readonly control will still raise pointer events but will not react to them\r\n     */\r\n    public get isReadOnly() {\r\n        return this._isReadOnly;\r\n    }\r\n\r\n    public set isReadOnly(value: boolean) {\r\n        this._isReadOnly = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the transformed measure, that is the bounding box of the control after applying all transformations\r\n     */\r\n    public get transformedMeasure(): Measure {\r\n        return this._evaluatedMeasure;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an object used to store user defined information for the node\r\n     */\r\n    @serialize()\r\n    public metadata: any = null;\r\n\r\n    /** Gets or sets a boolean indicating if the control can be hit with pointer events */\r\n    @serialize()\r\n    public isHitTestVisible = true;\r\n    /** Gets or sets a boolean indicating if the control can block pointer events. False by default except on the following controls:\r\n     * * Button controls (Button, RadioButton, ToggleButton)\r\n     * * Checkbox\r\n     * * ColorPicker\r\n     * * InputText\r\n     * * Slider\r\n     */\r\n    @serialize()\r\n    public isPointerBlocker = false;\r\n    /** Gets or sets a boolean indicating if the control can be focusable */\r\n    @serialize()\r\n    public isFocusInvisible = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the children are clipped to the current control bounds.\r\n     * Please note that not clipping children may generate issues with adt.useInvalidateRectOptimization so it is recommended to turn this optimization off if you want to use unclipped children\r\n     */\r\n    @serialize()\r\n    public clipChildren = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that control content must be clipped\r\n     * Please note that not clipping children may generate issues with adt.useInvalidateRectOptimization so it is recommended to turn this optimization off if you want to use unclipped children\r\n     */\r\n    @serialize()\r\n    public clipContent = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the current control should cache its rendering (useful when the control does not change often)\r\n     */\r\n    @serialize()\r\n    public useBitmapCache = false;\r\n\r\n    private _cacheData: Nullable<ImageData>;\r\n\r\n    private _shadowOffsetX = 0;\r\n    /** Gets or sets a value indicating the offset to apply on X axis to render the shadow */\r\n    @serialize()\r\n    public get shadowOffsetX() {\r\n        return this._shadowOffsetX;\r\n    }\r\n\r\n    public set shadowOffsetX(value: number) {\r\n        if (this._shadowOffsetX === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowOffsetX = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _shadowOffsetY = 0;\r\n    /** Gets or sets a value indicating the offset to apply on Y axis to render the shadow */\r\n    @serialize()\r\n    public get shadowOffsetY() {\r\n        return this._shadowOffsetY;\r\n    }\r\n\r\n    public set shadowOffsetY(value: number) {\r\n        if (this._shadowOffsetY === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowOffsetY = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _shadowBlur = 0;\r\n    private _previousShadowBlur = 0;\r\n    /** Gets or sets a value indicating the amount of blur to use to render the shadow */\r\n    @serialize()\r\n    public get shadowBlur() {\r\n        return this._shadowBlur;\r\n    }\r\n\r\n    public set shadowBlur(value: number) {\r\n        if (this._shadowBlur === value) {\r\n            return;\r\n        }\r\n\r\n        this._previousShadowBlur = this._shadowBlur;\r\n\r\n        this._shadowBlur = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _shadowColor = \"black\";\r\n    /** Gets or sets a value indicating the color of the shadow (black by default ie. \"#000\") */\r\n    @serialize()\r\n    public get shadowColor() {\r\n        return this._shadowColor;\r\n    }\r\n\r\n    public set shadowColor(value: string) {\r\n        if (this._shadowColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the cursor to use when the control is hovered */\r\n    @serialize()\r\n    public hoverCursor = \"\";\r\n\r\n    /** @internal */\r\n    protected _linkOffsetX = new ValueAndUnit(0);\r\n    /** @internal */\r\n    protected _linkOffsetY = new ValueAndUnit(0);\r\n\r\n    // Properties\r\n\r\n    /** Gets the control type name */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the control.\r\n     * @returns current class name\r\n     */\r\n    public getClassName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the accessibility tag to describe the control for accessibility purpose.\r\n     * By default, GUI controls already indicate accessibility info, but one can override the info using this tag.\r\n     */\r\n    public set accessibilityTag(value: Nullable<IAccessibilityTag>) {\r\n        this._accessibilityTag = value;\r\n        this.onAccessibilityTagChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    public get accessibilityTag() {\r\n        return this._accessibilityTag;\r\n    }\r\n\r\n    protected _accessibilityTag: Nullable<IAccessibilityTag> = null;\r\n\r\n    public onAccessibilityTagChangedObservable = new Observable<Nullable<IAccessibilityTag>>();\r\n\r\n    /**\r\n     * An event triggered when pointer wheel is scrolled\r\n     */\r\n    public onWheelObservable = new Observable<Vector2>();\r\n    /**\r\n     * An event triggered when the pointer moves over the control.\r\n     */\r\n    public onPointerMoveObservable = new Observable<Vector2>();\r\n\r\n    /**\r\n     * An event triggered when the pointer moves out of the control.\r\n     */\r\n    public onPointerOutObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered when the pointer taps the control\r\n     */\r\n    public onPointerDownObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer up\r\n     */\r\n    public onPointerUpObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when a control is clicked on\r\n     */\r\n    public onPointerClickObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer enters the control\r\n     */\r\n    public onPointerEnterObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered when the control is marked as dirty\r\n     */\r\n    public onDirtyObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered before drawing the control\r\n     */\r\n    public onBeforeDrawObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered after the control was drawn\r\n     */\r\n    public onAfterDrawObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered when the control has been disposed\r\n     */\r\n    public onDisposeObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered when the control isVisible is changed\r\n     */\r\n    public onIsVisibleChangedObservable = new Observable<boolean>();\r\n\r\n    /**\r\n     * Get the hosting AdvancedDynamicTexture\r\n     */\r\n    public get host(): AdvancedDynamicTexture {\r\n        return this._host;\r\n    }\r\n\r\n    /** Gets or set information about font offsets (used to render and align text) */\r\n    @serialize()\r\n    public get fontOffset(): { ascent: number; height: number; descent: number } {\r\n        return this._fontOffset;\r\n    }\r\n\r\n    public set fontOffset(offset: { ascent: number; height: number; descent: number }) {\r\n        this._fontOffset = offset;\r\n    }\r\n\r\n    /** Gets or sets alpha value for the control (1 means opaque and 0 means entirely transparent) */\r\n    @serialize()\r\n    public get alpha(): number {\r\n        return this._alpha;\r\n    }\r\n\r\n    public set alpha(value: number) {\r\n        if (this._alpha === value) {\r\n            return;\r\n        }\r\n        this._alphaSet = true;\r\n        this._alpha = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a number indicating size of stroke we want to highlight the control with (mostly for debugging purpose)\r\n     */\r\n    public get highlightLineWidth(): number {\r\n        return this._highlightLineWidth;\r\n    }\r\n\r\n    public set highlightLineWidth(value: number) {\r\n        if (this._highlightLineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._highlightLineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that we want to highlight the control (mostly for debugging purpose)\r\n     */\r\n    public get isHighlighted(): boolean {\r\n        return this._isHighlighted;\r\n    }\r\n\r\n    public set isHighlighted(value: boolean) {\r\n        if (this._isHighlighted === value) {\r\n            return;\r\n        }\r\n\r\n        this._isHighlighted = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a string defining the color to use for highlighting this control\r\n     */\r\n    public get highlightColor(): string {\r\n        return this._highlightColor;\r\n    }\r\n\r\n    public set highlightColor(value: string) {\r\n        if (this._highlightColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._highlightColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on X axis (1 by default)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\r\n     */\r\n    @serialize()\r\n    public get scaleX(): number {\r\n        return this._scaleX;\r\n    }\r\n\r\n    public set scaleX(value: number) {\r\n        if (this._scaleX === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on Y axis (1 by default)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\r\n     */\r\n    @serialize()\r\n    public get scaleY(): number {\r\n        return this._scaleY;\r\n    }\r\n\r\n    public set scaleY(value: number) {\r\n        if (this._scaleY === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the rotation angle (0 by default)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\r\n     */\r\n    @serialize()\r\n    public get rotation(): number {\r\n        return this._rotation;\r\n    }\r\n\r\n    public set rotation(value: number) {\r\n        if (this._rotation === value) {\r\n            return;\r\n        }\r\n\r\n        this._rotation = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on Y axis (0 by default)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\r\n     */\r\n    @serialize()\r\n    public get transformCenterY(): number {\r\n        return this._transformCenterY;\r\n    }\r\n\r\n    public set transformCenterY(value: number) {\r\n        if (this._transformCenterY === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on X axis (0 by default)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\r\n     */\r\n    @serialize()\r\n    public get transformCenterX(): number {\r\n        return this._transformCenterX;\r\n    }\r\n\r\n    public set transformCenterX(value: number) {\r\n        if (this._transformCenterX === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the horizontal alignment\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#alignments\r\n     */\r\n    @serialize()\r\n    public get horizontalAlignment(): number {\r\n        return this._horizontalAlignment;\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        if (this._horizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._horizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the vertical alignment\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#alignments\r\n     */\r\n    @serialize()\r\n    public get verticalAlignment(): number {\r\n        return this._verticalAlignment;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        if (this._verticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._verticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a fixed ratio for this control.\r\n     * When different from 0, the ratio is used to compute the \"second\" dimension.\r\n     * The first dimension used in the computation is the last one set (by setting width / widthInPixels or height / heightInPixels), and the\r\n     * second dimension is computed as first dimension * fixedRatio\r\n     */\r\n    @serialize()\r\n    public fixedRatio = 0;\r\n\r\n    protected _fixedRatioMasterIsWidth = true;\r\n\r\n    /**\r\n     * Gets or sets control width\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        this._fixedRatioMasterIsWidth = true;\r\n\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the control width in pixel\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get widthInPixels(): number {\r\n        return this._width.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set widthInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this._fixedRatioMasterIsWidth = true;\r\n        this.width = value + \"px\";\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control height\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    public set height(value: string | number) {\r\n        this._fixedRatioMasterIsWidth = false;\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control height in pixel\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get heightInPixels(): number {\r\n        return this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set heightInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this._fixedRatioMasterIsWidth = false;\r\n        this.height = value + \"px\";\r\n    }\r\n\r\n    /** Gets or set font family */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font style */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets style\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#styles\r\n     */\r\n    @serialize()\r\n    public get style(): Nullable<Style> {\r\n        return this._style;\r\n    }\r\n\r\n    public set style(value: Nullable<Style>) {\r\n        if (this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        this._style = value;\r\n\r\n        if (this._style) {\r\n            this._styleObserver = this._style.onChangedObservable.add(() => {\r\n                this._markAsDirty();\r\n                this._resetFontCache();\r\n            });\r\n        }\r\n\r\n        this._markAsDirty();\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** @internal */\r\n    public get _isFontSizeInPercentage(): boolean {\r\n        return this._fontSize.isPercentage;\r\n    }\r\n\r\n    /** Gets or sets font size in pixels */\r\n    public get fontSizeInPixels(): number {\r\n        const fontSizeToUse = this._style ? this._style._fontSize : this._fontSize;\r\n\r\n        if (fontSizeToUse.isPixel) {\r\n            return fontSizeToUse.getValue(this._host);\r\n        }\r\n\r\n        return fontSizeToUse.getValueInPixel(this._host, this._tempParentMeasure.height || this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set fontSizeInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.fontSize = value + \"px\";\r\n    }\r\n\r\n    /** Gets or sets font size */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this._markAsDirty();\r\n            this._resetFontCache();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets foreground color */\r\n    @serialize()\r\n    public get color(): string {\r\n        return this._color;\r\n    }\r\n\r\n    public set color(value: string) {\r\n        if (this._color === value) {\r\n            return;\r\n        }\r\n\r\n        this._color = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets gradient. Setting a gradient will override the color */\r\n    @serialize()\r\n    public get gradient(): Nullable<BaseGradient> {\r\n        return this._gradient;\r\n    }\r\n\r\n    public set gradient(value: Nullable<BaseGradient>) {\r\n        if (this._gradient === value) {\r\n            return;\r\n        }\r\n\r\n        this._gradient = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets z index which is used to reorder controls on the z axis */\r\n    @serialize()\r\n    public get zIndex(): number {\r\n        return this._zIndex;\r\n    }\r\n\r\n    public set zIndex(value: number) {\r\n        if (this.zIndex === value) {\r\n            return;\r\n        }\r\n\r\n        this._zIndex = value;\r\n\r\n        if (this.parent) {\r\n            this.parent._reOrderControl(this);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can be rendered */\r\n    @serialize()\r\n    public get notRenderable(): boolean {\r\n        return this._doNotRender;\r\n    }\r\n\r\n    public set notRenderable(value: boolean) {\r\n        if (this._doNotRender === value) {\r\n            return;\r\n        }\r\n\r\n        this._doNotRender = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    @serialize()\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n        this._markAsDirty(true);\r\n\r\n        this.onIsVisibleChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    /** Gets a boolean indicating that the control needs to update its rendering */\r\n    public get isDirty(): boolean {\r\n        return this._isDirty;\r\n    }\r\n\r\n    /**\r\n     * Gets the current linked mesh (or null if none)\r\n     */\r\n    public get linkedMesh(): Nullable<TransformNode> {\r\n        return this._linkedMesh;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding should work like in CSS.\r\n     * Basically, it will add the padding amount on each side of the parent control for its children.\r\n     */\r\n    @serialize()\r\n    public get descendantsOnlyPadding(): boolean {\r\n        return this._descendantsOnlyPadding;\r\n    }\r\n\r\n    public set descendantsOnlyPadding(value: boolean) {\r\n        if (this._descendantsOnlyPadding === value) {\r\n            return;\r\n        }\r\n\r\n        this._descendantsOnlyPadding = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the left of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get paddingLeft(): string | number {\r\n        return this._paddingLeft.toString(this._host);\r\n    }\r\n\r\n    public set paddingLeft(value: string | number) {\r\n        if (this._paddingLeft.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding in pixels to use on the left of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get paddingLeftInPixels(): number {\r\n        return this._paddingLeft.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingLeftInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.paddingLeft = value + \"px\";\r\n    }\r\n\r\n    /** @internal */\r\n    public get _paddingLeftInPixels(): number {\r\n        if (this._descendantsOnlyPadding) {\r\n            return 0;\r\n        }\r\n\r\n        return this.paddingLeftInPixels;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the right of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get paddingRight(): string | number {\r\n        return this._paddingRight.toString(this._host);\r\n    }\r\n\r\n    public set paddingRight(value: string | number) {\r\n        if (this._paddingRight.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding in pixels to use on the right of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get paddingRightInPixels(): number {\r\n        return this._paddingRight.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingRightInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.paddingRight = value + \"px\";\r\n    }\r\n\r\n    /** @internal */\r\n    public get _paddingRightInPixels(): number {\r\n        if (this._descendantsOnlyPadding) {\r\n            return 0;\r\n        }\r\n\r\n        return this.paddingRightInPixels;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the top of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get paddingTop(): string | number {\r\n        return this._paddingTop.toString(this._host);\r\n    }\r\n\r\n    public set paddingTop(value: string | number) {\r\n        if (this._paddingTop.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding in pixels to use on the top of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get paddingTopInPixels(): number {\r\n        return this._paddingTop.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingTopInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.paddingTop = value + \"px\";\r\n    }\r\n\r\n    /** @internal */\r\n    public get _paddingTopInPixels(): number {\r\n        if (this._descendantsOnlyPadding) {\r\n            return 0;\r\n        }\r\n\r\n        return this.paddingTopInPixels;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the bottom of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get paddingBottom(): string | number {\r\n        return this._paddingBottom.toString(this._host);\r\n    }\r\n\r\n    public set paddingBottom(value: string | number) {\r\n        if (this._paddingBottom.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding in pixels to use on the bottom of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get paddingBottomInPixels(): number {\r\n        return this._paddingBottom.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingBottomInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.paddingBottom = value + \"px\";\r\n    }\r\n\r\n    /** @internal */\r\n    public get _paddingBottomInPixels(): number {\r\n        if (this._descendantsOnlyPadding) {\r\n            return 0;\r\n        }\r\n\r\n        return this.paddingBottomInPixels;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the left coordinate of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get left(): string | number {\r\n        return this._left.toString(this._host);\r\n    }\r\n\r\n    public set left(value: string | number) {\r\n        if (this._left.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the left coordinate in pixels of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get leftInPixels(): number {\r\n        return this._left.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set leftInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.left = value + \"px\";\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the top coordinate of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get top(): string | number {\r\n        return this._top.toString(this._host);\r\n    }\r\n\r\n    public set top(value: string | number) {\r\n        if (this._top.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the top coordinate in pixels of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get topInPixels(): number {\r\n        return this._top.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set topInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.top = value + \"px\";\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on X axis to the linked mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\r\n     */\r\n    @serialize()\r\n    public get linkOffsetX(): string | number {\r\n        return this._linkOffsetX.toString(this._host);\r\n    }\r\n\r\n    public set linkOffsetX(value: string | number) {\r\n        if (this._linkOffsetX.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset in pixels on X axis to the linked mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\r\n     */\r\n    public get linkOffsetXInPixels(): number {\r\n        return this._linkOffsetX.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set linkOffsetXInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.linkOffsetX = value + \"px\";\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on Y axis to the linked mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\r\n     */\r\n    @serialize()\r\n    public get linkOffsetY(): string | number {\r\n        return this._linkOffsetY.toString(this._host);\r\n    }\r\n\r\n    public set linkOffsetY(value: string | number) {\r\n        if (this._linkOffsetY.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset in pixels on Y axis to the linked mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\r\n     */\r\n    public get linkOffsetYInPixels(): number {\r\n        return this._linkOffsetY.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set linkOffsetYInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.linkOffsetY = value + \"px\";\r\n    }\r\n\r\n    /** Gets the center coordinate on X axis */\r\n    public get centerX(): number {\r\n        return this._currentMeasure.left + this._currentMeasure.width / 2;\r\n    }\r\n\r\n    /** Gets the center coordinate on Y axis */\r\n    public get centerY(): number {\r\n        return this._currentMeasure.top + this._currentMeasure.height / 2;\r\n    }\r\n\r\n    /** Gets or sets if control is Enabled */\r\n    @serialize()\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n\r\n    public set isEnabled(value: boolean) {\r\n        if (this._isEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._isEnabled = value;\r\n        this._markAsDirty();\r\n        // if this control or any of it's descendants are under a pointer, we need to fire a pointerOut event\r\n        const recursivelyFirePointerOut = (control: Control) => {\r\n            if (!control.host) {\r\n                return;\r\n            }\r\n            for (const pointer in control.host._lastControlOver) {\r\n                if (control === this.host._lastControlOver[pointer]) {\r\n                    control._onPointerOut(control, null, true);\r\n                    delete control.host._lastControlOver[pointer];\r\n                }\r\n            }\r\n            if ((control as Container).children !== undefined) {\r\n                (control as Container).children.forEach(recursivelyFirePointerOut);\r\n            }\r\n        };\r\n        recursivelyFirePointerOut(this);\r\n    }\r\n    /** Gets or sets background color of control if it's disabled. Only applies to Button class. */\r\n    @serialize()\r\n    public get disabledColor(): string {\r\n        return this._disabledColor;\r\n    }\r\n\r\n    public set disabledColor(value: string) {\r\n        if (this._disabledColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._disabledColor = value;\r\n        this._markAsDirty();\r\n    }\r\n    /** Gets or sets front color of control if it's disabled. Only applies to Checkbox class. */\r\n    @serialize()\r\n    public get disabledColorItem(): string {\r\n        return this._disabledColorItem;\r\n    }\r\n\r\n    public set disabledColorItem(value: string) {\r\n        if (this._disabledColorItem === value) {\r\n            return;\r\n        }\r\n\r\n        this._disabledColorItem = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets/sets the overlap group of the control.\r\n     * Controls with overlapGroup set to a number can be deoverlapped.\r\n     * Controls with overlapGroup set to undefined are not deoverlapped.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#deoverlapping\r\n     */\r\n    @serialize()\r\n    public overlapGroup?: number;\r\n    /**\r\n     * Gets/sets the deoverlap movement multiplier\r\n     */\r\n    @serialize()\r\n    public overlapDeltaMultiplier?: number;\r\n\r\n    /**\r\n     * Array of animations\r\n     */\r\n    animations: Nullable<Animation[]> = null;\r\n\r\n    // Functions\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the name of the control\r\n     */\r\n    constructor(\r\n        /** defines the name of the control */\r\n        public name?: string\r\n    ) {}\r\n\r\n    /** @internal */\r\n    protected _getTypeName(): string {\r\n        return \"Control\";\r\n    }\r\n\r\n    /**\r\n     * Gets the first ascendant in the hierarchy of the given type\r\n     * @param className defines the required type\r\n     * @returns the ascendant or null if not found\r\n     */\r\n    public getAscendantOfClass(className: string): Nullable<Control> {\r\n        if (!this.parent) {\r\n            return null;\r\n        }\r\n\r\n        if (this.parent.getClassName() === className) {\r\n            return this.parent;\r\n        }\r\n\r\n        return this.parent.getAscendantOfClass(className);\r\n    }\r\n\r\n    /**\r\n     * Mark control element as dirty\r\n     * @param force force non visible elements to be marked too\r\n     */\r\n    public markAsDirty(force = false): void {\r\n        this._markAsDirty(force);\r\n    }\r\n\r\n    /**\r\n     * Mark the element and its children as dirty\r\n     */\r\n    public markAllAsDirty(): void {\r\n        this._markAllAsDirty();\r\n    }\r\n\r\n    /** @internal */\r\n    public _resetFontCache(): void {\r\n        this._fontSet = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Determines if a container is an ascendant of the current control\r\n     * @param container defines the container to look for\r\n     * @returns true if the container is one of the ascendant of the control\r\n     */\r\n    public isAscendant(container: Control): boolean {\r\n        if (!this.parent) {\r\n            return false;\r\n        }\r\n\r\n        if (this.parent === container) {\r\n            return true;\r\n        }\r\n\r\n        return this.parent.isAscendant(container);\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in local space\r\n     */\r\n    public getLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        const result = Vector2.Zero();\r\n\r\n        this.getLocalCoordinatesToRef(globalCoordinates, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @param result defines the target vector2 where to store the result\r\n     * @returns the current control\r\n     */\r\n    public getLocalCoordinatesToRef(globalCoordinates: Vector2, result: Vector2): Control {\r\n        result.x = globalCoordinates.x - this._currentMeasure.left;\r\n        result.y = globalCoordinates.y - this._currentMeasure.top;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in parent local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in parent local space\r\n     */\r\n    public getParentLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        const result = Vector2.Zero();\r\n\r\n        result.x = globalCoordinates.x - this._cachedParentMeasure.left;\r\n        result.y = globalCoordinates.y - this._cachedParentMeasure.top;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Move the current control to a vector3 position projected onto the screen.\r\n     * @param position defines the target position\r\n     * @param scene defines the hosting scene\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene): void {\r\n        if (!this._host || this.parent !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        const globalViewport = this._host._getGlobalViewport();\r\n        const projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Will store all controls that have this control as ascendant in a given array\r\n     * @param results defines the array where to store the descendants\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     */\r\n    public getDescendantsToRef(results: Control[], directDescendantsOnly: boolean = false, predicate?: (control: Control) => boolean): void {\r\n        // Do nothing by default\r\n    }\r\n\r\n    /**\r\n     * Will return all controls that have this control as ascendant\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @returns all child controls\r\n     */\r\n    public getDescendants(directDescendantsOnly?: boolean, predicate?: (control: Control) => boolean): Control[] {\r\n        const results = new Array<Control>();\r\n\r\n        this.getDescendantsToRef(results, directDescendantsOnly, predicate);\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Link current control with a target mesh\r\n     * @param mesh defines the mesh to link with\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\r\n     */\r\n    public linkWithMesh(mesh: Nullable<TransformNode>): void {\r\n        if (!this._host || (this.parent && this.parent !== this._host._rootContainer)) {\r\n            if (mesh) {\r\n                Tools.Error(\"Cannot link a control to a mesh if the control is not at root level\");\r\n            }\r\n            return;\r\n        }\r\n\r\n        const index = this._host._linkedControls.indexOf(this);\r\n        if (index !== -1) {\r\n            this._linkedMesh = mesh;\r\n            if (!mesh) {\r\n                this._host._linkedControls.splice(index, 1);\r\n            }\r\n            return;\r\n        } else if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._linkedMesh = mesh;\r\n        this._host._linkedControls.push(this);\r\n    }\r\n\r\n    /**\r\n     * Shorthand function to set the top, right, bottom, and left padding values on the control.\r\n     * @param { string | number} paddingTop - The value of the top padding.\r\n     * @param { string | number} paddingRight - The value of the right padding. If omitted, top is used.\r\n     * @param { string | number} paddingBottom - The value of the bottom padding. If omitted, top is used.\r\n     * @param { string | number} paddingLeft - The value of the left padding. If omitted, right is used.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public setPadding(paddingTop: string | number, paddingRight?: string | number, paddingBottom?: string | number, paddingLeft?: string | number) {\r\n        const top = paddingTop;\r\n        const right = paddingRight ?? top;\r\n        const bottom = paddingBottom ?? top;\r\n        const left = paddingLeft ?? right;\r\n\r\n        this.paddingTop = top;\r\n        this.paddingRight = right;\r\n        this.paddingBottom = bottom;\r\n        this.paddingLeft = left;\r\n    }\r\n\r\n    /**\r\n     * Shorthand funtion to set the top, right, bottom, and left padding values in pixels on the control.\r\n     * @param { number} paddingTop - The value in pixels of the top padding.\r\n     * @param { number} paddingRight - The value in pixels of the right padding. If omitted, top is used.\r\n     * @param { number} paddingBottom - The value in pixels of the bottom padding. If omitted, top is used.\r\n     * @param { number} paddingLeft - The value in pixels of the left padding. If omitted, right is used.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public setPaddingInPixels(paddingTop: number, paddingRight?: number, paddingBottom?: number, paddingLeft?: number) {\r\n        const top = paddingTop;\r\n        const right = paddingRight ?? top;\r\n        const bottom = paddingBottom ?? top;\r\n        const left = paddingLeft ?? right;\r\n\r\n        this.paddingTopInPixels = top;\r\n        this.paddingRightInPixels = right;\r\n        this.paddingBottomInPixels = bottom;\r\n        this.paddingLeftInPixels = left;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3): void {\r\n        const oldLeft = this._left.getValue(this._host);\r\n        const oldTop = this._top.getValue(this._host);\r\n\r\n        const parentMeasure = this.parent?._currentMeasure;\r\n        if (parentMeasure) {\r\n            this._processMeasures(parentMeasure, this._host.getContext());\r\n        }\r\n\r\n        let newLeft = projectedPosition.x + this._linkOffsetX.getValue(this._host) - this._currentMeasure.width / 2;\r\n        let newTop = projectedPosition.y + this._linkOffsetY.getValue(this._host) - this._currentMeasure.height / 2;\r\n\r\n        if (this._left.ignoreAdaptiveScaling && this._top.ignoreAdaptiveScaling) {\r\n            if (Math.abs(newLeft - oldLeft) < 0.5) {\r\n                newLeft = oldLeft;\r\n            }\r\n\r\n            if (Math.abs(newTop - oldTop) < 0.5) {\r\n                newTop = oldTop;\r\n            }\r\n        }\r\n\r\n        if (oldLeft === newLeft && oldTop === newTop) {\r\n            return;\r\n        }\r\n\r\n        this.left = newLeft + \"px\";\r\n        this.top = newTop + \"px\";\r\n\r\n        this._left.ignoreAdaptiveScaling = true;\r\n        this._top.ignoreAdaptiveScaling = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _offsetLeft(offset: number) {\r\n        this._isDirty = true;\r\n        this._currentMeasure.left += offset;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _offsetTop(offset: number) {\r\n        this._isDirty = true;\r\n        this._currentMeasure.top += offset;\r\n    }\r\n\r\n    /** @internal */\r\n    public _markMatrixAsDirty(): void {\r\n        this._isMatrixDirty = true;\r\n        this._flagDescendantsAsMatrixDirty();\r\n    }\r\n\r\n    /** @internal */\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        // No child\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _intersectsRect(rect: Measure, context?: ICanvasRenderingContext) {\r\n        // make sure we are transformed correctly before checking intersections. no-op if nothing is dirty.\r\n        this._transform(context);\r\n        if (this._evaluatedMeasure.left >= rect.left + rect.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this._evaluatedMeasure.top >= rect.top + rect.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this._evaluatedMeasure.left + this._evaluatedMeasure.width <= rect.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this._evaluatedMeasure.top + this._evaluatedMeasure.height <= rect.top) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @internal */\r\n    protected _computeAdditionnalOffsetX() {\r\n        return 0;\r\n    }\r\n\r\n    /** @internal */\r\n    protected _computeAdditionnalOffsetY() {\r\n        return 0;\r\n    }\r\n\r\n    /** @internal */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public invalidateRect() {\r\n        this._transform();\r\n        if (this.host && this.host.useInvalidateRectOptimization) {\r\n            // Rotate by transform to get the measure transformed to global space\r\n            this._currentMeasure.transformToRef(this._transformMatrix, this._tmpMeasureA);\r\n            // get the boudning box of the current measure and last frames measure in global space and invalidate it\r\n            // the previous measure is used to properly clear a control that is scaled down\r\n            Measure.CombineToRef(this._tmpMeasureA, this._prevCurrentMeasureTransformedIntoGlobalSpace, this._tmpMeasureA);\r\n\r\n            // Expand rect based on shadows\r\n            const shadowOffsetX = this.shadowOffsetX;\r\n            const shadowOffsetY = this.shadowOffsetY;\r\n            const shadowBlur = Math.max(this._previousShadowBlur, this.shadowBlur);\r\n\r\n            const leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\r\n            const rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\r\n            const topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\r\n            const bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\r\n\r\n            const offsetX = this._computeAdditionnalOffsetX();\r\n            const offsetY = this._computeAdditionnalOffsetY();\r\n\r\n            this.host.invalidateRect(\r\n                Math.floor(this._tmpMeasureA.left + leftShadowOffset - offsetX),\r\n                Math.floor(this._tmpMeasureA.top + topShadowOffset - offsetY),\r\n                Math.ceil(this._tmpMeasureA.left + this._tmpMeasureA.width + rightShadowOffset + offsetX),\r\n                Math.ceil(this._tmpMeasureA.top + this._tmpMeasureA.height + bottomShadowOffset + offsetY)\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _markAsDirty(force = false): void {\r\n        if (!this._isVisible && !force) {\r\n            return;\r\n        }\r\n\r\n        this._isDirty = true;\r\n        this._markMatrixAsDirty();\r\n\r\n        // Redraw only this rectangle\r\n        if (this._host) {\r\n            this._host.markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _markAllAsDirty(): void {\r\n        this._markAsDirty();\r\n\r\n        if (this._font) {\r\n            this._prepareFont();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _link(host: AdvancedDynamicTexture): void {\r\n        this._host = host;\r\n        if (this._host) {\r\n            this.uniqueId = this._host.getScene()!.getUniqueId();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _transform(context?: ICanvasRenderingContext): void {\r\n        if (!this._isMatrixDirty && this._scaleX === 1 && this._scaleY === 1 && this._rotation === 0) {\r\n            return;\r\n        }\r\n\r\n        // postTranslate\r\n        const offsetX = this._currentMeasure.width * this._transformCenterX + this._currentMeasure.left;\r\n        const offsetY = this._currentMeasure.height * this._transformCenterY + this._currentMeasure.top;\r\n        if (context) {\r\n            context.translate(offsetX, offsetY);\r\n\r\n            // rotate\r\n            context.rotate(this._rotation);\r\n\r\n            // scale\r\n            context.scale(this._scaleX, this._scaleY);\r\n\r\n            // preTranslate\r\n            context.translate(-offsetX, -offsetY);\r\n        }\r\n        // Need to update matrices?\r\n        if (this._isMatrixDirty || this._cachedOffsetX !== offsetX || this._cachedOffsetY !== offsetY) {\r\n            this._cachedOffsetX = offsetX;\r\n            this._cachedOffsetY = offsetY;\r\n            this._isMatrixDirty = false;\r\n            this._flagDescendantsAsMatrixDirty();\r\n\r\n            Matrix2D.ComposeToRef(-offsetX, -offsetY, this._rotation, this._scaleX, this._scaleY, this.parent ? this.parent._transformMatrix : null, this._transformMatrix);\r\n\r\n            this._transformMatrix.invertToRef(this._invertTransformMatrix);\r\n            this._currentMeasure.transformToRef(this._transformMatrix, this._evaluatedMeasure);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _renderHighlight(context: ICanvasRenderingContext): void {\r\n        if (!this.isHighlighted) {\r\n            return;\r\n        }\r\n\r\n        context.save();\r\n        context.strokeStyle = this._highlightColor;\r\n        context.lineWidth = this._highlightLineWidth;\r\n\r\n        this._renderHighlightSpecific(context);\r\n        context.restore();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _renderHighlightSpecific(context: ICanvasRenderingContext): void {\r\n        context.strokeRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n    }\r\n\r\n    protected _getColor(context: ICanvasRenderingContext): string | ICanvasGradient {\r\n        return this.gradient ? this.gradient.getCanvasGradient(context) : this.color;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _applyStates(context: ICanvasRenderingContext): void {\r\n        if (this._isFontSizeInPercentage) {\r\n            this._fontSet = true;\r\n        }\r\n\r\n        if (this._host && this._host.useSmallestIdeal && !this._font) {\r\n            this._fontSet = true;\r\n        }\r\n\r\n        if (this._fontSet) {\r\n            this._prepareFont();\r\n            this._fontSet = false;\r\n        }\r\n\r\n        if (this._font) {\r\n            context.font = this._font;\r\n        }\r\n\r\n        if (this._color || this.gradient) {\r\n            context.fillStyle = this._getColor(context);\r\n        }\r\n\r\n        if (Control.AllowAlphaInheritance) {\r\n            context.globalAlpha *= this._alpha;\r\n        } else if (this._alphaSet) {\r\n            context.globalAlpha = this.parent && !this.parent.renderToIntermediateTexture ? this.parent.alpha * this._alpha : this._alpha;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _layout(parentMeasure: Measure, context: ICanvasRenderingContext): boolean {\r\n        if (!this.isDirty && (!this.isVisible || this.notRenderable)) {\r\n            return false;\r\n        }\r\n\r\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\r\n            this.host._numLayoutCalls++;\r\n\r\n            this._currentMeasure.addAndTransformToRef(\r\n                this._transformMatrix,\r\n                -this._paddingLeftInPixels | 0,\r\n                -this._paddingTopInPixels | 0,\r\n                this._paddingRightInPixels | 0,\r\n                this._paddingBottomInPixels | 0,\r\n                this._prevCurrentMeasureTransformedIntoGlobalSpace\r\n            );\r\n\r\n            context.save();\r\n\r\n            this._applyStates(context);\r\n\r\n            let rebuildCount = 0;\r\n            do {\r\n                this._rebuildLayout = false;\r\n                this._processMeasures(parentMeasure, context);\r\n                rebuildCount++;\r\n            } while (this._rebuildLayout && rebuildCount < 3);\r\n\r\n            if (rebuildCount >= 3) {\r\n                Logger.Error(`Layout cycle detected in GUI (Control name=${this.name}, uniqueId=${this.uniqueId})`);\r\n            }\r\n\r\n            context.restore();\r\n            this.invalidateRect();\r\n            this._evaluateClippingState(parentMeasure);\r\n        }\r\n\r\n        this._wasDirty = this._isDirty;\r\n        this._isDirty = false;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _processMeasures(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        this._tempPaddingMeasure.copyFrom(parentMeasure);\r\n\r\n        // Apply padding if in correct mode\r\n        if (this.parent && this.parent.descendantsOnlyPadding) {\r\n            this._tempPaddingMeasure.left += this.parent.paddingLeftInPixels;\r\n            this._tempPaddingMeasure.top += this.parent.paddingTopInPixels;\r\n            this._tempPaddingMeasure.width -= this.parent.paddingLeftInPixels + this.parent.paddingRightInPixels;\r\n            this._tempPaddingMeasure.height -= this.parent.paddingTopInPixels + this.parent.paddingBottomInPixels;\r\n        }\r\n\r\n        this._currentMeasure.copyFrom(this._tempPaddingMeasure);\r\n\r\n        // Let children take some pre-measurement actions\r\n        this._preMeasure(this._tempPaddingMeasure, context);\r\n\r\n        this._measure();\r\n        this._computeAlignment(this._tempPaddingMeasure, context);\r\n\r\n        // Convert to int values\r\n        this._currentMeasure.left = this._currentMeasure.left | 0;\r\n        this._currentMeasure.top = this._currentMeasure.top | 0;\r\n        this._currentMeasure.width = this._currentMeasure.width | 0;\r\n        this._currentMeasure.height = this._currentMeasure.height | 0;\r\n\r\n        // Let children add more features\r\n        this._additionalProcessing(this._tempPaddingMeasure, context);\r\n\r\n        this._cachedParentMeasure.copyFrom(this._tempPaddingMeasure);\r\n\r\n        this._currentMeasure.transformToRef(this._transformMatrix, this._evaluatedMeasure);\r\n        if (this.onDirtyObservable.hasObservers()) {\r\n            this.onDirtyObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    protected _evaluateClippingState(parentMeasure: Measure) {\r\n        this._currentMeasure.transformToRef(this._transformMatrix, this._evaluatedMeasure);\r\n        if (this.parent && this.parent.clipChildren) {\r\n            parentMeasure.transformToRef(this.parent._transformMatrix, this._evaluatedParentMeasure);\r\n            // Early clip\r\n            if (this._evaluatedMeasure.left > this._evaluatedParentMeasure.left + this._evaluatedParentMeasure.width) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n\r\n            if (this._evaluatedMeasure.left + this._evaluatedMeasure.width < this._evaluatedParentMeasure.left) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n\r\n            if (this._evaluatedMeasure.top > this._evaluatedParentMeasure.top + this._evaluatedParentMeasure.height) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n\r\n            if (this._evaluatedMeasure.top + this._evaluatedMeasure.height < this._evaluatedParentMeasure.top) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._isClipped = false;\r\n    }\r\n\r\n    /** @internal */\r\n    public _measure(): void {\r\n        // Width / Height\r\n        if (this._width.isPixel) {\r\n            this._currentMeasure.width = this._width.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width *= this._width.getValue(this._host);\r\n        }\r\n\r\n        if (this._height.isPixel) {\r\n            this._currentMeasure.height = this._height.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height *= this._height.getValue(this._host);\r\n        }\r\n\r\n        if (this.fixedRatio !== 0) {\r\n            if (this._fixedRatioMasterIsWidth) {\r\n                this._currentMeasure.height = this._currentMeasure.width * this.fixedRatio;\r\n            } else {\r\n                this._currentMeasure.width = this._currentMeasure.height * this.fixedRatio;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _computeAlignment(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        const width = this._currentMeasure.width;\r\n        const height = this._currentMeasure.height;\r\n\r\n        const parentWidth = parentMeasure.width;\r\n        const parentHeight = parentMeasure.height;\r\n\r\n        // Left / top\r\n        let x = 0;\r\n        let y = 0;\r\n\r\n        switch (this.horizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = parentWidth - width;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (parentWidth - width) / 2;\r\n                break;\r\n        }\r\n\r\n        switch (this.verticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                y = 0;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                y = parentHeight - height;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                y = (parentHeight - height) / 2;\r\n                break;\r\n        }\r\n\r\n        if (!this.descendantsOnlyPadding) {\r\n            if (this._paddingLeft.isPixel) {\r\n                this._currentMeasure.left += this._paddingLeft.getValue(this._host);\r\n                this._currentMeasure.width -= this._paddingLeft.getValue(this._host);\r\n            } else {\r\n                this._currentMeasure.left += parentWidth * this._paddingLeft.getValue(this._host);\r\n                this._currentMeasure.width -= parentWidth * this._paddingLeft.getValue(this._host);\r\n            }\r\n\r\n            if (this._paddingRight.isPixel) {\r\n                this._currentMeasure.width -= this._paddingRight.getValue(this._host);\r\n            } else {\r\n                this._currentMeasure.width -= parentWidth * this._paddingRight.getValue(this._host);\r\n            }\r\n\r\n            if (this._paddingTop.isPixel) {\r\n                this._currentMeasure.top += this._paddingTop.getValue(this._host);\r\n                this._currentMeasure.height -= this._paddingTop.getValue(this._host);\r\n            } else {\r\n                this._currentMeasure.top += parentHeight * this._paddingTop.getValue(this._host);\r\n                this._currentMeasure.height -= parentHeight * this._paddingTop.getValue(this._host);\r\n            }\r\n\r\n            if (this._paddingBottom.isPixel) {\r\n                this._currentMeasure.height -= this._paddingBottom.getValue(this._host);\r\n            } else {\r\n                this._currentMeasure.height -= parentHeight * this._paddingBottom.getValue(this._host);\r\n            }\r\n        }\r\n\r\n        if (this._left.isPixel) {\r\n            this._currentMeasure.left += this._left.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._left.getValue(this._host);\r\n        }\r\n\r\n        if (this._top.isPixel) {\r\n            this._currentMeasure.top += this._top.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._top.getValue(this._host);\r\n        }\r\n\r\n        this._currentMeasure.left += x;\r\n        this._currentMeasure.top += y;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _preMeasure(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _clipForChildren(context: ICanvasRenderingContext): void {\r\n        // DO nothing\r\n    }\r\n\r\n    private static _ClipMeasure = new Measure(0, 0, 0, 0);\r\n    private _tmpMeasureA = new Measure(0, 0, 0, 0);\r\n    private _clip(context: ICanvasRenderingContext, invalidatedRectangle?: Nullable<Measure>) {\r\n        context.beginPath();\r\n        Control._ClipMeasure.copyFrom(this._currentMeasure);\r\n        if (invalidatedRectangle) {\r\n            // Rotate the invalidated rect into the control's space\r\n            invalidatedRectangle.transformToRef(this._invertTransformMatrix, this._tmpMeasureA);\r\n\r\n            // Get the intersection of the rect in context space and the current context\r\n            const intersection = new Measure(0, 0, 0, 0);\r\n            intersection.left = Math.max(this._tmpMeasureA.left, this._currentMeasure.left);\r\n            intersection.top = Math.max(this._tmpMeasureA.top, this._currentMeasure.top);\r\n            intersection.width = Math.min(this._tmpMeasureA.left + this._tmpMeasureA.width, this._currentMeasure.left + this._currentMeasure.width) - intersection.left;\r\n            intersection.height = Math.min(this._tmpMeasureA.top + this._tmpMeasureA.height, this._currentMeasure.top + this._currentMeasure.height) - intersection.top;\r\n            Control._ClipMeasure.copyFrom(intersection);\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            const shadowOffsetX = this.shadowOffsetX;\r\n            const shadowOffsetY = this.shadowOffsetY;\r\n            const shadowBlur = this.shadowBlur;\r\n\r\n            const leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\r\n            const rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\r\n            const topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\r\n            const bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\r\n\r\n            context.rect(\r\n                Control._ClipMeasure.left + leftShadowOffset,\r\n                Control._ClipMeasure.top + topShadowOffset,\r\n                Control._ClipMeasure.width + rightShadowOffset - leftShadowOffset,\r\n                Control._ClipMeasure.height + bottomShadowOffset - topShadowOffset\r\n            );\r\n        } else {\r\n            context.rect(Control._ClipMeasure.left, Control._ClipMeasure.top, Control._ClipMeasure.width, Control._ClipMeasure.height);\r\n        }\r\n\r\n        context.clip();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _render(context: ICanvasRenderingContext, invalidatedRectangle?: Nullable<Measure>): boolean {\r\n        if (!this.isVisible || this.notRenderable || this._isClipped) {\r\n            this._isDirty = false;\r\n            return false;\r\n        }\r\n\r\n        this.host._numRenderCalls++;\r\n\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        // Transform\r\n        this._transform(context);\r\n\r\n        // Clip\r\n        if (this.clipContent) {\r\n            this._clip(context, invalidatedRectangle);\r\n        }\r\n\r\n        if (this.onBeforeDrawObservable.hasObservers()) {\r\n            this.onBeforeDrawObservable.notifyObservers(this);\r\n        }\r\n\r\n        if (this.useBitmapCache && !this._wasDirty && this._cacheData) {\r\n            context.putImageData(this._cacheData, this._currentMeasure.left, this._currentMeasure.top);\r\n        } else {\r\n            this._draw(context, invalidatedRectangle);\r\n        }\r\n\r\n        if (this.useBitmapCache && this._wasDirty) {\r\n            this._cacheData = context.getImageData(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n        }\r\n\r\n        this._renderHighlight(context);\r\n\r\n        if (this.onAfterDrawObservable.hasObservers()) {\r\n            this.onAfterDrawObservable.notifyObservers(this);\r\n        }\r\n\r\n        context.restore();\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _draw(context: ICanvasRenderingContext, invalidatedRectangle?: Nullable<Measure>): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Tests if a given coordinates belong to the current control\r\n     * @param x defines x coordinate to test\r\n     * @param y defines y coordinate to test\r\n     * @returns true if the coordinates are inside the control\r\n     */\r\n    public contains(x: number, y: number): boolean {\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n\r\n        x = this._transformedPosition.x;\r\n        y = this._transformedPosition.y;\r\n\r\n        // Check\r\n        if (x < this._currentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (x > this._currentMeasure.left + this._currentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (y < this._currentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        if (y > this._currentMeasure.top + this._currentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isPointerBlocker) {\r\n            this._host._shouldBlockPointer = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _processPicking(x: number, y: number, pi: Nullable<PointerInfoBase>, type: number, pointerId: number, buttonIndex: number, deltaX?: number, deltaY?: number): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (!this.isHitTestVisible || !this.isVisible || this._doNotRender) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerMove(target: Control, coordinates: Vector2, pointerId: number, pi: Nullable<PointerInfoBase>): void {\r\n        const canNotify: boolean = this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this, pi);\r\n\r\n        if (canNotify && this.parent != null && !this.isPointerBlocker) {\r\n            this.parent._onPointerMove(target, coordinates, pointerId, pi);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerEnter(target: Control, pi: Nullable<PointerInfoBase>): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) {\r\n            // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n        this._enterCount++;\r\n\r\n        const canNotify: boolean = this.onPointerEnterObservable.notifyObservers(this, -1, target, this, pi);\r\n\r\n        if (canNotify && this.parent != null && !this.isPointerBlocker) {\r\n            this.parent._onPointerEnter(target, pi);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerOut(target: Control, pi: Nullable<PointerInfoBase>, force = false): void {\r\n        if (!force && (!this._isEnabled || target === this)) {\r\n            return;\r\n        }\r\n        this._enterCount = 0;\r\n\r\n        let canNotify: boolean = true;\r\n\r\n        if (!target.isAscendant(this)) {\r\n            canNotify = this.onPointerOutObservable.notifyObservers(this, -1, target, this, pi);\r\n        }\r\n\r\n        if (canNotify && this.parent != null && !this.isPointerBlocker) {\r\n            this.parent._onPointerOut(target, pi, force);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: Nullable<PointerInfoBase>): boolean {\r\n        // Prevent pointerout to lose control context.\r\n        // Event redundancy is checked inside the function.\r\n        this._onPointerEnter(this, pi);\r\n\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        const canNotify: boolean = this.onPointerDownObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this, pi);\r\n\r\n        if (canNotify && this.parent != null && !this.isPointerBlocker) {\r\n            this.parent._onPointerDown(target, coordinates, pointerId, buttonIndex, pi);\r\n        }\r\n\r\n        if (pi && this.uniqueId !== this._host.rootContainer.uniqueId) {\r\n            this._host._capturedPointerIds.add((pi.event as IPointerEvent).pointerId);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean, pi?: Nullable<PointerInfoBase>): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        let canNotifyClick: boolean = notifyClick;\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            canNotifyClick = this.onPointerClickObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this, pi);\r\n        }\r\n        const canNotify: boolean = this.onPointerUpObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this, pi);\r\n\r\n        if (canNotify && this.parent != null && !this.isPointerBlocker) {\r\n            this.parent._onPointerUp(target, coordinates, pointerId, buttonIndex, canNotifyClick, pi);\r\n        }\r\n\r\n        if (pi && this.uniqueId !== this._host.rootContainer.uniqueId) {\r\n            this._host._capturedPointerIds.delete((pi.event as IPointerEvent).pointerId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector2.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (const key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector2.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onWheelScroll(deltaX?: number, deltaY?: number): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n        const canNotify: boolean = this.onWheelObservable.notifyObservers(new Vector2(deltaX, deltaY));\r\n\r\n        if (canNotify && this.parent != null) {\r\n            this.parent._onWheelScroll(deltaX, deltaY);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _onCanvasBlur(): void {}\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _processObservables(\r\n        type: number,\r\n        x: number,\r\n        y: number,\r\n        pi: Nullable<PointerInfoBase>,\r\n        pointerId: number,\r\n        buttonIndex: number,\r\n        deltaX?: number,\r\n        deltaY?: number\r\n    ): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        this._dummyVector2.copyFromFloats(x, y);\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, this._dummyVector2, pointerId, pi);\r\n\r\n            const previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this, pi);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this, pi);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, this._dummyVector2, pointerId, buttonIndex, pi);\r\n            this._host._registerLastControlDown(this, pointerId);\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, this._dummyVector2, pointerId, buttonIndex, true, pi);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERWHEEL) {\r\n            if (this._host._lastControlOver[pointerId]) {\r\n                this._host._lastControlOver[pointerId]._onWheelScroll(deltaX, deltaY);\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _prepareFont() {\r\n        if (!this._font && !this._fontSet) {\r\n            return;\r\n        }\r\n\r\n        if (this._style) {\r\n            this._font = this._style.fontStyle + \" \" + this._style.fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._style.fontFamily;\r\n        } else {\r\n            this._font = this._fontStyle + \" \" + this._fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._fontFamily;\r\n        }\r\n\r\n        this._fontOffset = Control._GetFontOffset(this._font);\r\n\r\n        //children need to be refreshed\r\n        this.getDescendants().forEach((child) => child._markAllAsDirty());\r\n    }\r\n\r\n    /**\r\n     * Clones a control and its descendants\r\n     * @param host the texture where the control will be instantiated. Can be empty, in which case the control will be created on the same texture\r\n     * @returns the cloned control\r\n     */\r\n    public clone(host?: AdvancedDynamicTexture): Control {\r\n        const serialization: any = {};\r\n        this.serialize(serialization);\r\n\r\n        const controlType = Tools.Instantiate(\"BABYLON.GUI.\" + serialization.className);\r\n        const cloned = new controlType();\r\n        cloned.parse(serialization, host);\r\n\r\n        return cloned;\r\n    }\r\n\r\n    /**\r\n     * Parses a serialized object into this control\r\n     * @param serializedObject the object with the serialized properties\r\n     * @param host the texture where the control will be instantiated. Can be empty, in which case the control will be created on the same texture\r\n     * @returns this control\r\n     */\r\n    public parse(serializedObject: any, host?: AdvancedDynamicTexture): Control {\r\n        SerializationHelper.Parse(() => this, serializedObject, null);\r\n\r\n        this.name = serializedObject.name;\r\n\r\n        this._parseFromContent(serializedObject, host ?? this._host);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Serializes the current control\r\n     * @param serializationObject defined the JSON serialized object\r\n     */\r\n    public serialize(serializationObject: any) {\r\n        SerializationHelper.Serialize(this, serializationObject);\r\n        serializationObject.name = this.name;\r\n        serializationObject.className = this.getClassName();\r\n\r\n        if (this._font) {\r\n            serializationObject.fontFamily = this._fontFamily;\r\n            serializationObject.fontSize = this.fontSize;\r\n            serializationObject.fontWeight = this.fontWeight;\r\n            serializationObject.fontStyle = this.fontStyle;\r\n        }\r\n\r\n        if (this._gradient) {\r\n            serializationObject.gradient = {};\r\n            this._gradient.serialize(serializationObject.gradient);\r\n        }\r\n\r\n        // Animations\r\n        SerializationHelper.AppendSerializedAnimations(this, serializationObject);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        if (serializedObject.fontFamily) {\r\n            this.fontFamily = serializedObject.fontFamily;\r\n        }\r\n\r\n        if (serializedObject.fontSize) {\r\n            this.fontSize = serializedObject.fontSize;\r\n        }\r\n\r\n        if (serializedObject.fontWeight) {\r\n            this.fontWeight = serializedObject.fontWeight;\r\n        }\r\n\r\n        if (serializedObject.fontStyle) {\r\n            this.fontStyle = serializedObject.fontStyle;\r\n        }\r\n\r\n        // Gradient\r\n        if (serializedObject.gradient) {\r\n            const className = Tools.Instantiate(\"BABYLON.GUI.\" + serializedObject.gradient.className);\r\n            this._gradient = new className();\r\n            this._gradient?.parse(serializedObject.gradient);\r\n        }\r\n\r\n        // Animations\r\n        if (serializedObject.animations) {\r\n            this.animations = [];\r\n            for (let animationIndex = 0; animationIndex < serializedObject.animations.length; animationIndex++) {\r\n                const parsedAnimation = serializedObject.animations[animationIndex];\r\n                const internalClass = GetClass(\"BABYLON.Animation\");\r\n                if (internalClass) {\r\n                    this.animations.push(internalClass.Parse(parsedAnimation));\r\n                }\r\n            }\r\n\r\n            if (serializedObject.autoAnimate && this._host && this._host.getScene()) {\r\n                this._host\r\n                    .getScene()!\r\n                    .beginAnimation(\r\n                        this,\r\n                        serializedObject.autoAnimateFrom,\r\n                        serializedObject.autoAnimateTo,\r\n                        serializedObject.autoAnimateLoop,\r\n                        serializedObject.autoAnimateSpeed || 1.0\r\n                    );\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        this.onDirtyObservable.clear();\r\n        this.onBeforeDrawObservable.clear();\r\n        this.onAfterDrawObservable.clear();\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n        this.onWheelObservable.clear();\r\n\r\n        if (this._styleObserver && this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        if (this.parent) {\r\n            this.parent.removeControl(this);\r\n            this.parent = null;\r\n        }\r\n\r\n        if (this._host) {\r\n            const index = this._host._linkedControls.indexOf(this);\r\n            if (index > -1) {\r\n                this.linkWithMesh(null);\r\n            }\r\n        }\r\n\r\n        // Callback\r\n        this.onDisposeObservable.notifyObservers(this);\r\n        this.onDisposeObservable.clear();\r\n    }\r\n\r\n    // Statics\r\n    private static _HORIZONTAL_ALIGNMENT_LEFT = 0;\r\n    private static _HORIZONTAL_ALIGNMENT_RIGHT = 1;\r\n    private static _HORIZONTAL_ALIGNMENT_CENTER = 2;\r\n\r\n    private static _VERTICAL_ALIGNMENT_TOP = 0;\r\n    private static _VERTICAL_ALIGNMENT_BOTTOM = 1;\r\n    private static _VERTICAL_ALIGNMENT_CENTER = 2;\r\n\r\n    /** HORIZONTAL_ALIGNMENT_LEFT */\r\n    public static get HORIZONTAL_ALIGNMENT_LEFT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_LEFT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_RIGHT */\r\n    public static get HORIZONTAL_ALIGNMENT_RIGHT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_RIGHT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_CENTER */\r\n    public static get HORIZONTAL_ALIGNMENT_CENTER(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_TOP */\r\n    public static get VERTICAL_ALIGNMENT_TOP(): number {\r\n        return Control._VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_BOTTOM */\r\n    public static get VERTICAL_ALIGNMENT_BOTTOM(): number {\r\n        return Control._VERTICAL_ALIGNMENT_BOTTOM;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_CENTER */\r\n    public static get VERTICAL_ALIGNMENT_CENTER(): number {\r\n        return Control._VERTICAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    private static _FontHeightSizes: { [key: string]: { ascent: number; height: number; descent: number } } = {};\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _GetFontOffset(font: string): { ascent: number; height: number; descent: number } {\r\n        if (Control._FontHeightSizes[font]) {\r\n            return Control._FontHeightSizes[font];\r\n        }\r\n\r\n        const engine = EngineStore.LastCreatedEngine;\r\n        if (!engine) {\r\n            throw new Error(\"Invalid engine. Unable to create a canvas.\");\r\n        }\r\n\r\n        const result = engine.getFontOffset(font);\r\n        Control._FontHeightSizes[font] = result;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a Control from parsed data\r\n     * @param serializedObject defines parsed data\r\n     * @param host defines the hosting AdvancedDynamicTexture\r\n     * @returns a new Control\r\n     */\r\n    public static Parse(serializedObject: any, host: AdvancedDynamicTexture): Control {\r\n        const controlType = Tools.Instantiate(\"BABYLON.GUI.\" + serializedObject.className);\r\n        const control = SerializationHelper.Parse(() => new controlType(), serializedObject, null);\r\n\r\n        control.name = serializedObject.name;\r\n\r\n        control._parseFromContent(serializedObject, host);\r\n\r\n        return control;\r\n    }\r\n\r\n    public static AddHeader: (control: Control, text: string, size: string | number, options: { isHorizontal: boolean; controlFirst: boolean }) => any = () => {};\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected static drawEllipse(x: number, y: number, width: number, height: number, context: ICanvasRenderingContext): void {\r\n        context.translate(x, y);\r\n        context.scale(width, height);\r\n\r\n        context.beginPath();\r\n        context.arc(0, 0, 1, 0, 2 * Math.PI);\r\n        context.closePath();\r\n\r\n        context.scale(1 / width, 1 / height);\r\n        context.translate(-x, -y);\r\n    }\r\n\r\n    /**\r\n     * Returns true if the control is ready to be used\r\n     * @returns\r\n     */\r\n    public isReady(): boolean {\r\n        // Most controls are ready by default, so the default implementation is to return true\r\n        return true;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Control\", Control);\r\n","import type { Nullable } from \"core/types\";\r\nimport { Logger } from \"core/Misc/logger\";\r\n\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport type { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport { DynamicTexture } from \"core/Materials/Textures/dynamicTexture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport type { BaseGradient } from \"./gradient/BaseGradient\";\r\nimport { Tools } from \"core/Misc/tools\";\r\n\r\n/**\r\n * Root class for 2D containers\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#containers\r\n */\r\nexport class Container extends Control {\r\n    /** @internal */\r\n    public _children = new Array<Control>();\r\n    /** @internal */\r\n    protected _measureForChildren = Measure.Empty();\r\n    /** @internal */\r\n    protected _background = \"\";\r\n    /** @internal */\r\n    protected _backgroundGradient: Nullable<BaseGradient> = null;\r\n    /** @internal */\r\n    protected _adaptWidthToChildren = false;\r\n    /** @internal */\r\n    protected _adaptHeightToChildren = false;\r\n    /** @internal */\r\n    protected _renderToIntermediateTexture: boolean = false;\r\n    /** @internal */\r\n    protected _intermediateTexture: Nullable<DynamicTexture> = null;\r\n\r\n    /** Gets or sets boolean indicating if children should be rendered to an intermediate texture rather than directly to host, useful for alpha blending */\r\n    @serialize()\r\n    public get renderToIntermediateTexture(): boolean {\r\n        return this._renderToIntermediateTexture;\r\n    }\r\n    public set renderToIntermediateTexture(value: boolean) {\r\n        if (this._renderToIntermediateTexture === value) {\r\n            return;\r\n        }\r\n        this._renderToIntermediateTexture = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that layout cycle errors should be displayed on the console\r\n     */\r\n    public logLayoutCycleErrors = false;\r\n\r\n    /**\r\n     * Gets or sets the number of layout cycles (a change involved by a control while evaluating the layout) allowed\r\n     */\r\n    @serialize()\r\n    public maxLayoutCycle = 3;\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children height */\r\n    @serialize()\r\n    public get adaptHeightToChildren(): boolean {\r\n        return this._adaptHeightToChildren;\r\n    }\r\n\r\n    public set adaptHeightToChildren(value: boolean) {\r\n        if (this._adaptHeightToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptHeightToChildren = value;\r\n\r\n        if (value) {\r\n            this.height = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children width */\r\n    @serialize()\r\n    public get adaptWidthToChildren(): boolean {\r\n        return this._adaptWidthToChildren;\r\n    }\r\n\r\n    public set adaptWidthToChildren(value: boolean) {\r\n        if (this._adaptWidthToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptWidthToChildren = value;\r\n\r\n        if (value) {\r\n            this.width = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    @serialize()\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background gradient color. Takes precedence over background */\r\n    @serialize()\r\n    public get backgroundGradient() {\r\n        return this._backgroundGradient;\r\n    }\r\n\r\n    public set backgroundGradient(value: Nullable<BaseGradient>) {\r\n        if (this._backgroundGradient === value) {\r\n            return;\r\n        }\r\n        this._backgroundGradient = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._children;\r\n    }\r\n\r\n    public get isReadOnly() {\r\n        return this._isReadOnly;\r\n    }\r\n\r\n    public set isReadOnly(value: boolean) {\r\n        this._isReadOnly = value;\r\n\r\n        for (const child of this._children) {\r\n            child.isReadOnly = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new Container\r\n     * @param name defines the name of the container\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container\";\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (const child of this.children) {\r\n            child._isClipped = false;\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its name\r\n     * @param name defines the child name to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByName(name: string): Nullable<Control> {\r\n        for (const child of this.children) {\r\n            if (child.name === name) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its type and its name\r\n     * @param name defines the child name to look for\r\n     * @param type defines the child type to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByType(name: string, type: string): Nullable<Control> {\r\n        for (const child of this.children) {\r\n            if (child.typeName === type) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Search for a specific control in children\r\n     * @param control defines the control to look for\r\n     * @returns true if the control is in child list\r\n     */\r\n    public containsControl(control: Control): boolean {\r\n        return this.children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        const index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control._link(this._host);\r\n\r\n        control._markAllAsDirty();\r\n\r\n        this._reOrderControl(control);\r\n\r\n        this._markAsDirty();\r\n\r\n        this.onControlAddedObservable.notifyObservers(control);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes all controls from the current container\r\n     * @returns the current container\r\n     */\r\n    public clearControls(): Container {\r\n        const children = this.children.slice();\r\n\r\n        for (const child of children) {\r\n            this.removeControl(child);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        const index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n        }\r\n\r\n        control.linkWithMesh(null);\r\n\r\n        if (this._host) {\r\n            this._host._cleanControlAfterRemoval(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n\r\n        this.onControlRemovedObservable.notifyObservers(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * An event triggered when any control is added to this container.\r\n     */\r\n    public onControlAddedObservable = new Observable<Nullable<Control>>();\r\n\r\n    /**\r\n     * An event triggered when any control is removed from this container.\r\n     */\r\n    public onControlRemovedObservable = new Observable<Nullable<Control>>();\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _reOrderControl(control: Control): void {\r\n        const linkedMesh = control.linkedMesh;\r\n\r\n        this.removeControl(control);\r\n\r\n        let wasAdded = false;\r\n        for (let index = 0; index < this._children.length; index++) {\r\n            if (this._children[index].zIndex > control.zIndex) {\r\n                this._children.splice(index, 0, control);\r\n                wasAdded = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (!wasAdded) {\r\n            this._children.push(control);\r\n        }\r\n\r\n        control.parent = this;\r\n\r\n        if (linkedMesh) {\r\n            control.linkWithMesh(linkedMesh);\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _offsetLeft(offset: number) {\r\n        super._offsetLeft(offset);\r\n\r\n        for (const child of this._children) {\r\n            child._offsetLeft(offset);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _offsetTop(offset: number) {\r\n        super._offsetTop(offset);\r\n\r\n        for (const child of this._children) {\r\n            child._offsetTop(offset);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _markAllAsDirty(): void {\r\n        super._markAllAsDirty();\r\n\r\n        for (let index = 0; index < this._children.length; index++) {\r\n            this._children[index]._markAllAsDirty();\r\n        }\r\n    }\r\n\r\n    protected _getBackgroundColor(context: ICanvasRenderingContext) {\r\n        return this._backgroundGradient ? this._backgroundGradient.getCanvasGradient(context) : this._background;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _localDraw(context: ICanvasRenderingContext): void {\r\n        if (this._background || this._backgroundGradient) {\r\n            context.save();\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._getBackgroundColor(context);\r\n\r\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            context.restore();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _link(host: AdvancedDynamicTexture): void {\r\n        super._link(host);\r\n\r\n        for (const child of this._children) {\r\n            child._link(host);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    protected _beforeLayout() {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _processMeasures(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\r\n            super._processMeasures(parentMeasure, context);\r\n            this._evaluateClippingState(parentMeasure);\r\n            if (this._renderToIntermediateTexture) {\r\n                if (this._intermediateTexture && this._host.getScene() != this._intermediateTexture.getScene()) {\r\n                    this._intermediateTexture.dispose();\r\n                    this._intermediateTexture = null;\r\n                }\r\n                if (!this._intermediateTexture) {\r\n                    this._intermediateTexture = new DynamicTexture(\r\n                        \"\",\r\n                        { width: this._currentMeasure.width, height: this._currentMeasure.height },\r\n                        this._host.getScene(),\r\n                        false,\r\n                        Texture.NEAREST_SAMPLINGMODE,\r\n                        Constants.TEXTUREFORMAT_RGBA,\r\n                        false\r\n                    );\r\n                    this._intermediateTexture.hasAlpha = true;\r\n                } else {\r\n                    this._intermediateTexture.scaleTo(this._currentMeasure.width, this._currentMeasure.height);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _layout(parentMeasure: Measure, context: ICanvasRenderingContext): boolean {\r\n        if (!this.isDirty && (!this.isVisible || this.notRenderable)) {\r\n            return false;\r\n        }\r\n\r\n        this.host._numLayoutCalls++;\r\n\r\n        if (this._isDirty) {\r\n            this._currentMeasure.transformToRef(this._transformMatrix, this._prevCurrentMeasureTransformedIntoGlobalSpace);\r\n        }\r\n\r\n        let rebuildCount = 0;\r\n\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        this._beforeLayout();\r\n\r\n        do {\r\n            let computedWidth = -1;\r\n            let computedHeight = -1;\r\n            this._rebuildLayout = false;\r\n            this._processMeasures(parentMeasure, context);\r\n\r\n            if (!this._isClipped) {\r\n                for (const child of this._children) {\r\n                    child._tempParentMeasure.copyFrom(this._measureForChildren);\r\n\r\n                    if (child._layout(this._measureForChildren, context)) {\r\n                        if (child.isVisible && !child.notRenderable) {\r\n                            if (this.adaptWidthToChildren && child._width.isPixel) {\r\n                                computedWidth = Math.max(computedWidth, child._currentMeasure.width + child._paddingLeftInPixels + child._paddingRightInPixels);\r\n                            }\r\n                            if (this.adaptHeightToChildren && child._height.isPixel) {\r\n                                computedHeight = Math.max(computedHeight, child._currentMeasure.height + child._paddingTopInPixels + child._paddingBottomInPixels);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (this.adaptWidthToChildren && computedWidth >= 0) {\r\n                    computedWidth += this.paddingLeftInPixels + this.paddingRightInPixels;\r\n                    if (this.width !== computedWidth + \"px\") {\r\n                        this.parent?._markAsDirty();\r\n                        this.width = computedWidth + \"px\";\r\n                        this._width.ignoreAdaptiveScaling = true;\r\n                        this._rebuildLayout = true;\r\n                    }\r\n                }\r\n                if (this.adaptHeightToChildren && computedHeight >= 0) {\r\n                    computedHeight += this.paddingTopInPixels + this.paddingBottomInPixels;\r\n                    if (this.height !== computedHeight + \"px\") {\r\n                        this.parent?._markAsDirty();\r\n                        this.height = computedHeight + \"px\";\r\n                        this._height.ignoreAdaptiveScaling = true;\r\n                        this._rebuildLayout = true;\r\n                    }\r\n                }\r\n\r\n                this._postMeasure();\r\n            }\r\n            rebuildCount++;\r\n        } while (this._rebuildLayout && rebuildCount < this.maxLayoutCycle);\r\n\r\n        if (rebuildCount >= 3 && this.logLayoutCycleErrors) {\r\n            Logger.Error(`Layout cycle detected in GUI (Container name=${this.name}, uniqueId=${this.uniqueId})`);\r\n        }\r\n\r\n        context.restore();\r\n\r\n        if (this._isDirty) {\r\n            this.invalidateRect();\r\n\r\n            this._isDirty = false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    protected _postMeasure() {\r\n        // Do nothing by default\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _draw(context: ICanvasRenderingContext, invalidatedRectangle?: Measure): void {\r\n        const renderToIntermediateTextureThisDraw = this._renderToIntermediateTexture && this._intermediateTexture;\r\n        const contextToDrawTo = renderToIntermediateTextureThisDraw ? (<DynamicTexture>this._intermediateTexture).getContext() : context;\r\n\r\n        if (renderToIntermediateTextureThisDraw) {\r\n            contextToDrawTo.save();\r\n            contextToDrawTo.translate(-this._currentMeasure.left, -this._currentMeasure.top);\r\n            if (invalidatedRectangle) {\r\n                contextToDrawTo.clearRect(invalidatedRectangle.left, invalidatedRectangle.top, invalidatedRectangle.width, invalidatedRectangle.height);\r\n            } else {\r\n                contextToDrawTo.clearRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        }\r\n\r\n        this._localDraw(contextToDrawTo);\r\n\r\n        context.save();\r\n\r\n        if (this.clipChildren) {\r\n            this._clipForChildren(contextToDrawTo);\r\n        }\r\n\r\n        for (const child of this._children) {\r\n            // Only redraw parts of the screen that are invalidated\r\n            if (invalidatedRectangle) {\r\n                if (!child._intersectsRect(invalidatedRectangle)) {\r\n                    continue;\r\n                }\r\n            }\r\n            child._render(contextToDrawTo, invalidatedRectangle);\r\n        }\r\n\r\n        if (renderToIntermediateTextureThisDraw) {\r\n            contextToDrawTo.restore();\r\n            context.save();\r\n            context.globalAlpha = this.alpha;\r\n            context.drawImage(contextToDrawTo.canvas, this._currentMeasure.left, this._currentMeasure.top);\r\n            context.restore();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public getDescendantsToRef(results: Control[], directDescendantsOnly: boolean = false, predicate?: (control: Control) => boolean): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (let index = 0; index < this.children.length; index++) {\r\n            const item = this.children[index];\r\n\r\n            if (!predicate || predicate(item)) {\r\n                results.push(item);\r\n            }\r\n\r\n            if (!directDescendantsOnly) {\r\n                item.getDescendantsToRef(results, false, predicate);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _processPicking(x: number, y: number, pi: Nullable<PointerInfoBase>, type: number, pointerId: number, buttonIndex: number, deltaX?: number, deltaY?: number): boolean {\r\n        if (!this._isEnabled || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        // checks if the picking position is within the container\r\n        const contains = super.contains(x, y);\r\n\r\n        // if clipChildren is off, we should still pass picking events to children even if we don't contain the pointer\r\n        if (!contains && this.clipChildren) {\r\n            return false;\r\n        }\r\n\r\n        // Checking backwards to pick closest first\r\n        for (let index = this._children.length - 1; index >= 0; index--) {\r\n            const child = this._children[index];\r\n            if (child._processPicking(x, y, pi, type, pointerId, buttonIndex, deltaX, deltaY)) {\r\n                if (child.hoverCursor) {\r\n                    this._host._changeCursor(child.hoverCursor);\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!contains) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isHitTestVisible) {\r\n            return false;\r\n        }\r\n\r\n        return this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(this._currentMeasure);\r\n    }\r\n\r\n    /**\r\n     * Serializes the current control\r\n     * @param serializationObject defined the JSON serialized object\r\n     */\r\n    public serialize(serializationObject: any) {\r\n        super.serialize(serializationObject);\r\n\r\n        if (this.backgroundGradient) {\r\n            serializationObject.backgroundGradient = {};\r\n            this.backgroundGradient.serialize(serializationObject.backgroundGradient);\r\n        }\r\n\r\n        if (!this.children.length) {\r\n            return;\r\n        }\r\n\r\n        serializationObject.children = [];\r\n\r\n        for (const child of this.children) {\r\n            const childSerializationObject = {};\r\n            child.serialize(childSerializationObject);\r\n            serializationObject.children.push(childSerializationObject);\r\n        }\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (let index = this.children.length - 1; index >= 0; index--) {\r\n            this.children[index].dispose();\r\n        }\r\n        this._intermediateTexture?.dispose();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        super._parseFromContent(serializedObject, host);\r\n        this._link(host);\r\n\r\n        // Gradient\r\n        if (serializedObject.backgroundGradient) {\r\n            const className = Tools.Instantiate(\"BABYLON.GUI.\" + serializedObject.backgroundGradient.className);\r\n            this._backgroundGradient = new className();\r\n            this._backgroundGradient?.parse(serializedObject.backgroundGradient);\r\n        }\r\n\r\n        if (!serializedObject.children) {\r\n            return;\r\n        }\r\n\r\n        for (const childData of serializedObject.children) {\r\n            this.addControl(Control.Parse(childData, host));\r\n        }\r\n    }\r\n\r\n    public isReady(): boolean {\r\n        for (const child of this.children) {\r\n            if (!child.isReady()) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Container\", Container);\r\n","import { Container } from \"./container\";\r\nimport type { Measure } from \"../measure\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/** Class used to create rectangle container */\r\nexport class Rectangle extends Container {\r\n    private _thickness = 1;\r\n    private _cornerRadius = 0;\r\n\r\n    /** Gets or sets border thickness */\r\n    @serialize()\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the corner radius angle */\r\n    @serialize()\r\n    public get cornerRadius(): number {\r\n        return this._cornerRadius;\r\n    }\r\n\r\n    public set cornerRadius(value: number) {\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (this._cornerRadius === value) {\r\n            return;\r\n        }\r\n\r\n        this._cornerRadius = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Rectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Rectangle\";\r\n    }\r\n\r\n    /** @internal */\r\n    protected _computeAdditionnalOffsetX() {\r\n        if (this._cornerRadius) {\r\n            // Take in account the aliasing\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /** @internal */\r\n    protected _computeAdditionnalOffsetY() {\r\n        if (this._cornerRadius) {\r\n            // Take in account the aliasing\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    protected _getRectangleFill(context: ICanvasRenderingContext) {\r\n        return this._getBackgroundColor(context);\r\n    }\r\n\r\n    protected _localDraw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this._background || this._backgroundGradient) {\r\n            context.fillStyle = this._getRectangleFill(context);\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.fill();\r\n            } else {\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        }\r\n\r\n        if (this._thickness) {\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this.color || this.gradient) {\r\n                context.strokeStyle = this.gradient ? this.gradient.getCanvasGradient(context) : this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.stroke();\r\n            } else {\r\n                context.strokeRect(\r\n                    this._currentMeasure.left + this._thickness / 2,\r\n                    this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness,\r\n                    this._currentMeasure.height - this._thickness\r\n                );\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    private _drawRoundedRect(context: ICanvasRenderingContext, offset: number = 0): void {\r\n        const x = this._currentMeasure.left + offset;\r\n        const y = this._currentMeasure.top + offset;\r\n        const width = this._currentMeasure.width - offset * 2;\r\n        const height = this._currentMeasure.height - offset * 2;\r\n\r\n        let radius = Math.min(height / 2, Math.min(width / 2, this._cornerRadius));\r\n        radius = Math.abs(radius);\r\n\r\n        context.beginPath();\r\n        context.moveTo(x + radius, y);\r\n        context.lineTo(x + width - radius, y);\r\n        context.arc(x + width - radius, y + radius, radius, (3 * Math.PI) / 2, Math.PI * 2);\r\n        context.lineTo(x + width, y + height - radius);\r\n        context.arc(x + width - radius, y + height - radius, radius, 0, Math.PI / 2);\r\n        context.lineTo(x + radius, y + height);\r\n        context.arc(x + radius, y + height - radius, radius, Math.PI / 2, Math.PI);\r\n        context.lineTo(x, y + radius);\r\n        context.arc(x + radius, y + radius, radius, Math.PI, (3 * Math.PI) / 2);\r\n        context.closePath();\r\n    }\r\n\r\n    protected _clipForChildren(context: ICanvasRenderingContext) {\r\n        if (this._cornerRadius) {\r\n            this._drawRoundedRect(context, this._thickness);\r\n            context.clip();\r\n        }\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Rectangle\", Rectangle);\r\n","import { Observable } from \"core/Misc/observable\";\r\nimport type { Measure } from \"../measure\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext, ITextMetrics } from \"core/Engines/ICanvas\";\r\nimport { EngineStore } from \"core/Engines/engineStore\";\r\n\r\n/**\r\n * Enum that determines the text-wrapping mode to use.\r\n */\r\nexport enum TextWrapping {\r\n    /**\r\n     * Clip the text when it's larger than Control.width; this is the default mode.\r\n     */\r\n    Clip = 0,\r\n\r\n    /**\r\n     * Wrap the text word-wise, i.e. try to add line-breaks at word boundary to fit within Control.width.\r\n     */\r\n    WordWrap = 1,\r\n\r\n    /**\r\n     * Ellipsize the text, i.e. shrink with trailing … when text is larger than Control.width.\r\n     */\r\n    Ellipsis = 2,\r\n\r\n    /**\r\n     * Wrap the text word-wise and clip the text when the text's height is larger than the Control.height, and shrink the last line with trailing … .\r\n     */\r\n    WordWrapEllipsis,\r\n}\r\n\r\n/**\r\n * Class used to create text block control\r\n */\r\nexport class TextBlock extends Control {\r\n    private _text = \"\";\r\n    private _textWrapping = TextWrapping.Clip;\r\n    private _textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    private _textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n\r\n    private _lines: any[];\r\n    private _resizeToFit: boolean = false;\r\n    private _lineSpacing: ValueAndUnit = new ValueAndUnit(0);\r\n    private _outlineWidth: number = 0;\r\n    private _outlineColor: string = \"white\";\r\n    private _underline: boolean = false;\r\n    private _lineThrough: boolean = false;\r\n    private _wordDivider: string = \" \";\r\n    private _forceResizeWidth: boolean = false;\r\n    /**\r\n     * An event triggered after the text is changed\r\n     */\r\n    public onTextChangedObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n     * An event triggered after the text was broken up into lines\r\n     */\r\n    public onLinesReadyObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n     * Function used to split a string into words. By default, a string is split at each space character found\r\n     */\r\n    public wordSplittingFunction: Nullable<(line: string) => string[]>;\r\n\r\n    /**\r\n     * Return the line list (you may need to use the onLinesReadyObservable to make sure the list is ready)\r\n     */\r\n    public get lines(): any[] {\r\n        return this._lines;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    @serialize()\r\n    public get resizeToFit(): boolean {\r\n        return this._resizeToFit;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public set resizeToFit(value: boolean) {\r\n        if (this._resizeToFit === value) {\r\n            return;\r\n        }\r\n        this._resizeToFit = value;\r\n\r\n        if (this._resizeToFit) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    @serialize()\r\n    public get textWrapping(): TextWrapping | boolean {\r\n        return this._textWrapping;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public set textWrapping(value: TextWrapping | boolean) {\r\n        if (this._textWrapping === value) {\r\n            return;\r\n        }\r\n        this._textWrapping = +value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    @serialize()\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n        this._text = value + \"\"; // Making sure it is a text\r\n        this._markAsDirty();\r\n\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    @serialize()\r\n    public get textHorizontalAlignment(): number {\r\n        return this._textHorizontalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textHorizontalAlignment(value: number) {\r\n        if (this._textHorizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textHorizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    @serialize()\r\n    public get textVerticalAlignment(): number {\r\n        return this._textVerticalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textVerticalAlignment(value: number) {\r\n        if (this._textVerticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textVerticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    @serialize()\r\n    public set lineSpacing(value: string | number) {\r\n        if (this._lineSpacing.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public get lineSpacing(): string | number {\r\n        return this._lineSpacing.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    @serialize()\r\n    public get outlineWidth(): number {\r\n        return this._outlineWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public set outlineWidth(value: number) {\r\n        if (this._outlineWidth === value) {\r\n            return;\r\n        }\r\n        this._outlineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that text must have underline\r\n     */\r\n    @serialize()\r\n    public get underline(): boolean {\r\n        return this._underline;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that text must have underline\r\n     */\r\n    public set underline(value: boolean) {\r\n        if (this._underline === value) {\r\n            return;\r\n        }\r\n        this._underline = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that text must be crossed out\r\n     */\r\n    @serialize()\r\n    public get lineThrough(): boolean {\r\n        return this._lineThrough;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that text must be crossed out\r\n     */\r\n    public set lineThrough(value: boolean) {\r\n        if (this._lineThrough === value) {\r\n            return;\r\n        }\r\n        this._lineThrough = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    @serialize()\r\n    public get outlineColor(): string {\r\n        return this._outlineColor;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public set outlineColor(value: string) {\r\n        if (this._outlineColor === value) {\r\n            return;\r\n        }\r\n        this._outlineColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets word divider\r\n     */\r\n    @serialize()\r\n    public get wordDivider(): string {\r\n        return this._wordDivider;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets word divider\r\n     */\r\n    public set wordDivider(value: string) {\r\n        if (this._wordDivider === value) {\r\n            return;\r\n        }\r\n        this._wordDivider = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * By default, if a text block has text wrapping other than Clip, its width\r\n     * is not resized even if resizeToFit = true. This parameter forces the width\r\n     * to be resized.\r\n     */\r\n    @serialize()\r\n    public get forceResizeWidth(): boolean {\r\n        return this._forceResizeWidth;\r\n    }\r\n\r\n    public set forceResizeWidth(value: boolean) {\r\n        if (this._forceResizeWidth === value) {\r\n            return;\r\n        }\r\n        this._forceResizeWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new TextBlock object\r\n     * @param name defines the name of the control\r\n     * @param text defines the text to display (empty string by default)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the name of the control\r\n         */\r\n        public name?: string,\r\n        text: string = \"\"\r\n    ) {\r\n        super(name);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TextBlock\";\r\n    }\r\n\r\n    protected _processMeasures(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        if (!this._fontOffset || this.isDirty) {\r\n            this._fontOffset = Control._GetFontOffset(context.font);\r\n        }\r\n        super._processMeasures(parentMeasure, context);\r\n\r\n        // Prepare lines\r\n        this._lines = this._breakLines(this._currentMeasure.width, this._currentMeasure.height, context);\r\n        this.onLinesReadyObservable.notifyObservers(this);\r\n\r\n        let maxLineWidth: number = 0;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (line.width > maxLineWidth) {\r\n                maxLineWidth = line.width;\r\n            }\r\n        }\r\n\r\n        if (this._resizeToFit) {\r\n            if (this._textWrapping === TextWrapping.Clip || this._forceResizeWidth) {\r\n                const newWidth = Math.ceil(this._paddingLeftInPixels) + Math.ceil(this._paddingRightInPixels) + Math.ceil(maxLineWidth);\r\n                if (newWidth !== this._width.getValueInPixel(this._host, this._tempParentMeasure.width)) {\r\n                    this._width.updateInPlace(newWidth, ValueAndUnit.UNITMODE_PIXEL);\r\n                    this._rebuildLayout = true;\r\n                }\r\n            }\r\n            let newHeight = (this._paddingTopInPixels + this._paddingBottomInPixels + this._fontOffset.height * this._lines.length) | 0;\r\n\r\n            if (this._lines.length > 0 && this._lineSpacing.internalValue !== 0) {\r\n                let lineSpacing = 0;\r\n                if (this._lineSpacing.isPixel) {\r\n                    lineSpacing = this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    lineSpacing = this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n                }\r\n\r\n                newHeight += (this._lines.length - 1) * lineSpacing;\r\n            }\r\n\r\n            if (newHeight !== this._height.internalValue) {\r\n                this._height.updateInPlace(newHeight, ValueAndUnit.UNITMODE_PIXEL);\r\n                this._rebuildLayout = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _drawText(text: string, textWidth: number, y: number, context: ICanvasRenderingContext): void {\r\n        const width = this._currentMeasure.width;\r\n        let x = 0;\r\n        switch (this._textHorizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = width - textWidth;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (width - textWidth) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this.outlineWidth) {\r\n            context.strokeText(text, this._currentMeasure.left + x, y);\r\n        }\r\n        context.fillText(text, this._currentMeasure.left + x, y);\r\n\r\n        if (this._underline) {\r\n            context.beginPath();\r\n            context.lineWidth = Math.round(this.fontSizeInPixels * 0.05);\r\n            context.moveTo(this._currentMeasure.left + x, y + 3);\r\n            context.lineTo(this._currentMeasure.left + x + textWidth, y + 3);\r\n            context.stroke();\r\n            context.closePath();\r\n        }\r\n\r\n        if (this._lineThrough) {\r\n            context.beginPath();\r\n            context.lineWidth = Math.round(this.fontSizeInPixels * 0.05);\r\n            context.moveTo(this._currentMeasure.left + x, y - this.fontSizeInPixels / 3);\r\n            context.lineTo(this._currentMeasure.left + x + textWidth, y - this.fontSizeInPixels / 3);\r\n            context.stroke();\r\n            context.closePath();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        // Render lines\r\n        this._renderLines(context);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _applyStates(context: ICanvasRenderingContext): void {\r\n        super._applyStates(context);\r\n        if (this.outlineWidth) {\r\n            context.lineWidth = this.outlineWidth;\r\n            context.strokeStyle = this.outlineColor;\r\n            context.lineJoin = \"miter\";\r\n            context.miterLimit = 2;\r\n        }\r\n    }\r\n\r\n    private _linesTemp: object[] = [];\r\n\r\n    protected _breakLines(refWidth: number, refHeight: number, context: ICanvasRenderingContext): object[] {\r\n        this._linesTemp.length = 0;\r\n        const _lines = this.text.split(\"\\n\");\r\n\r\n        if (this._textWrapping === TextWrapping.Ellipsis) {\r\n            for (const _line of _lines) {\r\n                this._linesTemp.push(this._parseLineEllipsis(_line, refWidth, context));\r\n            }\r\n        } else if (this._textWrapping === TextWrapping.WordWrap) {\r\n            for (const _line of _lines) {\r\n                this._linesTemp.push(...this._parseLineWordWrap(_line, refWidth, context));\r\n            }\r\n        } else if (this._textWrapping === TextWrapping.WordWrapEllipsis) {\r\n            for (const _line of _lines) {\r\n                this._linesTemp.push(...this._parseLineWordWrapEllipsis(_line, refWidth, refHeight!, context));\r\n            }\r\n        } else {\r\n            for (const _line of _lines) {\r\n                this._linesTemp.push(this._parseLine(_line, context));\r\n            }\r\n        }\r\n\r\n        return this._linesTemp;\r\n    }\r\n\r\n    protected _parseLine(line: string = \"\", context: ICanvasRenderingContext): object {\r\n        return { text: line, width: this._getTextMetricsWidth(context.measureText(line)) };\r\n    }\r\n\r\n    //Calculate how many characters approximately we need to remove\r\n    private _getCharsToRemove(lineWidth: number, width: number, lineLength: number) {\r\n        const diff = lineWidth > width ? lineWidth - width : 0;\r\n        // This isn't exact unless the font is monospaced\r\n        const charWidth = lineWidth / lineLength;\r\n        const removeChars = Math.max(Math.floor(diff / charWidth), 1);\r\n        return removeChars;\r\n    }\r\n\r\n    protected _parseLineEllipsis(line: string = \"\", width: number, context: ICanvasRenderingContext): object {\r\n        let lineWidth = this._getTextMetricsWidth(context.measureText(line));\r\n\r\n        let removeChars = this._getCharsToRemove(lineWidth, width, line.length);\r\n\r\n        // unicode support. split('') does not work with unicode!\r\n        // make sure Array.from is available\r\n        const characters = Array.from && Array.from(line);\r\n        if (!characters) {\r\n            // no array.from, use the old method\r\n            while (line.length > 2 && lineWidth > width) {\r\n                line = line.slice(0, -removeChars);\r\n                lineWidth = this._getTextMetricsWidth(context.measureText(line + \"…\"));\r\n\r\n                removeChars = this._getCharsToRemove(lineWidth, width, line.length);\r\n            }\r\n            // Add on the end\r\n            line += \"…\";\r\n        } else {\r\n            while (characters.length && lineWidth > width) {\r\n                characters.splice(characters.length - removeChars, removeChars);\r\n                line = `${characters.join(\"\")}…`;\r\n                lineWidth = this._getTextMetricsWidth(context.measureText(line));\r\n\r\n                removeChars = this._getCharsToRemove(lineWidth, width, line.length);\r\n            }\r\n        }\r\n\r\n        return { text: line, width: lineWidth };\r\n    }\r\n\r\n    private _getTextMetricsWidth(textMetrics: ITextMetrics) {\r\n        if (textMetrics.actualBoundingBoxLeft !== undefined) {\r\n            return Math.abs(textMetrics.actualBoundingBoxLeft) + Math.abs(textMetrics.actualBoundingBoxRight);\r\n        }\r\n        return textMetrics.width;\r\n    }\r\n\r\n    protected _parseLineWordWrap(line: string = \"\", width: number, context: ICanvasRenderingContext): object[] {\r\n        const lines = [];\r\n        const words = this.wordSplittingFunction ? this.wordSplittingFunction(line) : line.split(this._wordDivider);\r\n        let lineWidth = this._getTextMetricsWidth(context.measureText(line));\r\n\r\n        for (let n = 0; n < words.length; n++) {\r\n            const testLine = n > 0 ? line + this._wordDivider + words[n] : words[0];\r\n            const testWidth = this._getTextMetricsWidth(context.measureText(testLine));\r\n            if (testWidth > width && n > 0) {\r\n                lines.push({ text: line, width: lineWidth });\r\n                line = words[n];\r\n                lineWidth = this._getTextMetricsWidth(context.measureText(line));\r\n            } else {\r\n                lineWidth = testWidth;\r\n                line = testLine;\r\n            }\r\n        }\r\n        lines.push({ text: line, width: lineWidth });\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _parseLineWordWrapEllipsis(line: string = \"\", width: number, height: number, context: ICanvasRenderingContext): object[] {\r\n        const lines = this._parseLineWordWrap(line, width, context);\r\n        for (let n = 1; n <= lines.length; n++) {\r\n            const currentHeight = this._computeHeightForLinesOf(n);\r\n            if (currentHeight > height && n > 1) {\r\n                const lastLine = lines[n - 2] as { text: string; width: number };\r\n                const currentLine = lines[n - 1] as { text: string; width: number };\r\n                lines[n - 2] = this._parseLineEllipsis(`${lastLine.text + currentLine.text}`, width, context);\r\n                const linesToRemove = lines.length - n + 1;\r\n                for (let i = 0; i < linesToRemove; i++) {\r\n                    lines.pop();\r\n                }\r\n                return lines;\r\n            }\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _renderLines(context: ICanvasRenderingContext): void {\r\n        if (!this._fontOffset || !this._lines) {\r\n            return;\r\n        }\r\n        const height = this._currentMeasure.height;\r\n        let rootY = 0;\r\n        switch (this._textVerticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                rootY = this._fontOffset.ascent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;\r\n                break;\r\n        }\r\n\r\n        rootY += this._currentMeasure.top;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (i !== 0 && this._lineSpacing.internalValue !== 0) {\r\n                if (this._lineSpacing.isPixel) {\r\n                    rootY += this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    rootY = rootY + this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n                }\r\n            }\r\n\r\n            this._drawText(line.text, line.width, rootY, context);\r\n            rootY += this._fontOffset.height;\r\n        }\r\n    }\r\n\r\n    private _computeHeightForLinesOf(lineCount: number): number {\r\n        let newHeight = this._paddingTopInPixels + this._paddingBottomInPixels + this._fontOffset.height * lineCount;\r\n\r\n        if (lineCount > 0 && this._lineSpacing.internalValue !== 0) {\r\n            let lineSpacing = 0;\r\n            if (this._lineSpacing.isPixel) {\r\n                lineSpacing = this._lineSpacing.getValue(this._host);\r\n            } else {\r\n                lineSpacing = this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n            }\r\n\r\n            newHeight += (lineCount - 1) * lineSpacing;\r\n        }\r\n\r\n        return newHeight;\r\n    }\r\n\r\n    /**\r\n     * Given a width constraint applied on the text block, find the expected height\r\n     * @returns expected height\r\n     */\r\n    public computeExpectedHeight(): number {\r\n        if (this.text && this.widthInPixels) {\r\n            // Should abstract platform instead of using LastCreatedEngine\r\n            const context = EngineStore.LastCreatedEngine?.createCanvas(0, 0).getContext(\"2d\");\r\n            if (context) {\r\n                this._applyStates(context);\r\n                if (!this._fontOffset) {\r\n                    this._fontOffset = Control._GetFontOffset(context.font);\r\n                }\r\n                const lines = this._lines\r\n                    ? this._lines\r\n                    : this._breakLines(\r\n                          this.widthInPixels - this._paddingLeftInPixels - this._paddingRightInPixels,\r\n                          this.heightInPixels - this._paddingTopInPixels - this._paddingBottomInPixels,\r\n                          context\r\n                      );\r\n                return this._computeHeightForLinesOf(lines.length);\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    dispose(): void {\r\n        super.dispose();\r\n\r\n        this.onTextChangedObservable.clear();\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.TextBlock\", TextBlock);\r\n","import type { Nullable } from \"core/types\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport { Tools } from \"core/Misc/tools\";\r\n\r\nimport { Control } from \"./control\";\r\nimport type { Measure } from \"../measure\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvas, ICanvasRenderingContext, IImage } from \"core/Engines/ICanvas\";\r\nimport { EngineStore } from \"core/Engines/engineStore\";\r\n\r\n/**\r\n * Class used to create 2D images\r\n */\r\nexport class Image extends Control {\r\n    /**\r\n     *  Specifies an alternate text for the image, if the image for some reason cannot be displayed.\r\n     */\r\n    public alt?: string;\r\n\r\n    private _workingCanvas: Nullable<ICanvas> = null;\r\n\r\n    private _domImage: IImage;\r\n    private _imageWidth: number;\r\n    private _imageHeight: number;\r\n    private _loaded = false;\r\n    private _stretch = Image.STRETCH_FILL;\r\n    private _source: Nullable<string>;\r\n    private _autoScale = false;\r\n\r\n    private _sourceLeft = 0;\r\n    private _sourceTop = 0;\r\n    private _sourceWidth = 0;\r\n    private _sourceHeight = 0;\r\n    private _svgAttributesComputationCompleted: boolean = false;\r\n    private _isSVG: boolean = false;\r\n\r\n    private _cellWidth: number = 0;\r\n    private _cellHeight: number = 0;\r\n    private _cellId: number = -1;\r\n\r\n    private _sliceLeft: number;\r\n    private _sliceRight: number;\r\n    private _sliceTop: number;\r\n    private _sliceBottom: number;\r\n\r\n    private _populateNinePatchSlicesFromImage = false;\r\n\r\n    private _detectPointerOnOpaqueOnly: boolean;\r\n\r\n    private _imageDataCache: {\r\n        data: Uint8ClampedArray | null;\r\n        key: string;\r\n    } = { data: null, key: \"\" };\r\n\r\n    /**\r\n     * Cache of images to avoid loading the same image multiple times\r\n     */\r\n    public static SourceImgCache = new Map<string, { img: IImage; timesUsed: number; loaded: boolean; waitingForLoadCallback: Array<() => void> }>();\r\n\r\n    /**\r\n     * Observable notified when the content is loaded\r\n     */\r\n    public onImageLoadedObservable = new Observable<Image>();\r\n\r\n    /**\r\n     * Observable notified when _sourceLeft, _sourceTop, _sourceWidth and _sourceHeight are computed\r\n     */\r\n    public onSVGAttributesComputedObservable = new Observable<Image>();\r\n\r\n    /**\r\n     * Gets or sets the referrer policy to apply on the img element load request.\r\n     * You should set referrerPolicy before set the source of the image if you want to ensure the header will be present on the xhr loading request\r\n     */\r\n    public referrerPolicy: Nullable<ReferrerPolicy>;\r\n\r\n    /**\r\n     * Gets a boolean indicating that the content is loaded\r\n     */\r\n    public get isLoaded(): boolean {\r\n        return this._loaded;\r\n    }\r\n\r\n    public isReady(): boolean {\r\n        return this.isLoaded;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if pointers should only be validated on pixels with alpha > 0.\r\n     * Beware using this as this will consume more memory as the image has to be stored twice\r\n     */\r\n    @serialize()\r\n    public get detectPointerOnOpaqueOnly(): boolean {\r\n        return this._detectPointerOnOpaqueOnly;\r\n    }\r\n\r\n    public set detectPointerOnOpaqueOnly(value: boolean) {\r\n        if (this._detectPointerOnOpaqueOnly === value) {\r\n            return;\r\n        }\r\n\r\n        this._detectPointerOnOpaqueOnly = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the left value for slicing (9-patch)\r\n     */\r\n    @serialize()\r\n    public get sliceLeft(): number {\r\n        return this._sliceLeft;\r\n    }\r\n\r\n    public set sliceLeft(value: number) {\r\n        if (this._sliceLeft === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceLeft = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the right value for slicing (9-patch)\r\n     */\r\n    @serialize()\r\n    public get sliceRight(): number {\r\n        return this._sliceRight;\r\n    }\r\n\r\n    public set sliceRight(value: number) {\r\n        if (this._sliceRight === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceRight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the top value for slicing (9-patch)\r\n     */\r\n    @serialize()\r\n    public get sliceTop(): number {\r\n        return this._sliceTop;\r\n    }\r\n\r\n    public set sliceTop(value: number) {\r\n        if (this._sliceTop === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceTop = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the bottom value for slicing (9-patch)\r\n     */\r\n    @serialize()\r\n    public get sliceBottom(): number {\r\n        return this._sliceBottom;\r\n    }\r\n\r\n    public set sliceBottom(value: number) {\r\n        if (this._sliceBottom === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceBottom = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the left coordinate in the source image\r\n     */\r\n    @serialize()\r\n    public get sourceLeft(): number {\r\n        return this._sourceLeft;\r\n    }\r\n\r\n    public set sourceLeft(value: number) {\r\n        if (this._sourceLeft === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceLeft = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the top coordinate in the source image\r\n     */\r\n    @serialize()\r\n    public get sourceTop(): number {\r\n        return this._sourceTop;\r\n    }\r\n\r\n    public set sourceTop(value: number) {\r\n        if (this._sourceTop === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceTop = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the width to capture in the source image\r\n     */\r\n    @serialize()\r\n    public get sourceWidth(): number {\r\n        return this._sourceWidth;\r\n    }\r\n\r\n    public set sourceWidth(value: number) {\r\n        if (this._sourceWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height to capture in the source image\r\n     */\r\n    @serialize()\r\n    public get sourceHeight(): number {\r\n        return this._sourceHeight;\r\n    }\r\n\r\n    public set sourceHeight(value: number) {\r\n        if (this._sourceHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets the image width\r\n     */\r\n    public get imageWidth(): number {\r\n        return this._imageWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets the image height\r\n     */\r\n    public get imageHeight(): number {\r\n        return this._imageHeight;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if nine patch slices (left, top, right, bottom) should be read from image data\r\n     */\r\n    @serialize()\r\n    public get populateNinePatchSlicesFromImage(): boolean {\r\n        return this._populateNinePatchSlicesFromImage;\r\n    }\r\n\r\n    public set populateNinePatchSlicesFromImage(value: boolean) {\r\n        if (this._populateNinePatchSlicesFromImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._populateNinePatchSlicesFromImage = value;\r\n\r\n        if (this._populateNinePatchSlicesFromImage && this._loaded) {\r\n            this._extractNinePatchSliceDataFromImage();\r\n        }\r\n    }\r\n\r\n    /** Indicates if the format of the image is SVG */\r\n    public get isSVG(): boolean {\r\n        return this._isSVG;\r\n    }\r\n\r\n    /** Gets the status of the SVG attributes computation (sourceLeft, sourceTop, sourceWidth, sourceHeight) */\r\n    public get svgAttributesComputationCompleted(): boolean {\r\n        return this._svgAttributesComputationCompleted;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the image can force its container to adapt its size\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#image\r\n     */\r\n    @serialize()\r\n    public get autoScale(): boolean {\r\n        return this._autoScale;\r\n    }\r\n\r\n    public set autoScale(value: boolean) {\r\n        if (this._autoScale === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoScale = value;\r\n\r\n        if (value && this._loaded) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the stretching mode used by the image */\r\n    @serialize()\r\n    public get stretch(): number {\r\n        return this._stretch;\r\n    }\r\n\r\n    public set stretch(value: number) {\r\n        if (this._stretch === value) {\r\n            return;\r\n        }\r\n\r\n        this._stretch = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _rotate90(n: number, preserveProperties: boolean = false): Image {\r\n        const width = this._domImage.width;\r\n        const height = this._domImage.height;\r\n\r\n        // Should abstract platform instead of using LastCreatedEngine\r\n        const engine = this._host?.getScene()?.getEngine() || EngineStore.LastCreatedEngine;\r\n        if (!engine) {\r\n            throw new Error(\"Invalid engine. Unable to create a canvas.\");\r\n        }\r\n        const canvas = engine.createCanvas(height, width);\r\n\r\n        const context = canvas.getContext(\"2d\")!;\r\n\r\n        context.translate(canvas.width / 2, canvas.height / 2);\r\n        context.rotate((n * Math.PI) / 2);\r\n\r\n        context.drawImage(this._domImage, 0, 0, width, height, -width / 2, -height / 2, width, height);\r\n\r\n        const dataUrl: string = canvas.toDataURL(\"image/jpg\");\r\n        const rotatedImage = new Image(this.name + \"rotated\", dataUrl);\r\n\r\n        if (preserveProperties) {\r\n            rotatedImage._stretch = this._stretch;\r\n            rotatedImage._autoScale = this._autoScale;\r\n            rotatedImage._cellId = this._cellId;\r\n            rotatedImage._cellWidth = n % 1 ? this._cellHeight : this._cellWidth;\r\n            rotatedImage._cellHeight = n % 1 ? this._cellWidth : this._cellHeight;\r\n        }\r\n\r\n        this._handleRotationForSVGImage(this, rotatedImage, n);\r\n\r\n        this._imageDataCache.data = null;\r\n\r\n        return rotatedImage;\r\n    }\r\n\r\n    private _handleRotationForSVGImage(srcImage: Image, dstImage: Image, n: number): void {\r\n        if (!srcImage._isSVG) {\r\n            return;\r\n        }\r\n\r\n        if (srcImage._svgAttributesComputationCompleted) {\r\n            this._rotate90SourceProperties(srcImage, dstImage, n);\r\n            this._markAsDirty();\r\n        } else {\r\n            srcImage.onSVGAttributesComputedObservable.addOnce(() => {\r\n                this._rotate90SourceProperties(srcImage, dstImage, n);\r\n                this._markAsDirty();\r\n            });\r\n        }\r\n    }\r\n\r\n    private _rotate90SourceProperties(srcImage: Image, dstImage: Image, n: number): void {\r\n        let srcLeft = srcImage.sourceLeft,\r\n            srcTop = srcImage.sourceTop,\r\n            srcWidth = srcImage.domImage.width,\r\n            srcHeight = srcImage.domImage.height;\r\n\r\n        let dstLeft = srcLeft,\r\n            dstTop = srcTop,\r\n            dstWidth = srcImage.sourceWidth,\r\n            dstHeight = srcImage.sourceHeight;\r\n\r\n        if (n != 0) {\r\n            const mult = n < 0 ? -1 : 1;\r\n            n = n % 4;\r\n            for (let i = 0; i < Math.abs(n); ++i) {\r\n                dstLeft = -(srcTop - srcHeight / 2) * mult + srcHeight / 2;\r\n                dstTop = (srcLeft - srcWidth / 2) * mult + srcWidth / 2;\r\n                [dstWidth, dstHeight] = [dstHeight, dstWidth];\r\n                if (n < 0) {\r\n                    dstTop -= dstHeight;\r\n                } else {\r\n                    dstLeft -= dstWidth;\r\n                }\r\n                srcLeft = dstLeft;\r\n                srcTop = dstTop;\r\n                [srcWidth, srcHeight] = [srcHeight, srcWidth];\r\n            }\r\n        }\r\n\r\n        dstImage.sourceLeft = dstLeft;\r\n        dstImage.sourceTop = dstTop;\r\n        dstImage.sourceWidth = dstWidth;\r\n        dstImage.sourceHeight = dstHeight;\r\n    }\r\n\r\n    private _extractNinePatchSliceDataFromImage() {\r\n        const width = this._domImage.width;\r\n        const height = this._domImage.height;\r\n\r\n        if (!this._workingCanvas) {\r\n            const engine = this._host?.getScene()?.getEngine() || EngineStore.LastCreatedEngine;\r\n            if (!engine) {\r\n                throw new Error(\"Invalid engine. Unable to create a canvas.\");\r\n            }\r\n            this._workingCanvas = engine.createCanvas(width, height);\r\n        }\r\n        const canvas = this._workingCanvas;\r\n        const context = canvas.getContext(\"2d\")!;\r\n\r\n        context.drawImage(this._domImage, 0, 0, width, height);\r\n        const imageData = context.getImageData(0, 0, width, height);\r\n\r\n        // Left and right\r\n        this._sliceLeft = -1;\r\n        this._sliceRight = -1;\r\n        for (let x = 0; x < width; x++) {\r\n            const alpha = imageData.data[x * 4 + 3];\r\n\r\n            if (alpha > 127 && this._sliceLeft === -1) {\r\n                this._sliceLeft = x;\r\n                continue;\r\n            }\r\n\r\n            if (alpha < 127 && this._sliceLeft > -1) {\r\n                this._sliceRight = x;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // top and bottom\r\n        this._sliceTop = -1;\r\n        this._sliceBottom = -1;\r\n        for (let y = 0; y < height; y++) {\r\n            const alpha = imageData.data[y * width * 4 + 3];\r\n\r\n            if (alpha > 127 && this._sliceTop === -1) {\r\n                this._sliceTop = y;\r\n                continue;\r\n            }\r\n\r\n            if (alpha < 127 && this._sliceTop > -1) {\r\n                this._sliceBottom = y;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the internal DOM image used to render the control\r\n     */\r\n    public set domImage(value: IImage) {\r\n        this._domImage = value;\r\n        this._loaded = false;\r\n        this._imageDataCache.data = null;\r\n\r\n        if (this._domImage.width) {\r\n            this._onImageLoaded();\r\n        } else {\r\n            this._domImage.onload = () => {\r\n                this._onImageLoaded();\r\n            };\r\n        }\r\n    }\r\n\r\n    public get domImage(): IImage {\r\n        return this._domImage;\r\n    }\r\n\r\n    private _onImageLoaded(): void {\r\n        this._imageDataCache.data = null;\r\n        this._imageWidth = this._domImage.width;\r\n        this._imageHeight = this._domImage.height;\r\n        this._loaded = true;\r\n\r\n        if (this._populateNinePatchSlicesFromImage) {\r\n            this._extractNinePatchSliceDataFromImage();\r\n        }\r\n\r\n        if (this._autoScale) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n\r\n        this.onImageLoadedObservable.notifyObservers(this);\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets the image source url\r\n     */\r\n    @serialize()\r\n    public get source() {\r\n        return this._source;\r\n    }\r\n\r\n    /**\r\n     * Resets the internal Image Element cache. Can reduce memory usage.\r\n     */\r\n    public static ResetImageCache() {\r\n        Image.SourceImgCache.clear();\r\n    }\r\n\r\n    private _removeCacheUsage(source: Nullable<string>) {\r\n        const value = source && Image.SourceImgCache.get(source);\r\n        if (value) {\r\n            value.timesUsed -= 1;\r\n            // Since the image isn't being used anymore, we can clean it from the cache\r\n            if (value.timesUsed === 0) {\r\n                Image.SourceImgCache.delete(source);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets image source url\r\n     */\r\n    public set source(value: Nullable<string>) {\r\n        if (this._source === value) {\r\n            return;\r\n        }\r\n\r\n        this._removeCacheUsage(this._source);\r\n\r\n        this._loaded = false;\r\n        this._source = value;\r\n        this._imageDataCache.data = null;\r\n\r\n        if (value) {\r\n            value = this._svgCheck(value);\r\n        }\r\n\r\n        // Should abstract platform instead of using LastCreatedEngine\r\n        const engine = this._host?.getScene()?.getEngine() || EngineStore.LastCreatedEngine;\r\n        if (!engine) {\r\n            throw new Error(\"Invalid engine. Unable to create a canvas.\");\r\n        }\r\n        if (value && Image.SourceImgCache.has(value)) {\r\n            const cachedData = Image.SourceImgCache.get(value)!;\r\n            this._domImage = cachedData.img;\r\n            cachedData.timesUsed += 1;\r\n            if (cachedData.loaded) {\r\n                this._onImageLoaded();\r\n            } else {\r\n                cachedData.waitingForLoadCallback.push(this._onImageLoaded.bind(this));\r\n            }\r\n            return;\r\n        }\r\n        this._domImage = engine.createCanvasImage();\r\n        if (value) {\r\n            Image.SourceImgCache.set(value, { img: this._domImage, timesUsed: 1, loaded: false, waitingForLoadCallback: [this._onImageLoaded.bind(this)] });\r\n        }\r\n\r\n        this._domImage.onload = () => {\r\n            if (value) {\r\n                const cachedData = Image.SourceImgCache.get(value);\r\n                if (cachedData) {\r\n                    cachedData.loaded = true;\r\n                    for (const waitingCallback of cachedData.waitingForLoadCallback) {\r\n                        waitingCallback();\r\n                    }\r\n                    cachedData.waitingForLoadCallback.length = 0;\r\n                    return;\r\n                }\r\n            }\r\n            this._onImageLoaded();\r\n        };\r\n        if (value) {\r\n            Tools.SetCorsBehavior(value, this._domImage);\r\n            Tools.SetReferrerPolicyBehavior(this.referrerPolicy, this._domImage);\r\n            this._domImage.src = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks for svg document with icon id present\r\n     * @param value\r\n     */\r\n    private _svgCheck(value: string): string {\r\n        if (window.SVGSVGElement && value.search(/.svg#/gi) !== -1 && value.indexOf(\"#\") === value.lastIndexOf(\"#\")) {\r\n            this._isSVG = true;\r\n            const svgsrc = value.split(\"#\")[0];\r\n            const elemid = value.split(\"#\")[1];\r\n            // check if object alr exist in document\r\n            const svgExist = <HTMLObjectElement>document.body.querySelector('object[data=\"' + svgsrc + '\"]');\r\n            if (svgExist) {\r\n                const svgDoc = svgExist.contentDocument;\r\n                // get viewbox width and height, get svg document width and height in px\r\n                if (svgDoc && svgDoc.documentElement) {\r\n                    const vb = svgDoc.documentElement.getAttribute(\"viewBox\");\r\n                    const docwidth = Number(svgDoc.documentElement.getAttribute(\"width\"));\r\n                    const docheight = Number(svgDoc.documentElement.getAttribute(\"height\"));\r\n                    const elem = <SVGGraphicsElement>(<unknown>svgDoc.getElementById(elemid));\r\n                    if (elem && vb && docwidth && docheight) {\r\n                        this._getSVGAttribs(svgExist, elemid);\r\n                        return value;\r\n                    }\r\n                }\r\n\r\n                // wait for object to load\r\n                svgExist.addEventListener(\"load\", () => {\r\n                    this._getSVGAttribs(svgExist, elemid);\r\n                });\r\n            } else {\r\n                // create document object\r\n                const svgImage = document.createElement(\"object\");\r\n                svgImage.data = svgsrc;\r\n                svgImage.type = \"image/svg+xml\";\r\n                svgImage.width = \"0%\";\r\n                svgImage.height = \"0%\";\r\n                document.body.appendChild(svgImage);\r\n                // when the object has loaded, get the element attribs\r\n                svgImage.onload = () => {\r\n                    const svgobj = <HTMLObjectElement>document.body.querySelector('object[data=\"' + svgsrc + '\"]');\r\n                    if (svgobj) {\r\n                        this._getSVGAttribs(svgobj, elemid);\r\n                    }\r\n                };\r\n            }\r\n            return svgsrc;\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets sourceLeft, sourceTop, sourceWidth, sourceHeight automatically\r\n     * given external svg file and icon id\r\n     * @param svgsrc\r\n     * @param elemid\r\n     */\r\n    private _getSVGAttribs(svgsrc: HTMLObjectElement, elemid: string) {\r\n        const svgDoc = svgsrc.contentDocument;\r\n        // get viewbox width and height, get svg document width and height in px\r\n        if (svgDoc && svgDoc.documentElement) {\r\n            const vb = svgDoc.documentElement.getAttribute(\"viewBox\");\r\n            const docwidth = Number(svgDoc.documentElement.getAttribute(\"width\"));\r\n            const docheight = Number(svgDoc.documentElement.getAttribute(\"height\"));\r\n            // get element bbox and matrix transform\r\n            const elem = svgDoc.getElementById(elemid) as Nullable<SVGGraphicsElement>;\r\n            if (vb && docwidth && docheight && elem) {\r\n                const vb_width = Number(vb.split(\" \")[2]);\r\n                const vb_height = Number(vb.split(\" \")[3]);\r\n                const elem_bbox = elem.getBBox();\r\n                let elem_matrix_a = 1;\r\n                let elem_matrix_d = 1;\r\n                let elem_matrix_e = 0;\r\n                let elem_matrix_f = 0;\r\n                const mainMatrix = elem.transform.baseVal.consolidate()!.matrix;\r\n                if (elem.transform && elem.transform.baseVal.consolidate()) {\r\n                    elem_matrix_a = mainMatrix.a;\r\n                    elem_matrix_d = mainMatrix.d;\r\n                    elem_matrix_e = mainMatrix.e;\r\n                    elem_matrix_f = mainMatrix.f;\r\n                }\r\n\r\n                // compute source coordinates and dimensions\r\n                this.sourceLeft = ((elem_matrix_a * elem_bbox.x + elem_matrix_e) * docwidth) / vb_width;\r\n                this.sourceTop = ((elem_matrix_d * elem_bbox.y + elem_matrix_f) * docheight) / vb_height;\r\n                this.sourceWidth = elem_bbox.width * elem_matrix_a * (docwidth / vb_width);\r\n                this.sourceHeight = elem_bbox.height * elem_matrix_d * (docheight / vb_height);\r\n                this._svgAttributesComputationCompleted = true;\r\n                this.onSVGAttributesComputedObservable.notifyObservers(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell width to use when animation sheet is enabled\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#image\r\n     */\r\n    @serialize()\r\n    get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n    set cellWidth(value: number) {\r\n        if (this._cellWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell height to use when animation sheet is enabled\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#image\r\n     */\r\n    @serialize()\r\n    get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n    set cellHeight(value: number) {\r\n        if (this._cellHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell id to use (this will turn on the animation sheet mode)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#image\r\n     */\r\n    @serialize()\r\n    get cellId(): number {\r\n        return this._cellId;\r\n    }\r\n    set cellId(value: number) {\r\n        if (this._cellId === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellId = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Image\r\n     * @param name defines the control name\r\n     * @param url defines the image url\r\n     */\r\n    constructor(public name?: string, url: Nullable<string> = null) {\r\n        super(name);\r\n        this.source = url;\r\n    }\r\n\r\n    /**\r\n     * Tests if a given coordinates belong to the current control\r\n     * @param x defines x coordinate to test\r\n     * @param y defines y coordinate to test\r\n     * @returns true if the coordinates are inside the control\r\n     */\r\n    public contains(x: number, y: number): boolean {\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this._detectPointerOnOpaqueOnly || !this._workingCanvas) {\r\n            return true;\r\n        }\r\n\r\n        const width = this._currentMeasure.width | 0;\r\n        const height = this._currentMeasure.height | 0;\r\n        const key = width + \"_\" + height;\r\n\r\n        let imageData = this._imageDataCache.data;\r\n\r\n        if (!imageData || this._imageDataCache.key !== key) {\r\n            const canvas = this._workingCanvas;\r\n            const context = canvas.getContext(\"2d\")!;\r\n\r\n            this._imageDataCache.data = imageData = context.getImageData(0, 0, width, height).data;\r\n            this._imageDataCache.key = key;\r\n        }\r\n\r\n        x = (x - this._currentMeasure.left) | 0;\r\n        y = (y - this._currentMeasure.top) | 0;\r\n\r\n        const pickedPixel = imageData[(x + y * width) * 4 + 3];\r\n\r\n        return pickedPixel > 0;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Image\";\r\n    }\r\n\r\n    /** Force the control to synchronize with its content */\r\n    public synchronizeSizeWithContent() {\r\n        if (!this._loaded) {\r\n            return;\r\n        }\r\n\r\n        this.width = this._domImage.width + \"px\";\r\n        this.height = this._domImage.height + \"px\";\r\n    }\r\n\r\n    protected _processMeasures(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        if (this._loaded) {\r\n            switch (this._stretch) {\r\n                case Image.STRETCH_NONE:\r\n                    break;\r\n                case Image.STRETCH_FILL:\r\n                    break;\r\n                case Image.STRETCH_UNIFORM:\r\n                    break;\r\n                case Image.STRETCH_NINE_PATCH:\r\n                    break;\r\n                case Image.STRETCH_EXTEND:\r\n                    if (this._autoScale) {\r\n                        this.synchronizeSizeWithContent();\r\n                    }\r\n                    if (this.parent && this.parent.parent) {\r\n                        // Will update root size if root is not the top root\r\n                        this.parent.adaptWidthToChildren = true;\r\n                        this.parent.adaptHeightToChildren = true;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        super._processMeasures(parentMeasure, context);\r\n    }\r\n\r\n    private _prepareWorkingCanvasForOpaqueDetection() {\r\n        if (!this._detectPointerOnOpaqueOnly) {\r\n            return;\r\n        }\r\n\r\n        const width = this._currentMeasure.width;\r\n        const height = this._currentMeasure.height;\r\n\r\n        if (!this._workingCanvas) {\r\n            const engine = this._host?.getScene()?.getEngine() || EngineStore.LastCreatedEngine;\r\n            if (!engine) {\r\n                throw new Error(\"Invalid engine. Unable to create a canvas.\");\r\n            }\r\n            this._workingCanvas = engine.createCanvas(width, height);\r\n        }\r\n        const canvas = this._workingCanvas;\r\n\r\n        const context = canvas.getContext(\"2d\")!;\r\n\r\n        context.clearRect(0, 0, width, height);\r\n    }\r\n\r\n    private _drawImage(context: ICanvasRenderingContext, sx: number, sy: number, sw: number, sh: number, tx: number, ty: number, tw: number, th: number) {\r\n        context.drawImage(this._domImage, sx, sy, sw, sh, tx, ty, tw, th);\r\n\r\n        if (!this._detectPointerOnOpaqueOnly) {\r\n            return;\r\n        }\r\n\r\n        const canvas = this._workingCanvas!;\r\n        context = canvas.getContext(\"2d\")!;\r\n\r\n        context.drawImage(this._domImage, sx, sy, sw, sh, tx - this._currentMeasure.left, ty - this._currentMeasure.top, tw, th);\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        let x, y, width, height;\r\n        if (this.cellId == -1) {\r\n            x = this._sourceLeft;\r\n            y = this._sourceTop;\r\n\r\n            width = this._sourceWidth ? this._sourceWidth : this._imageWidth;\r\n            height = this._sourceHeight ? this._sourceHeight : this._imageHeight;\r\n        } else {\r\n            const rowCount = this._domImage.naturalWidth / this.cellWidth;\r\n            const column = (this.cellId / rowCount) >> 0;\r\n            const row = this.cellId % rowCount;\r\n\r\n            x = this.cellWidth * row;\r\n            y = this.cellHeight * column;\r\n            width = this.cellWidth;\r\n            height = this.cellHeight;\r\n        }\r\n\r\n        this._prepareWorkingCanvasForOpaqueDetection();\r\n\r\n        this._applyStates(context);\r\n        if (this._loaded) {\r\n            switch (this._stretch) {\r\n                case Image.STRETCH_NONE:\r\n                    this._drawImage(context, x, y, width, height, this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                    break;\r\n                case Image.STRETCH_FILL:\r\n                    this._drawImage(context, x, y, width, height, this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                    break;\r\n                case Image.STRETCH_UNIFORM: {\r\n                    const hRatio = this._currentMeasure.width / width;\r\n                    const vRatio = this._currentMeasure.height / height;\r\n                    const ratio = Math.min(hRatio, vRatio);\r\n                    const centerX = (this._currentMeasure.width - width * ratio) / 2;\r\n                    const centerY = (this._currentMeasure.height - height * ratio) / 2;\r\n\r\n                    this._drawImage(context, x, y, width, height, this._currentMeasure.left + centerX, this._currentMeasure.top + centerY, width * ratio, height * ratio);\r\n                    break;\r\n                }\r\n                case Image.STRETCH_EXTEND:\r\n                    this._drawImage(context, x, y, width, height, this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                    break;\r\n                case Image.STRETCH_NINE_PATCH:\r\n                    this._renderNinePatch(context);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    private _renderNinePatch(context: ICanvasRenderingContext): void {\r\n        const leftWidth = this._sliceLeft;\r\n        const topHeight = this._sliceTop;\r\n        const bottomHeight = this._imageHeight - this._sliceBottom;\r\n        const rightWidth = this._imageWidth - this._sliceRight;\r\n        const centerWidth = this._sliceRight - this._sliceLeft;\r\n        const centerHeight = this._sliceBottom - this._sliceTop;\r\n        const targetCenterWidth = this._currentMeasure.width - rightWidth - leftWidth + 2;\r\n        const targetCenterHeight = this._currentMeasure.height - bottomHeight - topHeight + 2;\r\n        const centerLeftOffset = this._currentMeasure.left + leftWidth - 1;\r\n        const centerTopOffset = this._currentMeasure.top + topHeight - 1;\r\n        const rightOffset = this._currentMeasure.left + this._currentMeasure.width - rightWidth;\r\n        const bottomOffset = this._currentMeasure.top + this._currentMeasure.height - bottomHeight;\r\n\r\n        //Top Left\r\n        this._drawImage(context, 0, 0, leftWidth, topHeight, this._currentMeasure.left, this._currentMeasure.top, leftWidth, topHeight);\r\n        //Top\r\n        context.clearRect(centerLeftOffset, this._currentMeasure.top, targetCenterWidth, topHeight);\r\n        this._drawImage(context, this._sliceLeft, 0, centerWidth, topHeight, centerLeftOffset, this._currentMeasure.top, targetCenterWidth, topHeight);\r\n        //Top Right\r\n        context.clearRect(rightOffset, this._currentMeasure.top, rightWidth, topHeight);\r\n        this._drawImage(context, this._sliceRight, 0, rightWidth, topHeight, rightOffset, this._currentMeasure.top, rightWidth, topHeight);\r\n        //Left\r\n        context.clearRect(this._currentMeasure.left, centerTopOffset, leftWidth, targetCenterHeight);\r\n        this._drawImage(context, 0, this._sliceTop, leftWidth, centerHeight, this._currentMeasure.left, centerTopOffset, leftWidth, targetCenterHeight);\r\n        // Center\r\n        context.clearRect(centerLeftOffset, centerTopOffset, targetCenterWidth, targetCenterHeight);\r\n        this._drawImage(context, this._sliceLeft, this._sliceTop, centerWidth, centerHeight, centerLeftOffset, centerTopOffset, targetCenterWidth, targetCenterHeight);\r\n        //Right\r\n        context.clearRect(rightOffset, centerTopOffset, rightWidth, targetCenterHeight);\r\n        this._drawImage(context, this._sliceRight, this._sliceTop, rightWidth, centerHeight, rightOffset, centerTopOffset, rightWidth, targetCenterHeight);\r\n        //Bottom Left\r\n        context.clearRect(this._currentMeasure.left, bottomOffset, leftWidth, bottomHeight);\r\n        this._drawImage(context, 0, this._sliceBottom, leftWidth, bottomHeight, this._currentMeasure.left, bottomOffset, leftWidth, bottomHeight);\r\n        //Bottom\r\n        context.clearRect(centerLeftOffset, bottomOffset, targetCenterWidth, bottomHeight);\r\n        this._drawImage(context, this.sliceLeft, this._sliceBottom, centerWidth, bottomHeight, centerLeftOffset, bottomOffset, targetCenterWidth, bottomHeight);\r\n        //Bottom Right\r\n        context.clearRect(rightOffset, bottomOffset, rightWidth, bottomHeight);\r\n        this._drawImage(context, this._sliceRight, this._sliceBottom, rightWidth, bottomHeight, rightOffset, bottomOffset, rightWidth, bottomHeight);\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n        this.onImageLoadedObservable.clear();\r\n        this.onSVGAttributesComputedObservable.clear();\r\n        this._removeCacheUsage(this._source);\r\n    }\r\n\r\n    // Static\r\n    /** STRETCH_NONE */\r\n    public static readonly STRETCH_NONE = 0;\r\n    /** STRETCH_FILL */\r\n    public static readonly STRETCH_FILL = 1;\r\n    /** STRETCH_UNIFORM */\r\n    public static readonly STRETCH_UNIFORM = 2;\r\n    /** STRETCH_EXTEND */\r\n    public static readonly STRETCH_EXTEND = 3;\r\n    /** NINE_PATCH */\r\n    public static readonly STRETCH_NINE_PATCH = 4;\r\n}\r\nRegisterClass(\"BABYLON.GUI.Image\", Image);\r\n","import type { Nullable } from \"core/types\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Rectangle } from \"./rectangle\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Image } from \"./image\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport type { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/**\r\n * Class used to create 2D buttons\r\n */\r\nexport class Button extends Rectangle {\r\n    /**\r\n     * Function called to generate a pointer enter animation\r\n     */\r\n    public pointerEnterAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation\r\n     */\r\n    public pointerOutAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation\r\n     */\r\n    public pointerDownAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation\r\n     */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the button will let internal controls handle picking instead of doing it directly using its bounding info\r\n     */\r\n    public delegatePickingToChildren = false;\r\n\r\n    private _image: Nullable<Image>;\r\n    /**\r\n     * Returns the image part of the button (if any)\r\n     */\r\n    public get image(): Nullable<Image> {\r\n        return this._image;\r\n    }\r\n\r\n    private _textBlock: Nullable<TextBlock>;\r\n    /**\r\n     * Returns the TextBlock part of the button (if any)\r\n     */\r\n    public get textBlock(): Nullable<TextBlock> {\r\n        return this._textBlock;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Button\r\n     * @param name defines the name of the button\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.thickness = 1;\r\n        this.isPointerBlocker = true;\r\n\r\n        let alphaStore: Nullable<number> = null;\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            alphaStore = this.alpha;\r\n            this.alpha -= 0.1;\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (alphaStore !== null) {\r\n                this.alpha = alphaStore;\r\n            }\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button\";\r\n    }\r\n\r\n    // While being a container, the button behaves like a control.\r\n    /**\r\n     * @internal\r\n     */\r\n    public _processPicking(x: number, y: number, pi: PointerInfoBase, type: number, pointerId: number, buttonIndex: number, deltaX?: number, deltaY?: number): boolean {\r\n        if (!this._isEnabled || !this.isHitTestVisible || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.delegatePickingToChildren) {\r\n            let contains = false;\r\n            for (let index = this._children.length - 1; index >= 0; index--) {\r\n                const child = this._children[index];\r\n                if (child.isEnabled && child.isHitTestVisible && child.isVisible && !child.notRenderable && child.contains(x, y)) {\r\n                    contains = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!contains) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerEnter(target: Control, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerEnter(target, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isReadOnly && this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerOut(target: Control, pi: PointerInfoBase, force = false): void {\r\n        if (!this.isReadOnly && this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n\r\n        super._onPointerOut(target, pi, force);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isReadOnly && this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    protected _getRectangleFill(context: ICanvasRenderingContext) {\r\n        if (this.isEnabled) {\r\n            return this._getBackgroundColor(context);\r\n        } else {\r\n            return this._disabledColor;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean, pi: PointerInfoBase): void {\r\n        if (!this.isReadOnly && this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick, pi);\r\n    }\r\n\r\n    /**\r\n     * Serializes the current button\r\n     * @param serializationObject defines the JSON serialized object\r\n     */\r\n    public serialize(serializationObject: any) {\r\n        super.serialize(serializationObject);\r\n\r\n        if (this._textBlock) {\r\n            serializationObject.textBlockName = this._textBlock.name;\r\n        }\r\n        if (this._image) {\r\n            serializationObject.imageName = this._image.name;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        super._parseFromContent(serializedObject, host);\r\n\r\n        if (serializedObject.textBlockName) {\r\n            this._textBlock = this.getChildByName(serializedObject.textBlockName) as Nullable<TextBlock>;\r\n        }\r\n\r\n        if (serializedObject.imageName) {\r\n            this._image = this.getChildByName(serializedObject.imageName) as Nullable<Image>;\r\n        }\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new button made with an image and a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageButton(name: string, text: string, imageUrl: string): Button {\r\n        const result = new this(name);\r\n\r\n        // Adding text\r\n        const textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        textBlock.paddingLeft = \"20%\";\r\n        result.addControl(textBlock);\r\n\r\n        // Adding image\r\n        const iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.width = \"20%\";\r\n        iconImage.stretch = Image.STRETCH_UNIFORM;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image\r\n     * @param name defines the name of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageOnlyButton(name: string, imageUrl: string): Button {\r\n        const result = new this(name);\r\n\r\n        // Adding image\r\n        const iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @returns a new Button\r\n     */\r\n    public static CreateSimpleButton(name: string, text: string): Button {\r\n        const result = new this(name);\r\n\r\n        // Adding text\r\n        const textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image and a centered text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageWithCenterTextButton(name: string, text: string, imageUrl: string): Button {\r\n        const result = new this(name);\r\n\r\n        // Adding image\r\n        const iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        result.addControl(iconImage);\r\n\r\n        // Adding text\r\n        const textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Button\", Button);\r\n","import { Tools } from \"core/Misc/tools\";\r\n\r\nimport { Container } from \"./container\";\r\nimport type { Measure } from \"../measure\";\r\nimport { Control } from \"./control\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport type { TextBlock } from \"./textBlock\";\r\nimport { TextWrapping } from \"./textBlock\";\r\n\r\n/**\r\n * Class used to create a 2D stack panel container\r\n */\r\nexport class StackPanel extends Container {\r\n    private _isVertical = true;\r\n    private _manualWidth = false;\r\n    private _manualHeight = false;\r\n    private _doNotTrackManualChanges = false;\r\n    private _spacing = 0;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that layout warnings should be ignored\r\n     */\r\n    @serialize()\r\n    public ignoreLayoutWarnings = false;\r\n\r\n    /** Gets or sets a boolean indicating if the stack panel is vertical or horizontal*/\r\n    @serialize()\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the spacing (in pixels) between each child.\r\n     */\r\n    @serialize()\r\n    public get spacing(): number {\r\n        return this._spacing;\r\n    }\r\n\r\n    public set spacing(value: number) {\r\n        if (this._spacing === value) {\r\n            return;\r\n        }\r\n\r\n        this._spacing = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel width.\r\n     * This value should not be set when in horizontal mode as it will be computed automatically\r\n     */\r\n    @serialize()\r\n    public set width(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualWidth = true;\r\n        }\r\n\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel height.\r\n     * This value should not be set when in vertical mode as it will be computed automatically\r\n     */\r\n    @serialize()\r\n    public set height(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualHeight = true;\r\n        }\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new StackPanel\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"StackPanel\";\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _preMeasure(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        for (const child of this._children) {\r\n            if (this._isVertical) {\r\n                child.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            } else {\r\n                child.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            }\r\n        }\r\n\r\n        super._preMeasure(parentMeasure, context);\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(parentMeasure);\r\n\r\n        this._measureForChildren.left = this._currentMeasure.left;\r\n        this._measureForChildren.top = this._currentMeasure.top;\r\n\r\n        if (!this.isVertical || this._manualWidth) {\r\n            this._measureForChildren.width = this._currentMeasure.width;\r\n        }\r\n\r\n        if (this.isVertical || this._manualHeight) {\r\n            this._measureForChildren.height = this._currentMeasure.height;\r\n        }\r\n    }\r\n\r\n    protected _postMeasure(): void {\r\n        let stackWidth = 0;\r\n        let stackHeight = 0;\r\n        const childrenCount = this._children.length;\r\n        for (let index = 0; index < childrenCount; index++) {\r\n            const child = this._children[index];\r\n            if (!child.isVisible || child.notRenderable) {\r\n                continue;\r\n            }\r\n\r\n            if (this._isVertical) {\r\n                if (child.top !== stackHeight + \"px\") {\r\n                    child.top = stackHeight + \"px\";\r\n                    this._rebuildLayout = true;\r\n                    child._top.ignoreAdaptiveScaling = true;\r\n                }\r\n\r\n                if (child._height.isPercentage && !child._automaticSize) {\r\n                    if (!this.ignoreLayoutWarnings) {\r\n                        Tools.Warn(`Control (Name:${child.name}, UniqueId:${child.uniqueId}) is using height in percentage mode inside a vertical StackPanel`);\r\n                    }\r\n                } else {\r\n                    stackHeight += child._currentMeasure.height + child._paddingTopInPixels + child._paddingBottomInPixels + (index < childrenCount - 1 ? this._spacing : 0);\r\n                }\r\n            } else {\r\n                if (child.left !== stackWidth + \"px\") {\r\n                    child.left = stackWidth + \"px\";\r\n                    this._rebuildLayout = true;\r\n                    child._left.ignoreAdaptiveScaling = true;\r\n                }\r\n\r\n                if (\r\n                    child._width.isPercentage &&\r\n                    !child._automaticSize &&\r\n                    child.getClassName() === \"TextBlock\" &&\r\n                    (child as TextBlock).textWrapping !== TextWrapping.Clip &&\r\n                    !(child as TextBlock).forceResizeWidth\r\n                ) {\r\n                    if (!this.ignoreLayoutWarnings) {\r\n                        Tools.Warn(`Control (Name:${child.name}, UniqueId:${child.uniqueId}) is using width in percentage mode inside a horizontal StackPanel`);\r\n                    }\r\n                } else {\r\n                    stackWidth += child._currentMeasure.width + child._paddingLeftInPixels + child._paddingRightInPixels + (index < childrenCount - 1 ? this._spacing : 0);\r\n                }\r\n            }\r\n        }\r\n\r\n        stackWidth += this._paddingLeftInPixels + this._paddingRightInPixels;\r\n        stackHeight += this._paddingTopInPixels + this._paddingBottomInPixels;\r\n\r\n        this._doNotTrackManualChanges = true;\r\n\r\n        // Let stack panel width or height default to stackHeight and stackWidth if dimensions are not specified.\r\n        // User can now define their own height and width for stack panel.\r\n\r\n        let panelWidthChanged = false;\r\n        let panelHeightChanged = false;\r\n\r\n        if ((!this._manualHeight || this.adaptHeightToChildren) && this._isVertical) {\r\n            // do not specify height if strictly defined by user\r\n            const previousHeight = this.height;\r\n            this.height = stackHeight + \"px\";\r\n            panelHeightChanged = previousHeight !== this.height || !this._height.ignoreAdaptiveScaling;\r\n        }\r\n        if ((!this._manualWidth || this.adaptWidthToChildren) && !this._isVertical) {\r\n            // do not specify width if strictly defined by user\r\n            const previousWidth = this.width;\r\n            this.width = stackWidth + \"px\";\r\n            panelWidthChanged = previousWidth !== this.width || !this._width.ignoreAdaptiveScaling;\r\n        }\r\n\r\n        if (panelHeightChanged) {\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        if (panelWidthChanged) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._doNotTrackManualChanges = false;\r\n\r\n        if (panelWidthChanged || panelHeightChanged) {\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        super._postMeasure();\r\n    }\r\n\r\n    /**\r\n     * Serializes the current control\r\n     * @param serializationObject defined the JSON serialized object\r\n     */\r\n    public serialize(serializationObject: any) {\r\n        super.serialize(serializationObject);\r\n        serializationObject.manualWidth = this._manualWidth;\r\n        serializationObject.manualHeight = this._manualHeight;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        this._manualWidth = serializedObject.manualWidth;\r\n        this._manualHeight = serializedObject.manualHeight;\r\n\r\n        super._parseFromContent(serializedObject, host);\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.StackPanel\", StackPanel);\r\n","import { Observable } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/**\r\n * Class used to represent a 2D checkbox\r\n */\r\nexport class Checkbox extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness  */\r\n    @serialize()\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Observable raised when isChecked property changes\r\n     */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    @serialize()\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    @serialize()\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    @serialize()\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    /**\r\n     * Creates a new CheckBox\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Checkbox\";\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        const actualWidth = this._currentMeasure.width - this._thickness;\r\n        const actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n        context.fillRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._isChecked) {\r\n            context.fillStyle = this._isEnabled ? this.color : this._disabledColorItem;\r\n            const offsetWidth = actualWidth * this._checkSizeRatio;\r\n            const offsetHeight = actualHeight * this._checkSizeRatio;\r\n\r\n            context.fillRect(\r\n                this._currentMeasure.left + this._thickness / 2 + (actualWidth - offsetWidth) / 2,\r\n                this._currentMeasure.top + this._thickness / 2 + (actualHeight - offsetHeight) / 2,\r\n                offsetWidth,\r\n                offsetHeight\r\n            );\r\n        }\r\n\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._thickness;\r\n\r\n        context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isReadOnly) {\r\n            this.isChecked = !this.isChecked;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a checkbox with a header\r\n     * @param title defines the label to use for the header\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the checkbox and a textBlock\r\n     */\r\n    public static AddCheckBoxWithHeader(title: string, onValueChanged: (value: boolean) => void): StackPanel {\r\n        const panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        const checkbox = new Checkbox();\r\n        checkbox.width = \"20px\";\r\n        checkbox.height = \"20px\";\r\n        checkbox.isChecked = true;\r\n        checkbox.color = \"green\";\r\n        checkbox.onIsCheckedChangedObservable.add(onValueChanged);\r\n        panel.addControl(checkbox);\r\n\r\n        const header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Checkbox\", Checkbox);\r\n","/** @internal */\r\nexport class TextWrapper {\r\n    private _text: string;\r\n    private _characters: string[] | undefined;\r\n\r\n    public get text(): string {\r\n        return this._characters ? this._characters.join(\"\") : this._text;\r\n    }\r\n\r\n    public set text(txt: string) {\r\n        this._text = txt;\r\n        this._characters = Array.from && Array.from(txt);\r\n    }\r\n\r\n    public get length(): number {\r\n        return this._characters ? this._characters.length : this._text.length;\r\n    }\r\n\r\n    public removePart(idxStart: number, idxEnd: number, insertTxt?: string): void {\r\n        this._text = this._text.slice(0, idxStart) + (insertTxt ? insertTxt : \"\") + this._text.slice(idxEnd);\r\n        if (this._characters) {\r\n            const newCharacters = insertTxt ? Array.from(insertTxt) : [];\r\n            this._characters.splice(idxStart, idxEnd - idxStart, ...newCharacters);\r\n        }\r\n    }\r\n\r\n    public charAt(idx: number): string {\r\n        return this._characters ? this._characters[idx] : this._text.charAt(idx);\r\n    }\r\n\r\n    public substr(from: number, length?: number): string {\r\n        if (this._characters) {\r\n            if (isNaN(from)) {\r\n                from = 0;\r\n            } else if (from >= 0) {\r\n                from = Math.min(from, this._characters.length);\r\n            } else {\r\n                from = this._characters.length + Math.max(from, -this._characters.length);\r\n            }\r\n            if (length === undefined) {\r\n                length = this._characters.length - from;\r\n            } else if (isNaN(length)) {\r\n                length = 0;\r\n            } else if (length < 0) {\r\n                length = 0;\r\n            }\r\n            const temp = [];\r\n            while (--length >= 0) {\r\n                temp[length] = this._characters[from + length];\r\n            }\r\n            return temp.join(\"\");\r\n        }\r\n\r\n        return this._text.substr(from, length);\r\n    }\r\n\r\n    public substring(from: number, to?: number): string {\r\n        if (this._characters) {\r\n            if (isNaN(from)) {\r\n                from = 0;\r\n            } else if (from > this._characters.length) {\r\n                from = this._characters.length;\r\n            } else if (from < 0) {\r\n                from = 0;\r\n            }\r\n            if (to === undefined) {\r\n                to = this._characters.length;\r\n            } else if (isNaN(to)) {\r\n                to = 0;\r\n            } else if (to > this._characters.length) {\r\n                to = this._characters.length;\r\n            } else if (to < 0) {\r\n                to = 0;\r\n            }\r\n            const temp = [];\r\n            let idx = 0;\r\n            while (from < to) {\r\n                temp[idx++] = this._characters[from++];\r\n            }\r\n            return temp.join(\"\");\r\n        }\r\n\r\n        return this._text.substring(from, to);\r\n    }\r\n\r\n    public isWord(index: number): boolean {\r\n        const rWord = /\\w/g;\r\n        return this._characters ? this._characters[index].search(rWord) !== -1 : this._text.search(rWord) !== -1;\r\n    }\r\n}\r\n","import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\nimport type { ClipboardInfo } from \"core/Events/clipboardEvents\";\r\nimport { ClipboardEventTypes } from \"core/Events/clipboardEvents\";\r\nimport type { PointerInfo, PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"core/Events/pointerEvents\";\r\n\r\nimport { Control } from \"./control\";\r\nimport type { IFocusableControl } from \"./focusableControl\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport type { VirtualKeyboard } from \"./virtualKeyboard\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { TextWrapper } from \"./textWrapper\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { IKeyboardEvent, IPointerEvent } from \"core/Events/deviceInputEvents\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/**\r\n * Class used to create input text control\r\n */\r\nexport class InputText extends Control implements IFocusableControl {\r\n    protected _textWrapper: TextWrapper;\r\n    protected _placeholderText = \"\";\r\n    protected _background = \"#222222\";\r\n    protected _focusedBackground = \"#000000\";\r\n    protected _focusedColor = \"white\";\r\n    protected _placeholderColor = \"gray\";\r\n    protected _thickness = 1;\r\n    protected _margin = new ValueAndUnit(10, ValueAndUnit.UNITMODE_PIXEL);\r\n    protected _autoStretchWidth = true;\r\n    protected _maxWidth = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    protected _isFocused = false;\r\n    /** the type of device that most recently focused the input: \"mouse\", \"touch\" or \"pen\" */\r\n    protected _focusedBy: string;\r\n    protected _blinkTimeout: number;\r\n    protected _blinkIsEven = false;\r\n    private _cursorOffset = 0;\r\n    protected _scrollLeft: Nullable<number>;\r\n    protected _textWidth: number;\r\n    protected _clickedCoordinate: Nullable<number>;\r\n    protected _deadKey = false;\r\n    protected _addKey = true;\r\n    protected _currentKey = \"\";\r\n    protected _isTextHighlightOn = false;\r\n    protected _textHighlightColor = \"#d5e0ff\";\r\n    protected _highligherOpacity = 0.4;\r\n    protected _highlightedText = \"\";\r\n    private _startHighlightIndex = 0;\r\n    private _endHighlightIndex = 0;\r\n    private _cursorIndex = -1;\r\n    protected _onFocusSelectAll = false;\r\n    protected _isPointerDown = false;\r\n    protected _onClipboardObserver: Nullable<Observer<ClipboardInfo>>;\r\n    protected _onPointerDblTapObserver: Nullable<Observer<PointerInfo>>;\r\n\r\n    /** @internal */\r\n    public _connectedVirtualKeyboard: Nullable<VirtualKeyboard>;\r\n\r\n    /** Gets or sets a string representing the message displayed on mobile when the control gets the focus */\r\n    @serialize()\r\n    public promptMessage = \"Please enter text:\";\r\n    /** Force disable prompt on mobile device */\r\n    @serialize()\r\n    public disableMobilePrompt = false;\r\n\r\n    /** Observable raised when the text changes */\r\n    public onTextChangedObservable = new Observable<InputText>();\r\n    /** Observable raised just before an entered character is to be added */\r\n    public onBeforeKeyAddObservable = new Observable<InputText>();\r\n    /** Observable raised when the control gets the focus */\r\n    public onFocusObservable = new Observable<InputText>();\r\n    /** Observable raised when the control loses the focus */\r\n    public onBlurObservable = new Observable<InputText>();\r\n    /**Observable raised when the text is highlighted */\r\n    public onTextHighlightObservable = new Observable<InputText>();\r\n    /**Observable raised when copy event is triggered */\r\n    public onTextCopyObservable = new Observable<InputText>();\r\n    /** Observable raised when cut event is triggered */\r\n    public onTextCutObservable = new Observable<InputText>();\r\n    /** Observable raised when paste event is triggered */\r\n    public onTextPasteObservable = new Observable<InputText>();\r\n    /** Observable raised when a key event was processed */\r\n    public onKeyboardEventProcessedObservable = new Observable<IKeyboardEvent>();\r\n\r\n    /** Gets or sets the maximum width allowed by the control */\r\n    @serialize()\r\n    public get maxWidth(): string | number {\r\n        return this._maxWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets the maximum width allowed by the control in pixels */\r\n    public get maxWidthInPixels(): number {\r\n        return this._maxWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set maxWidth(value: string | number) {\r\n        if (this._maxWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._maxWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the text highlighter transparency; default: 0.4 */\r\n    @serialize()\r\n    public get highligherOpacity(): number {\r\n        return this._highligherOpacity;\r\n    }\r\n\r\n    public set highligherOpacity(value: number) {\r\n        if (this._highligherOpacity === value) {\r\n            return;\r\n        }\r\n        this._highligherOpacity = value;\r\n        this._markAsDirty();\r\n    }\r\n    /** Gets or sets a boolean indicating whether to select complete text by default on input focus */\r\n    @serialize()\r\n    public get onFocusSelectAll(): boolean {\r\n        return this._onFocusSelectAll;\r\n    }\r\n\r\n    public set onFocusSelectAll(value: boolean) {\r\n        if (this._onFocusSelectAll === value) {\r\n            return;\r\n        }\r\n\r\n        this._onFocusSelectAll = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the text hightlight color */\r\n    @serialize()\r\n    public get textHighlightColor(): string {\r\n        return this._textHighlightColor;\r\n    }\r\n\r\n    public set textHighlightColor(value: string) {\r\n        if (this._textHighlightColor === value) {\r\n            return;\r\n        }\r\n        this._textHighlightColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets control margin */\r\n    @serialize()\r\n    public get margin(): string {\r\n        return this._margin.toString(this._host);\r\n    }\r\n\r\n    /** Gets control margin in pixels */\r\n    public get marginInPixels(): number {\r\n        return this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set margin(value: string) {\r\n        if (this._margin.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._margin.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can auto stretch its width to adapt to the text */\r\n    @serialize()\r\n    public get autoStretchWidth(): boolean {\r\n        return this._autoStretchWidth;\r\n    }\r\n\r\n    public set autoStretchWidth(value: boolean) {\r\n        if (this._autoStretchWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoStretchWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets border thickness */\r\n    @serialize()\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the background color when focused */\r\n    @serialize()\r\n    public get focusedBackground(): string {\r\n        return this._focusedBackground;\r\n    }\r\n\r\n    public set focusedBackground(value: string) {\r\n        if (this._focusedBackground === value) {\r\n            return;\r\n        }\r\n\r\n        this._focusedBackground = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the background color when focused */\r\n    @serialize()\r\n    public get focusedColor(): string {\r\n        return this._focusedColor;\r\n    }\r\n\r\n    public set focusedColor(value: string) {\r\n        if (this._focusedColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._focusedColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the background color */\r\n    @serialize()\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the placeholder color */\r\n    @serialize()\r\n    public get placeholderColor(): string {\r\n        return this._placeholderColor;\r\n    }\r\n\r\n    public set placeholderColor(value: string) {\r\n        if (this._placeholderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._placeholderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the text displayed when the control is empty */\r\n    @serialize()\r\n    public get placeholderText(): string {\r\n        return this._placeholderText;\r\n    }\r\n\r\n    public set placeholderText(value: string) {\r\n        if (this._placeholderText === value) {\r\n            return;\r\n        }\r\n        this._placeholderText = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the dead key. 0 to disable. */\r\n    @serialize()\r\n    public get deadKey(): boolean {\r\n        return this._deadKey;\r\n    }\r\n\r\n    public set deadKey(flag: boolean) {\r\n        this._deadKey = flag;\r\n    }\r\n\r\n    /** Gets or sets the highlight text */\r\n    public get highlightedText(): string {\r\n        return this._highlightedText;\r\n    }\r\n    public set highlightedText(text: string) {\r\n        if (this._highlightedText === text) {\r\n            return;\r\n        }\r\n        this._highlightedText = text;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets if the current key should be added */\r\n    public get addKey(): boolean {\r\n        return this._addKey;\r\n    }\r\n\r\n    public set addKey(flag: boolean) {\r\n        this._addKey = flag;\r\n    }\r\n\r\n    /** Gets or sets the value of the current key being entered */\r\n    public get currentKey(): string {\r\n        return this._currentKey;\r\n    }\r\n\r\n    public set currentKey(key: string) {\r\n        this._currentKey = key;\r\n    }\r\n\r\n    /** Gets or sets the text displayed in the control */\r\n    @serialize()\r\n    public get text(): string {\r\n        return this._textWrapper.text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        const valueAsString = value.toString(); // Forcing convertion\r\n\r\n        if (!this._textWrapper) {\r\n            this._textWrapper = new TextWrapper();\r\n        }\r\n\r\n        if (this._textWrapper.text === valueAsString) {\r\n            return;\r\n        }\r\n        this._textWrapper.text = valueAsString;\r\n        this._textHasChanged();\r\n    }\r\n\r\n    protected _textHasChanged(): void {\r\n        this._markAsDirty();\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets control width */\r\n    @serialize()\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n\r\n        this.autoStretchWidth = false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new InputText\r\n     * @param name defines the control name\r\n     * @param text defines the text of the control\r\n     */\r\n    constructor(public name?: string, text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    /** @internal */\r\n    public onBlur(): void {\r\n        this._isFocused = false;\r\n        this._scrollLeft = null;\r\n        this._cursorOffset = 0;\r\n        clearTimeout(this._blinkTimeout);\r\n        this._markAsDirty();\r\n\r\n        this.onBlurObservable.notifyObservers(this);\r\n\r\n        this._host.unRegisterClipboardEvents();\r\n        if (this._onClipboardObserver) {\r\n            this._host.onClipboardObservable.remove(this._onClipboardObserver);\r\n        }\r\n        const scene = this._host.getScene();\r\n        if (this._onPointerDblTapObserver && scene) {\r\n            scene.onPointerObservable.remove(this._onPointerDblTapObserver);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public onFocus(): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n        this._scrollLeft = null;\r\n        this._isFocused = true;\r\n        this._blinkIsEven = false;\r\n        this._cursorOffset = 0;\r\n        this._markAsDirty();\r\n\r\n        this.onFocusObservable.notifyObservers(this);\r\n\r\n        if (this._focusedBy === \"touch\" && !this.disableMobilePrompt) {\r\n            const value = prompt(this.promptMessage);\r\n\r\n            if (value !== null) {\r\n                this.text = value;\r\n            }\r\n            this._host.focusedControl = null;\r\n            return;\r\n        }\r\n\r\n        this._host.registerClipboardEvents();\r\n\r\n        this._onClipboardObserver = this._host.onClipboardObservable.add((clipboardInfo) => {\r\n            // process clipboard event, can be configured.\r\n            switch (clipboardInfo.type) {\r\n                case ClipboardEventTypes.COPY:\r\n                    this._onCopyText(clipboardInfo.event);\r\n                    this.onTextCopyObservable.notifyObservers(this);\r\n                    break;\r\n                case ClipboardEventTypes.CUT:\r\n                    this._onCutText(clipboardInfo.event);\r\n                    this.onTextCutObservable.notifyObservers(this);\r\n                    break;\r\n                case ClipboardEventTypes.PASTE:\r\n                    this._onPasteText(clipboardInfo.event);\r\n                    this.onTextPasteObservable.notifyObservers(this);\r\n                    break;\r\n                default:\r\n                    return;\r\n            }\r\n        });\r\n\r\n        const scene = this._host.getScene();\r\n        if (scene) {\r\n            //register the pointer double tap event\r\n            this._onPointerDblTapObserver = scene.onPointerObservable.add((pointerInfo) => {\r\n                if (!this._isFocused) {\r\n                    return;\r\n                }\r\n                if (pointerInfo.type === PointerEventTypes.POINTERDOUBLETAP) {\r\n                    this._processDblClick(pointerInfo);\r\n                }\r\n            });\r\n        }\r\n\r\n        if (this._onFocusSelectAll) {\r\n            this._selectAllText();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function to focus an inputText programmatically\r\n     */\r\n    public focus() {\r\n        this._host.moveFocusToControl(this);\r\n    }\r\n\r\n    /**\r\n     * Function to unfocus an inputText programmatically\r\n     */\r\n    public blur() {\r\n        this._host.focusedControl = null;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"InputText\";\r\n    }\r\n\r\n    /**\r\n     * Function called to get the list of controls that should not steal the focus from this control\r\n     * @returns an array of controls\r\n     */\r\n    public keepsFocusWith(): Nullable<Control[]> {\r\n        if (!this._connectedVirtualKeyboard) {\r\n            return null;\r\n        }\r\n        return [this._connectedVirtualKeyboard];\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public processKey(keyCode: number, key?: string, evt?: IKeyboardEvent) {\r\n        if (this.isReadOnly) {\r\n            return;\r\n        }\r\n\r\n        //return if clipboard event keys (i.e -ctr/cmd + c,v,x)\r\n        if (evt && (evt.ctrlKey || evt.metaKey) && (keyCode === 67 || keyCode === 86 || keyCode === 88)) {\r\n            return;\r\n        }\r\n\r\n        //select all\r\n        if (evt && (evt.ctrlKey || evt.metaKey) && keyCode === 65) {\r\n            this._selectAllText();\r\n            evt.preventDefault();\r\n            return;\r\n        }\r\n        // Specific cases\r\n        switch (keyCode) {\r\n            case 32: //SPACE\r\n                key = \" \"; //ie11 key for space is \"Spacebar\"\r\n                break;\r\n            case 191: //SLASH\r\n                if (evt) {\r\n                    evt.preventDefault();\r\n                }\r\n                break;\r\n            case 8: // BACKSPACE\r\n                if (this._textWrapper.text && this._textWrapper.length > 0) {\r\n                    //delete the highlighted text\r\n                    if (this.isTextHighlightOn) {\r\n                        this._textWrapper.removePart(this._startHighlightIndex, this._endHighlightIndex);\r\n                        this._textHasChanged();\r\n                        this.isTextHighlightOn = false;\r\n                        this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;\r\n                        this._blinkIsEven = false;\r\n                        if (evt) {\r\n                            evt.preventDefault();\r\n                        }\r\n                        return;\r\n                    }\r\n                    //delete single character\r\n                    if (this._cursorOffset === 0) {\r\n                        this.text = this._textWrapper.substr(0, this._textWrapper.length - 1);\r\n                    } else {\r\n                        const deletePosition = this._textWrapper.length - this._cursorOffset;\r\n                        if (deletePosition > 0) {\r\n                            this._textWrapper.removePart(deletePosition - 1, deletePosition);\r\n                            this._textHasChanged();\r\n                        }\r\n                    }\r\n                }\r\n                if (evt) {\r\n                    evt.preventDefault();\r\n                }\r\n                return;\r\n            case 46: // DELETE\r\n                if (this.isTextHighlightOn) {\r\n                    this._textWrapper.removePart(this._startHighlightIndex, this._endHighlightIndex);\r\n                    this._textHasChanged();\r\n                    this.isTextHighlightOn = false;\r\n                    this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;\r\n                    if (evt) {\r\n                        evt.preventDefault();\r\n                    }\r\n                    return;\r\n                }\r\n                if (this._textWrapper.text && this._textWrapper.length > 0 && this._cursorOffset > 0) {\r\n                    const deletePosition = this._textWrapper.length - this._cursorOffset;\r\n                    this._textWrapper.removePart(deletePosition, deletePosition + 1);\r\n                    this._textHasChanged();\r\n                    this._cursorOffset--;\r\n                }\r\n                if (evt) {\r\n                    evt.preventDefault();\r\n                }\r\n                return;\r\n            case 13: // RETURN\r\n                this._host.focusedControl = null;\r\n                this.isTextHighlightOn = false;\r\n                return;\r\n            case 35: // END\r\n                this._cursorOffset = 0;\r\n                this._blinkIsEven = false;\r\n                this.isTextHighlightOn = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 36: // HOME\r\n                this._cursorOffset = this._textWrapper.length;\r\n                this._blinkIsEven = false;\r\n                this.isTextHighlightOn = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 37: // LEFT\r\n                this._cursorOffset++;\r\n                if (this._cursorOffset > this._textWrapper.length) {\r\n                    this._cursorOffset = this._textWrapper.length;\r\n                }\r\n\r\n                if (evt && evt.shiftKey) {\r\n                    // update the cursor\r\n                    this._blinkIsEven = false;\r\n                    // shift + ctrl/cmd + <-\r\n                    if (evt.ctrlKey || evt.metaKey) {\r\n                        if (!this.isTextHighlightOn) {\r\n                            if (this._textWrapper.length === this._cursorOffset) {\r\n                                return;\r\n                            } else {\r\n                                this._endHighlightIndex = this._textWrapper.length - this._cursorOffset + 1;\r\n                            }\r\n                        }\r\n                        this._startHighlightIndex = 0;\r\n                        this._cursorIndex = this._textWrapper.length - this._endHighlightIndex;\r\n                        this._cursorOffset = this._textWrapper.length;\r\n                        this.isTextHighlightOn = true;\r\n                        this._markAsDirty();\r\n                        return;\r\n                    }\r\n                    //store the starting point\r\n                    if (!this.isTextHighlightOn) {\r\n                        this.isTextHighlightOn = true;\r\n                        this._cursorIndex = this._cursorOffset >= this._textWrapper.length ? this._textWrapper.length : this._cursorOffset - 1;\r\n                    }\r\n                    //if text is already highlighted\r\n                    else if (this._cursorIndex === -1) {\r\n                        this._cursorIndex = this._textWrapper.length - this._endHighlightIndex;\r\n                        this._cursorOffset = this._startHighlightIndex === 0 ? this._textWrapper.length : this._textWrapper.length - this._startHighlightIndex + 1;\r\n                    }\r\n                    //set the highlight indexes\r\n                    if (this._cursorIndex < this._cursorOffset) {\r\n                        this._endHighlightIndex = this._textWrapper.length - this._cursorIndex;\r\n                        this._startHighlightIndex = this._textWrapper.length - this._cursorOffset;\r\n                    } else if (this._cursorIndex > this._cursorOffset) {\r\n                        this._endHighlightIndex = this._textWrapper.length - this._cursorOffset;\r\n                        this._startHighlightIndex = this._textWrapper.length - this._cursorIndex;\r\n                    } else {\r\n                        this.isTextHighlightOn = false;\r\n                    }\r\n                    this._markAsDirty();\r\n                    return;\r\n                }\r\n                if (this.isTextHighlightOn) {\r\n                    this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;\r\n                    this.isTextHighlightOn = false;\r\n                }\r\n                if (evt && (evt.ctrlKey || evt.metaKey)) {\r\n                    this._cursorOffset = this._textWrapper.length;\r\n                    evt.preventDefault();\r\n                }\r\n                this._blinkIsEven = false;\r\n                this.isTextHighlightOn = false;\r\n                this._cursorIndex = -1;\r\n                this._markAsDirty();\r\n                return;\r\n            case 39: // RIGHT\r\n                this._cursorOffset--;\r\n                if (this._cursorOffset < 0) {\r\n                    this._cursorOffset = 0;\r\n                }\r\n                if (evt && evt.shiftKey) {\r\n                    //update the cursor\r\n                    this._blinkIsEven = false;\r\n                    //shift + ctrl/cmd + ->\r\n                    if (evt.ctrlKey || evt.metaKey) {\r\n                        if (!this.isTextHighlightOn) {\r\n                            if (this._cursorOffset === 0) {\r\n                                return;\r\n                            } else {\r\n                                this._startHighlightIndex = this._textWrapper.length - this._cursorOffset - 1;\r\n                            }\r\n                        }\r\n                        this._endHighlightIndex = this._textWrapper.length;\r\n                        this.isTextHighlightOn = true;\r\n                        this._cursorIndex = this._textWrapper.length - this._startHighlightIndex;\r\n                        this._cursorOffset = 0;\r\n                        this._markAsDirty();\r\n                        return;\r\n                    }\r\n\r\n                    if (!this.isTextHighlightOn) {\r\n                        this.isTextHighlightOn = true;\r\n                        this._cursorIndex = this._cursorOffset <= 0 ? 0 : this._cursorOffset + 1;\r\n                    }\r\n                    //if text is already highlighted\r\n                    else if (this._cursorIndex === -1) {\r\n                        this._cursorIndex = this._textWrapper.length - this._startHighlightIndex;\r\n                        this._cursorOffset = this._textWrapper.length === this._endHighlightIndex ? 0 : this._textWrapper.length - this._endHighlightIndex - 1;\r\n                    }\r\n                    //set the highlight indexes\r\n                    if (this._cursorIndex < this._cursorOffset) {\r\n                        this._endHighlightIndex = this._textWrapper.length - this._cursorIndex;\r\n                        this._startHighlightIndex = this._textWrapper.length - this._cursorOffset;\r\n                    } else if (this._cursorIndex > this._cursorOffset) {\r\n                        this._endHighlightIndex = this._textWrapper.length - this._cursorOffset;\r\n                        this._startHighlightIndex = this._textWrapper.length - this._cursorIndex;\r\n                    } else {\r\n                        this.isTextHighlightOn = false;\r\n                    }\r\n                    this._markAsDirty();\r\n                    return;\r\n                }\r\n                if (this.isTextHighlightOn) {\r\n                    this._cursorOffset = this._textWrapper.length - this._endHighlightIndex;\r\n                    this.isTextHighlightOn = false;\r\n                }\r\n                //ctr + ->\r\n                if (evt && (evt.ctrlKey || evt.metaKey)) {\r\n                    this._cursorOffset = 0;\r\n                    evt.preventDefault();\r\n                }\r\n                this._blinkIsEven = false;\r\n                this.isTextHighlightOn = false;\r\n                this._cursorIndex = -1;\r\n                this._markAsDirty();\r\n                return;\r\n        }\r\n        if (keyCode === 32) {\r\n            key = evt?.key ?? \" \";\r\n        }\r\n        this._deadKey = key === \"Dead\";\r\n        // Printable characters\r\n        if (\r\n            key &&\r\n            (keyCode === -1 || // Direct access\r\n                keyCode === 32 || // Space\r\n                keyCode === 34 || // \"    add support for single and double quotes\r\n                keyCode === 39 || // '\r\n                (keyCode > 47 && keyCode < 64) || // Numbers\r\n                (keyCode > 64 && keyCode < 91) || // Letters\r\n                (keyCode > 159 && keyCode < 193) || // Special characters\r\n                (keyCode > 218 && keyCode < 223) || // Special characters\r\n                (keyCode > 95 && keyCode < 112))\r\n        ) {\r\n            // Numpad\r\n            this._currentKey = key;\r\n            this.onBeforeKeyAddObservable.notifyObservers(this);\r\n            key = this._currentKey;\r\n            if (this._addKey && !this._deadKey) {\r\n                if (this.isTextHighlightOn) {\r\n                    this._textWrapper.removePart(this._startHighlightIndex, this._endHighlightIndex, key);\r\n                    this._textHasChanged();\r\n                    this._cursorOffset = this._textWrapper.length - (this._startHighlightIndex + 1);\r\n                    this.isTextHighlightOn = false;\r\n                    this._blinkIsEven = false;\r\n                    this._markAsDirty();\r\n                } else if (this._cursorOffset === 0) {\r\n                    this.text += this._deadKey && evt?.key ? evt.key : key;\r\n                } else {\r\n                    const insertPosition = this._textWrapper.length - this._cursorOffset;\r\n                    this._textWrapper.removePart(insertPosition, insertPosition, key);\r\n                    this._textHasChanged();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _updateValueFromCursorIndex(offset: number) {\r\n        //update the cursor\r\n        this._blinkIsEven = false;\r\n\r\n        if (this._cursorIndex === -1) {\r\n            this._cursorIndex = offset;\r\n        } else {\r\n            if (this._cursorIndex < this._cursorOffset) {\r\n                this._endHighlightIndex = this._textWrapper.length - this._cursorIndex;\r\n                this._startHighlightIndex = this._textWrapper.length - this._cursorOffset;\r\n            } else if (this._cursorIndex > this._cursorOffset) {\r\n                this._endHighlightIndex = this._textWrapper.length - this._cursorOffset;\r\n                this._startHighlightIndex = this._textWrapper.length - this._cursorIndex;\r\n            } else {\r\n                this.isTextHighlightOn = false;\r\n                this._markAsDirty();\r\n                return;\r\n            }\r\n        }\r\n        this.isTextHighlightOn = true;\r\n        this._markAsDirty();\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _processDblClick(evt: PointerInfo) {\r\n        //pre-find the start and end index of the word under cursor, speeds up the rendering\r\n        this._startHighlightIndex = this._textWrapper.length - this._cursorOffset;\r\n        this._endHighlightIndex = this._startHighlightIndex;\r\n        let moveLeft, moveRight;\r\n        do {\r\n            moveRight = this._endHighlightIndex < this._textWrapper.length && this._textWrapper.isWord(this._endHighlightIndex) ? ++this._endHighlightIndex : 0;\r\n            moveLeft = this._startHighlightIndex > 0 && this._textWrapper.isWord(this._startHighlightIndex - 1) ? --this._startHighlightIndex : 0;\r\n        } while (moveLeft || moveRight);\r\n\r\n        this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;\r\n\r\n        this.isTextHighlightOn = true;\r\n        this._clickedCoordinate = null;\r\n        this._blinkIsEven = true;\r\n        this._cursorIndex = -1;\r\n        this._markAsDirty();\r\n    }\r\n    /** @internal */\r\n    protected _selectAllText() {\r\n        this._blinkIsEven = true;\r\n        this.isTextHighlightOn = true;\r\n\r\n        this._startHighlightIndex = 0;\r\n        this._endHighlightIndex = this._textWrapper.length;\r\n        this._cursorOffset = this._textWrapper.length;\r\n        this._cursorIndex = -1;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Handles the keyboard event\r\n     * @param evt Defines the KeyboardEvent\r\n     */\r\n    public processKeyboard(evt: IKeyboardEvent): void {\r\n        // process pressed key\r\n        this.processKey(evt.keyCode, evt.key, evt);\r\n\r\n        this.onKeyboardEventProcessedObservable.notifyObservers(evt);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _onCopyText(ev: ClipboardEvent): void {\r\n        this.isTextHighlightOn = false;\r\n        //when write permission to clipbaord data is denied\r\n        try {\r\n            ev.clipboardData && ev.clipboardData.setData(\"text/plain\", this._highlightedText);\r\n        } catch {} //pass\r\n        this._host.clipboardData = this._highlightedText;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _onCutText(ev: ClipboardEvent): void {\r\n        if (!this._highlightedText) {\r\n            return;\r\n        }\r\n        this._textWrapper.removePart(this._startHighlightIndex, this._endHighlightIndex);\r\n        this._textHasChanged();\r\n        this.isTextHighlightOn = false;\r\n        this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;\r\n        //when write permission to clipbaord data is denied\r\n        try {\r\n            ev.clipboardData && ev.clipboardData.setData(\"text/plain\", this._highlightedText);\r\n        } catch {} //pass\r\n\r\n        this._host.clipboardData = this._highlightedText;\r\n        this._highlightedText = \"\";\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _onPasteText(ev: ClipboardEvent): void {\r\n        let data: string = \"\";\r\n        if (ev.clipboardData && ev.clipboardData.types.indexOf(\"text/plain\") !== -1) {\r\n            data = ev.clipboardData.getData(\"text/plain\");\r\n        } else {\r\n            //get the cached data; returns blank string by default\r\n            data = this._host.clipboardData;\r\n        }\r\n        const insertPosition = this._textWrapper.length - this._cursorOffset;\r\n        this._textWrapper.removePart(insertPosition, insertPosition, data);\r\n        this._textHasChanged();\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        // Background\r\n        if (this._isFocused) {\r\n            if (this._focusedBackground) {\r\n                context.fillStyle = this._isEnabled ? this._focusedBackground : this._disabledColor;\r\n\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        } else if (this._background) {\r\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n\r\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (!this._fontOffset || this._wasDirty) {\r\n            this._fontOffset = Control._GetFontOffset(context.font);\r\n        }\r\n\r\n        // Text\r\n        const clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, this._tempParentMeasure.width);\r\n        if (this.color) {\r\n            context.fillStyle = this.color;\r\n        }\r\n\r\n        let text = this._beforeRenderText(this._textWrapper);\r\n\r\n        if (!this._isFocused && !this._textWrapper.text && this._placeholderText) {\r\n            text = new TextWrapper();\r\n            text.text = this._placeholderText;\r\n\r\n            if (this._placeholderColor) {\r\n                context.fillStyle = this._placeholderColor;\r\n            }\r\n        }\r\n\r\n        this._textWidth = context.measureText(text.text).width;\r\n        const marginWidth = this._margin.getValueInPixel(this._host, this._tempParentMeasure.width) * 2;\r\n        if (this._autoStretchWidth) {\r\n            this.width = Math.min(this._maxWidth.getValueInPixel(this._host, this._tempParentMeasure.width), this._textWidth + marginWidth) + \"px\";\r\n            this._autoStretchWidth = true; // setting the width will have reset _autoStretchWidth to false!\r\n        }\r\n\r\n        const rootY = this._fontOffset.ascent + (this._currentMeasure.height - this._fontOffset.height) / 2;\r\n        const availableWidth = this._width.getValueInPixel(this._host, this._tempParentMeasure.width) - marginWidth;\r\n\r\n        context.save();\r\n        context.beginPath();\r\n        context.rect(clipTextLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, availableWidth + 2, this._currentMeasure.height);\r\n        context.clip();\r\n\r\n        if (this._isFocused && this._textWidth > availableWidth) {\r\n            const textLeft = clipTextLeft - this._textWidth + availableWidth;\r\n            if (!this._scrollLeft) {\r\n                this._scrollLeft = textLeft;\r\n            }\r\n        } else {\r\n            this._scrollLeft = clipTextLeft;\r\n        }\r\n\r\n        context.fillText(text.text, this._scrollLeft, this._currentMeasure.top + rootY);\r\n\r\n        // Cursor\r\n        if (this._isFocused) {\r\n            // Need to move cursor\r\n            if (this._clickedCoordinate) {\r\n                const rightPosition = this._scrollLeft + this._textWidth;\r\n                const absoluteCursorPosition = rightPosition - this._clickedCoordinate;\r\n                let currentSize = 0;\r\n                this._cursorOffset = 0;\r\n                let previousDist = 0;\r\n                do {\r\n                    if (this._cursorOffset) {\r\n                        previousDist = Math.abs(absoluteCursorPosition - currentSize);\r\n                    }\r\n                    this._cursorOffset++;\r\n                    currentSize = context.measureText(text.substr(text.length - this._cursorOffset, this._cursorOffset)).width;\r\n                } while (currentSize < absoluteCursorPosition && text.length >= this._cursorOffset);\r\n\r\n                // Find closest move\r\n                if (Math.abs(absoluteCursorPosition - currentSize) > previousDist) {\r\n                    this._cursorOffset--;\r\n                }\r\n\r\n                this._blinkIsEven = false;\r\n                this._clickedCoordinate = null;\r\n            }\r\n\r\n            // Render cursor\r\n            if (!this._blinkIsEven) {\r\n                const cursorOffsetText = text.substr(text.length - this._cursorOffset);\r\n                const cursorOffsetWidth = context.measureText(cursorOffsetText).width;\r\n                let cursorLeft = this._scrollLeft + this._textWidth - cursorOffsetWidth;\r\n\r\n                if (cursorLeft < clipTextLeft) {\r\n                    this._scrollLeft += clipTextLeft - cursorLeft;\r\n                    cursorLeft = clipTextLeft;\r\n                    this._markAsDirty();\r\n                } else if (cursorLeft > clipTextLeft + availableWidth) {\r\n                    this._scrollLeft += clipTextLeft + availableWidth - cursorLeft;\r\n                    cursorLeft = clipTextLeft + availableWidth;\r\n                    this._markAsDirty();\r\n                }\r\n                if (!this.isTextHighlightOn) {\r\n                    context.fillRect(cursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, 2, this._fontOffset.height);\r\n                }\r\n            }\r\n\r\n            clearTimeout(this._blinkTimeout);\r\n            this._blinkTimeout = <any>setTimeout(() => {\r\n                this._blinkIsEven = !this._blinkIsEven;\r\n                this._markAsDirty();\r\n            }, 500);\r\n\r\n            //show the highlighted text\r\n            if (this.isTextHighlightOn) {\r\n                clearTimeout(this._blinkTimeout);\r\n                const highlightCursorOffsetWidth = context.measureText(text.substring(this._startHighlightIndex)).width;\r\n                let highlightCursorLeft = this._scrollLeft + this._textWidth - highlightCursorOffsetWidth;\r\n                this._highlightedText = text.substring(this._startHighlightIndex, this._endHighlightIndex);\r\n                let width = context.measureText(text.substring(this._startHighlightIndex, this._endHighlightIndex)).width;\r\n                if (highlightCursorLeft < clipTextLeft) {\r\n                    width = width - (clipTextLeft - highlightCursorLeft);\r\n                    if (!width) {\r\n                        // when using left arrow on text.length > availableWidth;\r\n                        // assigns the width of the first letter after clipTextLeft\r\n                        width = context.measureText(text.charAt(text.length - this._cursorOffset)).width;\r\n                    }\r\n                    highlightCursorLeft = clipTextLeft;\r\n                }\r\n                //for transparancy\r\n                context.globalAlpha = this._highligherOpacity;\r\n                context.fillStyle = this._textHighlightColor;\r\n                context.fillRect(highlightCursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, width, this._fontOffset.height);\r\n                context.globalAlpha = 1.0;\r\n            }\r\n        }\r\n        context.restore();\r\n\r\n        // Border\r\n        if (this._thickness) {\r\n            if (this._isFocused) {\r\n                if (this.focusedColor) {\r\n                    context.strokeStyle = this.focusedColor;\r\n                }\r\n            } else {\r\n                if (this.color) {\r\n                    context.strokeStyle = this.color;\r\n                }\r\n            }\r\n\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.strokeRect(\r\n                this._currentMeasure.left + this._thickness / 2,\r\n                this._currentMeasure.top + this._thickness / 2,\r\n                this._currentMeasure.width - this._thickness,\r\n                this._currentMeasure.height - this._thickness\r\n            );\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isReadOnly) {\r\n            return true;\r\n        }\r\n\r\n        this._clickedCoordinate = coordinates.x;\r\n        this.isTextHighlightOn = false;\r\n        this._highlightedText = \"\";\r\n        this._cursorIndex = -1;\r\n        this._isPointerDown = true;\r\n        this._host._capturingControl[pointerId] = this;\r\n        this._focusedBy = (pi.event as IPointerEvent).pointerType;\r\n        if (this._host.focusedControl === this) {\r\n            // Move cursor\r\n            clearTimeout(this._blinkTimeout);\r\n            this._markAsDirty();\r\n            return true;\r\n        }\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        this._host.focusedControl = this;\r\n\r\n        return true;\r\n    }\r\n    public _onPointerMove(target: Control, coordinates: Vector2, pointerId: number, pi: PointerInfoBase): void {\r\n        if (this._host.focusedControl === this && this._isPointerDown && !this.isReadOnly) {\r\n            this._clickedCoordinate = coordinates.x;\r\n            this._markAsDirty();\r\n            this._updateValueFromCursorIndex(this._cursorOffset);\r\n        }\r\n        super._onPointerMove(target, coordinates, pointerId, pi);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._isPointerDown = false;\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    protected _beforeRenderText(textWrapper: TextWrapper): TextWrapper {\r\n        return textWrapper;\r\n    }\r\n\r\n    /** @internal */\r\n    private set isTextHighlightOn(value: boolean) {\r\n        if (this._isTextHighlightOn === value) {\r\n            return;\r\n        }\r\n        if (value) {\r\n            this.onTextHighlightObservable.notifyObservers(this);\r\n        }\r\n        this._isTextHighlightOn = value;\r\n    }\r\n\r\n    /** @internal */\r\n    private get isTextHighlightOn(): boolean {\r\n        return this._isTextHighlightOn;\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this.onBlurObservable.clear();\r\n        this.onFocusObservable.clear();\r\n        this.onTextChangedObservable.clear();\r\n        this.onTextCopyObservable.clear();\r\n        this.onTextCutObservable.clear();\r\n        this.onTextPasteObservable.clear();\r\n        this.onTextHighlightObservable.clear();\r\n        this.onKeyboardEventProcessedObservable.clear();\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.InputText\", InputText);\r\n","import type { Nullable } from \"core/types\";\r\n\r\nimport { Container } from \"./container\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\nimport type { Measure } from \"../measure\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport type { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\n\r\n/**\r\n * Class used to create a 2D grid container\r\n */\r\nexport class Grid extends Container {\r\n    private _rowDefinitions = new Array<ValueAndUnit>();\r\n    private _rowDefinitionObservers: Observer<void>[] = [];\r\n    private _columnDefinitions = new Array<ValueAndUnit>();\r\n    private _columnDefinitionObservers: Observer<void>[] = [];\r\n    private _cells: { [key: string]: Container } = {};\r\n    private _childControls = new Array<Control>();\r\n\r\n    /**\r\n     * Gets the number of columns\r\n     */\r\n    public get columnCount(): number {\r\n        return this._columnDefinitions.length;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of rows\r\n     */\r\n    public get rowCount(): number {\r\n        return this._rowDefinitions.length;\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._childControls;\r\n    }\r\n\r\n    /** Gets the list of cells (e.g. the containers) */\r\n    public get cells(): { [key: string]: Container } {\r\n        return this._cells;\r\n    }\r\n\r\n    /**\r\n     * Gets the definition of a specific row\r\n     * @param index defines the index of the row\r\n     * @returns the row definition\r\n     */\r\n    public getRowDefinition(index: number): Nullable<ValueAndUnit> {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return null;\r\n        }\r\n\r\n        return this._rowDefinitions[index];\r\n    }\r\n\r\n    /**\r\n     * Gets the definition of a specific column\r\n     * @param index defines the index of the column\r\n     * @returns the column definition\r\n     */\r\n    public getColumnDefinition(index: number): Nullable<ValueAndUnit> {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return null;\r\n        }\r\n\r\n        return this._columnDefinitions[index];\r\n    }\r\n\r\n    /**\r\n     * Adds a new row to the grid\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the height is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addRowDefinition(height: number, isPixel = false): Grid {\r\n        this._rowDefinitions.push(new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n        this._rowDefinitionObservers.push(this._rowDefinitions[this.rowCount - 1].onChangedObservable.add(() => this._markAsDirty())!);\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new column to the grid\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addColumnDefinition(width: number, isPixel = false): Grid {\r\n        this._columnDefinitions.push(new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n        this._columnDefinitionObservers.push(this._columnDefinitions[this.columnCount - 1].onChangedObservable.add(() => this._markAsDirty())!);\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a row definition\r\n     * @param index defines the index of the row to update\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the weight is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setRowDefinition(index: number, height: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        const current = this._rowDefinitions[index];\r\n        if (current && current.isPixel === isPixel && current.value === height) {\r\n            return this;\r\n        }\r\n\r\n        this._rowDefinitions[index].onChangedObservable.remove(this._rowDefinitionObservers[index]);\r\n        this._rowDefinitions[index] = new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n        this._rowDefinitionObservers[index] = this._rowDefinitions[index].onChangedObservable.add(() => this._markAsDirty())!;\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a column definition\r\n     * @param index defines the index of the column to update\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setColumnDefinition(index: number, width: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        const current = this._columnDefinitions[index];\r\n        if (current && current.isPixel === isPixel && current.value === width) {\r\n            return this;\r\n        }\r\n\r\n        this._columnDefinitions[index].onChangedObservable.remove(this._columnDefinitionObservers[index]);\r\n        this._columnDefinitions[index] = new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n        this._columnDefinitionObservers[index] = this._columnDefinitions[index].onChangedObservable.add(() => this._markAsDirty())!;\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of children stored in a specific cell\r\n     * @param row defines the row to check\r\n     * @param column defines the column to check\r\n     * @returns the list of controls\r\n     */\r\n    public getChildrenAt(row: number, column: number): Nullable<Array<Control>> {\r\n        const cell = this._cells[`${row}:${column}`];\r\n\r\n        if (!cell) {\r\n            return null;\r\n        }\r\n\r\n        return cell.children;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representing the child cell info (row x column)\r\n     * @param child defines the control to get info from\r\n     * @returns a string containing the child cell info (row x column)\r\n     */\r\n    public getChildCellInfo(child: Control): string {\r\n        return child._tag;\r\n    }\r\n\r\n    private _removeCell(cell: Container, key: string) {\r\n        if (!cell) {\r\n            return;\r\n        }\r\n\r\n        super.removeControl(cell);\r\n\r\n        for (const control of cell.children) {\r\n            const childIndex = this._childControls.indexOf(control);\r\n\r\n            if (childIndex !== -1) {\r\n                this._childControls.splice(childIndex, 1);\r\n            }\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    private _offsetCell(previousKey: string, key: string) {\r\n        if (!this._cells[key]) {\r\n            return;\r\n        }\r\n\r\n        this._cells[previousKey] = this._cells[key];\r\n\r\n        for (const control of this._cells[previousKey].children) {\r\n            control._tag = previousKey;\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    /**\r\n     * Remove a column definition at specified index\r\n     * @param index defines the index of the column to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeColumnDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (let x = 0; x < this._rowDefinitions.length; x++) {\r\n            const key = `${x}:${index}`;\r\n            const cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (let x = 0; x < this._rowDefinitions.length; x++) {\r\n            for (let y = index + 1; y < this._columnDefinitions.length; y++) {\r\n                const previousKey = `${x}:${y - 1}`;\r\n                const key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._columnDefinitions[index].onChangedObservable.remove(this._columnDefinitionObservers[index]);\r\n        this._columnDefinitions.splice(index, 1);\r\n        this._columnDefinitionObservers.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a row definition at specified index\r\n     * @param index defines the index of the row to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeRowDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (let y = 0; y < this._columnDefinitions.length; y++) {\r\n            const key = `${index}:${y}`;\r\n            const cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (let y = 0; y < this._columnDefinitions.length; y++) {\r\n            for (let x = index + 1; x < this._rowDefinitions.length; x++) {\r\n                const previousKey = `${x - 1}:${y}`;\r\n                const key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._rowDefinitions[index].onChangedObservable.remove(this._rowDefinitionObservers[index]);\r\n        this._rowDefinitions.splice(index, 1);\r\n        this._rowDefinitionObservers.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current grid\r\n     * @param control defines the control to add\r\n     * @param row defines the row where to add the control (0 by default)\r\n     * @param column defines the column where to add the control (0 by default)\r\n     * @returns the current grid\r\n     */\r\n    public addControl(control: Control, row: number = 0, column: number = 0): Grid {\r\n        if (this._rowDefinitions.length === 0) {\r\n            // Add default row definition\r\n            this.addRowDefinition(1, false);\r\n        }\r\n\r\n        if (this._columnDefinitions.length === 0) {\r\n            // Add default column definition\r\n            this.addColumnDefinition(1, false);\r\n        }\r\n\r\n        if (this._childControls.indexOf(control) !== -1) {\r\n            Tools.Warn(`Control (Name:${control.name}, UniqueId:${control.uniqueId}) is already associated with this grid. You must remove it before reattaching it`);\r\n            return this;\r\n        }\r\n\r\n        const x = Math.min(row, this._rowDefinitions.length - 1);\r\n        const y = Math.min(column, this._columnDefinitions.length - 1);\r\n        const key = `${x}:${y}`;\r\n        let goodContainer = this._cells[key];\r\n\r\n        if (!goodContainer) {\r\n            goodContainer = new Container(key);\r\n            this._cells[key] = goodContainer;\r\n            goodContainer.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            goodContainer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            super.addControl(goodContainer);\r\n        }\r\n\r\n        goodContainer.addControl(control);\r\n        this._childControls.push(control);\r\n        control._tag = key;\r\n        control.parent = this;\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        const index = this._childControls.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._childControls.splice(index, 1);\r\n        }\r\n\r\n        const cell = this._cells[control._tag];\r\n\r\n        if (cell) {\r\n            cell.removeControl(control);\r\n            control._tag = null;\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Grid\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Grid\";\r\n    }\r\n\r\n    protected _getGridDefinitions(definitionCallback: (lefts: number[], tops: number[], widths: number[], heights: number[]) => void) {\r\n        const widths = [];\r\n        const heights = [];\r\n        const lefts = [];\r\n        const tops = [];\r\n\r\n        let availableWidth = this._currentMeasure.width;\r\n        let globalWidthPercentage = 0;\r\n        let availableHeight = this._currentMeasure.height;\r\n        let globalHeightPercentage = 0;\r\n\r\n        // Heights\r\n        let index = 0;\r\n        for (const rowDefinition of this._rowDefinitions) {\r\n            if (rowDefinition.isPixel) {\r\n                const height = rowDefinition.getValue(this._host);\r\n                availableHeight -= height;\r\n                heights[index] = height;\r\n            } else {\r\n                globalHeightPercentage += rowDefinition.value;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let top = 0;\r\n        index = 0;\r\n        for (const rowDefinition of this._rowDefinitions) {\r\n            tops.push(top);\r\n\r\n            if (!rowDefinition.isPixel) {\r\n                const height = (rowDefinition.value / globalHeightPercentage) * availableHeight;\r\n                top += height;\r\n                heights[index] = height;\r\n            } else {\r\n                top += rowDefinition.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Widths\r\n        index = 0;\r\n        for (const columnDefinition of this._columnDefinitions) {\r\n            if (columnDefinition.isPixel) {\r\n                const width = columnDefinition.getValue(this._host);\r\n                availableWidth -= width;\r\n                widths[index] = width;\r\n            } else {\r\n                globalWidthPercentage += columnDefinition.value;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let left = 0;\r\n        index = 0;\r\n        for (const columnDefinition of this._columnDefinitions) {\r\n            lefts.push(left);\r\n            if (!columnDefinition.isPixel) {\r\n                const width = (columnDefinition.value / globalWidthPercentage) * availableWidth;\r\n                left += width;\r\n                widths[index] = width;\r\n            } else {\r\n                left += columnDefinition.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        definitionCallback(lefts, tops, widths, heights);\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        this._getGridDefinitions((lefts: number[], tops: number[], widths: number[], heights: number[]) => {\r\n            // Setting child sizes\r\n            for (const key in this._cells) {\r\n                if (!Object.prototype.hasOwnProperty.call(this._cells, key)) {\r\n                    continue;\r\n                }\r\n                const split = key.split(\":\");\r\n                const x = parseInt(split[0]);\r\n                const y = parseInt(split[1]);\r\n                const cell = this._cells[key];\r\n\r\n                cell.left = lefts[y] + \"px\";\r\n                cell.top = tops[x] + \"px\";\r\n                cell.width = widths[y] + \"px\";\r\n                cell.height = heights[x] + \"px\";\r\n                cell._left.ignoreAdaptiveScaling = true;\r\n                cell._top.ignoreAdaptiveScaling = true;\r\n                cell._width.ignoreAdaptiveScaling = true;\r\n                cell._height.ignoreAdaptiveScaling = true;\r\n            }\r\n        });\r\n\r\n        super._additionalProcessing(parentMeasure, context);\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (const key in this._cells) {\r\n            if (!Object.prototype.hasOwnProperty.call(this._cells, key)) {\r\n                continue;\r\n            }\r\n\r\n            const child = this._cells[key];\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    public _renderHighlightSpecific(context: ICanvasRenderingContext): void {\r\n        super._renderHighlightSpecific(context);\r\n\r\n        this._getGridDefinitions((lefts: number[], tops: number[], widths: number[], heights: number[]) => {\r\n            // Columns\r\n            for (let index = 0; index < lefts.length; index++) {\r\n                const left = this._currentMeasure.left + lefts[index] + widths[index];\r\n                context.beginPath();\r\n                context.moveTo(left, this._currentMeasure.top);\r\n                context.lineTo(left, this._currentMeasure.top + this._currentMeasure.height);\r\n                context.stroke();\r\n            }\r\n\r\n            // Rows\r\n            for (let index = 0; index < tops.length; index++) {\r\n                const top = this._currentMeasure.top + tops[index] + heights[index];\r\n                context.beginPath();\r\n                context.moveTo(this._currentMeasure.left, top);\r\n                context.lineTo(this._currentMeasure.left + this._currentMeasure.width, top);\r\n                context.stroke();\r\n            }\r\n        });\r\n\r\n        context.restore();\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (const control of this._childControls) {\r\n            control.dispose();\r\n        }\r\n        for (let index = 0; index < this._rowDefinitions.length; index++) {\r\n            this._rowDefinitions[index].onChangedObservable.remove(this._rowDefinitionObservers[index]);\r\n        }\r\n        for (let index = 0; index < this._columnDefinitions.length; index++) {\r\n            this._columnDefinitions[index].onChangedObservable.remove(this._columnDefinitionObservers[index]);\r\n        }\r\n        this._rowDefinitionObservers.length = 0;\r\n        this._rowDefinitions.length = 0;\r\n        this._columnDefinitionObservers.length = 0;\r\n        this._columnDefinitions.length = 0;\r\n        this._cells = {};\r\n        this._childControls.length = 0;\r\n    }\r\n\r\n    /**\r\n     * Serializes the current control\r\n     * @param serializationObject defined the JSON serialized object\r\n     */\r\n    public serialize(serializationObject: any) {\r\n        super.serialize(serializationObject);\r\n        serializationObject.columnCount = this.columnCount;\r\n        serializationObject.rowCount = this.rowCount;\r\n        serializationObject.columns = [];\r\n        serializationObject.rows = [];\r\n        serializationObject.tags = [];\r\n        for (let i = 0; i < this.columnCount; ++i) {\r\n            const cd = this.getColumnDefinition(i);\r\n            const childSerializationObject = { value: cd?.getValue(this.host), unit: cd?.unit };\r\n            serializationObject.columns.push(childSerializationObject);\r\n        }\r\n        for (let i = 0; i < this.rowCount; ++i) {\r\n            const rd = this.getRowDefinition(i);\r\n            const childSerializationObject = { value: rd?.getValue(this.host), unit: rd?.unit };\r\n            serializationObject.rows.push(childSerializationObject);\r\n        }\r\n        this.children.forEach((child) => {\r\n            serializationObject.tags.push(child._tag);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        super._parseFromContent(serializedObject, host);\r\n        const children: Control[] = [];\r\n        this.children.forEach((child) => {\r\n            children.push(child);\r\n        });\r\n        this.removeRowDefinition(0);\r\n        this.removeColumnDefinition(0);\r\n        for (let i = 0; i < serializedObject.columnCount; ++i) {\r\n            const columnValue = serializedObject.columns[i].value;\r\n            const unit = serializedObject.columns[i].unit;\r\n            this.addColumnDefinition(columnValue, unit === 1 ? true : false);\r\n        }\r\n        for (let i = 0; i < serializedObject.rowCount; ++i) {\r\n            const rowValue = serializedObject.rows[i].value;\r\n            const unit = serializedObject.rows[i].unit;\r\n            this.addRowDefinition(rowValue, unit === 1 ? true : false);\r\n        }\r\n\r\n        for (let i = 0; i < children.length; ++i) {\r\n            const cellInfo = serializedObject.tags[i];\r\n            let rowNumber = parseInt(cellInfo.substring(0, cellInfo.search(\":\")));\r\n            if (isNaN(rowNumber)) {\r\n                rowNumber = 0;\r\n            }\r\n            let columnNumber = parseInt(cellInfo.substring(cellInfo.search(\":\") + 1));\r\n            if (isNaN(columnNumber)) {\r\n                columnNumber = 0;\r\n            }\r\n            this.addControl(children[i], rowNumber, columnNumber);\r\n        }\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Grid\", Grid);\r\n","import { Observable } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Control } from \"./control\";\r\nimport type { Measure } from \"../measure\";\r\nimport { InputText } from \"./inputText\";\r\nimport { Rectangle } from \"./rectangle\";\r\nimport { Button } from \"./button\";\r\nimport { Grid } from \"./grid\";\r\nimport type { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { TextBlock } from \"../controls/textBlock\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvas, ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport { EngineStore } from \"core/Engines/engineStore\";\r\n\r\n/** Class used to create color pickers */\r\nexport class ColorPicker extends Control {\r\n    private static _Epsilon = 0.000001;\r\n    private _colorWheelCanvas: ICanvas;\r\n\r\n    private _value: Color3 = Color3.Red();\r\n    private _tmpColor = new Color3();\r\n\r\n    private _pointerStartedOnSquare = false;\r\n    private _pointerStartedOnWheel = false;\r\n\r\n    private _squareLeft = 0;\r\n    private _squareTop = 0;\r\n    private _squareSize = 0;\r\n\r\n    private _h = 360;\r\n    private _s = 1;\r\n    private _v = 1;\r\n\r\n    private _lastPointerDownId = -1;\r\n\r\n    /**\r\n     * Observable raised when the value changes\r\n     */\r\n    public onValueChangedObservable = new Observable<Color3>();\r\n\r\n    /** Gets or sets the color of the color picker */\r\n    @serialize()\r\n    public get value(): Color3 {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: Color3) {\r\n        if (this._value.equals(value)) {\r\n            return;\r\n        }\r\n\r\n        this._value.copyFrom(value);\r\n\r\n        this._value.toHSVToRef(this._tmpColor);\r\n\r\n        this._h = this._tmpColor.r;\r\n        this._s = Math.max(this._tmpColor.g, 0.00001);\r\n        this._v = Math.max(this._tmpColor.b, 0.00001);\r\n\r\n        this._markAsDirty();\r\n\r\n        if (this._value.r <= ColorPicker._Epsilon) {\r\n            this._value.r = 0;\r\n        }\r\n\r\n        if (this._value.g <= ColorPicker._Epsilon) {\r\n            this._value.g = 0;\r\n        }\r\n\r\n        if (this._value.b <= ColorPicker._Epsilon) {\r\n            this._value.b = 0;\r\n        }\r\n\r\n        if (this._value.r >= 1.0 - ColorPicker._Epsilon) {\r\n            this._value.r = 1.0;\r\n        }\r\n\r\n        if (this._value.g >= 1.0 - ColorPicker._Epsilon) {\r\n            this._value.g = 1.0;\r\n        }\r\n\r\n        if (this._value.b >= 1.0 - ColorPicker._Epsilon) {\r\n            this._value.b = 1.0;\r\n        }\r\n\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control width\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            if (this._width.getValue(this._host) === 0) {\r\n                value = \"1px\";\r\n                this._width.fromString(value);\r\n            }\r\n            this._height.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control height\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /** Gets or sets control height */\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            if (this._height.getValue(this._host) === 0) {\r\n                value = \"1px\";\r\n                this._height.fromString(value);\r\n            }\r\n            this._width.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control size */\r\n    @serialize()\r\n    public get size(): string | number {\r\n        return this.width;\r\n    }\r\n\r\n    public set size(value: string | number) {\r\n        this.width = value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ColorPicker\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.value = new Color3(0.88, 0.1, 0.1);\r\n        this.size = \"200px\";\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ColorPicker\";\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _preMeasure(parentMeasure: Measure): void {\r\n        if (parentMeasure.width < parentMeasure.height) {\r\n            this._currentMeasure.height = parentMeasure.width;\r\n        } else {\r\n            this._currentMeasure.width = parentMeasure.height;\r\n        }\r\n    }\r\n\r\n    private _updateSquareProps(): void {\r\n        const radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * 0.5;\r\n        const wheelThickness = radius * 0.2;\r\n        const innerDiameter = (radius - wheelThickness) * 2;\r\n        const squareSize = innerDiameter / Math.sqrt(2);\r\n        const offset = radius - squareSize * 0.5;\r\n\r\n        this._squareLeft = this._currentMeasure.left + offset;\r\n        this._squareTop = this._currentMeasure.top + offset;\r\n        this._squareSize = squareSize;\r\n    }\r\n\r\n    private _drawGradientSquare(hueValue: number, left: number, top: number, width: number, height: number, context: ICanvasRenderingContext) {\r\n        const lgh = context.createLinearGradient(left, top, width + left, top);\r\n        lgh.addColorStop(0, \"#fff\");\r\n        lgh.addColorStop(1, \"hsl(\" + hueValue + \", 100%, 50%)\");\r\n\r\n        context.fillStyle = lgh;\r\n        context.fillRect(left, top, width, height);\r\n\r\n        const lgv = context.createLinearGradient(left, top, left, height + top);\r\n        lgv.addColorStop(0, \"rgba(0,0,0,0)\");\r\n        lgv.addColorStop(1, \"#000\");\r\n\r\n        context.fillStyle = lgv;\r\n        context.fillRect(left, top, width, height);\r\n    }\r\n\r\n    private _drawCircle(centerX: number, centerY: number, radius: number, context: ICanvasRenderingContext) {\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius + 1, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = \"#333333\";\r\n        context.stroke();\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = \"#ffffff\";\r\n        context.stroke();\r\n    }\r\n\r\n    private _createColorWheelCanvas(radius: number, thickness: number): ICanvas {\r\n        // Shoudl abstract platform instead of using LastCreatedEngine\r\n        const engine = EngineStore.LastCreatedEngine;\r\n        if (!engine) {\r\n            throw new Error(\"Invalid engine. Unable to create a canvas.\");\r\n        }\r\n        const canvas = engine.createCanvas(radius * 2, radius * 2);\r\n        const context = canvas.getContext(\"2d\");\r\n        const image = context.getImageData(0, 0, radius * 2, radius * 2);\r\n        const data = image.data;\r\n\r\n        const color = this._tmpColor;\r\n        const maxDistSq = radius * radius;\r\n        const innerRadius = radius - thickness;\r\n        const minDistSq = innerRadius * innerRadius;\r\n\r\n        for (let x = -radius; x < radius; x++) {\r\n            for (let y = -radius; y < radius; y++) {\r\n                const distSq = x * x + y * y;\r\n\r\n                if (distSq > maxDistSq || distSq < minDistSq) {\r\n                    continue;\r\n                }\r\n\r\n                const dist = Math.sqrt(distSq);\r\n                const ang = Math.atan2(y, x);\r\n\r\n                Color3.HSVtoRGBToRef((ang * 180) / Math.PI + 180, dist / radius, 1, color);\r\n\r\n                const index = (x + radius + (y + radius) * 2 * radius) * 4;\r\n\r\n                data[index] = color.r * 255;\r\n                data[index + 1] = color.g * 255;\r\n                data[index + 2] = color.b * 255;\r\n                let alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                //apply less alpha to bigger color pickers\r\n                let alphaAmount = 0.2;\r\n                const maxAlpha = 0.2;\r\n                const minAlpha = 0.04;\r\n                const lowerRadius = 50;\r\n                const upperRadius = 150;\r\n\r\n                if (radius < lowerRadius) {\r\n                    alphaAmount = maxAlpha;\r\n                } else if (radius > upperRadius) {\r\n                    alphaAmount = minAlpha;\r\n                } else {\r\n                    alphaAmount = ((minAlpha - maxAlpha) * (radius - lowerRadius)) / (upperRadius - lowerRadius) + maxAlpha;\r\n                }\r\n\r\n                alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                if (alphaRatio < alphaAmount) {\r\n                    data[index + 3] = 255 * (alphaRatio / alphaAmount);\r\n                } else if (alphaRatio > 1 - alphaAmount) {\r\n                    data[index + 3] = 255 * (1.0 - (alphaRatio - (1 - alphaAmount)) / alphaAmount);\r\n                } else {\r\n                    data[index + 3] = 255;\r\n                }\r\n            }\r\n        }\r\n\r\n        context.putImageData(image, 0, 0);\r\n\r\n        return canvas;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        const radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * 0.5;\r\n        const wheelThickness = radius * 0.2;\r\n        const left = this._currentMeasure.left;\r\n        const top = this._currentMeasure.top;\r\n\r\n        if (!this._colorWheelCanvas || this._colorWheelCanvas.width != radius * 2) {\r\n            this._colorWheelCanvas = this._createColorWheelCanvas(radius, wheelThickness);\r\n        }\r\n\r\n        this._updateSquareProps();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n\r\n            context.fillRect(this._squareLeft, this._squareTop, this._squareSize, this._squareSize);\r\n        }\r\n\r\n        context.drawImage(this._colorWheelCanvas, left, top);\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        this._drawGradientSquare(this._h, this._squareLeft, this._squareTop, this._squareSize, this._squareSize, context);\r\n\r\n        let cx = this._squareLeft + this._squareSize * this._s;\r\n        let cy = this._squareTop + this._squareSize * (1 - this._v);\r\n\r\n        this._drawCircle(cx, cy, radius * 0.04, context);\r\n\r\n        const dist = radius - wheelThickness * 0.5;\r\n        cx = left + radius + Math.cos(((this._h - 180) * Math.PI) / 180) * dist;\r\n        cy = top + radius + Math.sin(((this._h - 180) * Math.PI) / 180) * dist;\r\n        this._drawCircle(cx, cy, wheelThickness * 0.35, context);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    private _updateValueFromPointer(x: number, y: number): void {\r\n        if (this._pointerStartedOnWheel) {\r\n            const radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * 0.5;\r\n            const centerX = radius + this._currentMeasure.left;\r\n            const centerY = radius + this._currentMeasure.top;\r\n            this._h = (Math.atan2(y - centerY, x - centerX) * 180) / Math.PI + 180;\r\n        } else if (this._pointerStartedOnSquare) {\r\n            this._updateSquareProps();\r\n            this._s = (x - this._squareLeft) / this._squareSize;\r\n            this._v = 1 - (y - this._squareTop) / this._squareSize;\r\n            this._s = Math.min(this._s, 1);\r\n            this._s = Math.max(this._s, ColorPicker._Epsilon);\r\n            this._v = Math.min(this._v, 1);\r\n            this._v = Math.max(this._v, ColorPicker._Epsilon);\r\n        }\r\n\r\n        Color3.HSVtoRGBToRef(this._h, this._s, this._v, this._tmpColor);\r\n\r\n        this.value = this._tmpColor;\r\n    }\r\n\r\n    private _isPointOnSquare(x: number, y: number): boolean {\r\n        this._updateSquareProps();\r\n\r\n        const left = this._squareLeft;\r\n        const top = this._squareTop;\r\n        const size = this._squareSize;\r\n\r\n        if (x >= left && x <= left + size && y >= top && y <= top + size) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _isPointOnWheel(x: number, y: number): boolean {\r\n        const radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * 0.5;\r\n        const centerX = radius + this._currentMeasure.left;\r\n        const centerY = radius + this._currentMeasure.top;\r\n        const wheelThickness = radius * 0.2;\r\n        const innerRadius = radius - wheelThickness;\r\n        const radiusSq = radius * radius;\r\n        const innerRadiusSq = innerRadius * innerRadius;\r\n\r\n        const dx = x - centerX;\r\n        const dy = y - centerY;\r\n\r\n        const distSq = dx * dx + dy * dy;\r\n\r\n        if (distSq <= radiusSq && distSq >= innerRadiusSq) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isReadOnly) {\r\n            return true;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._pointerStartedOnSquare = false;\r\n        this._pointerStartedOnWheel = false;\r\n\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(coordinates.x, coordinates.y, this._transformedPosition);\r\n\r\n        const x = this._transformedPosition.x;\r\n        const y = this._transformedPosition.y;\r\n\r\n        if (this._isPointOnSquare(x, y)) {\r\n            this._pointerStartedOnSquare = true;\r\n        } else if (this._isPointOnWheel(x, y)) {\r\n            this._pointerStartedOnWheel = true;\r\n        }\r\n\r\n        this._updateValueFromPointer(x, y);\r\n        this._host._capturingControl[pointerId] = this;\r\n        this._lastPointerDownId = pointerId;\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2, pointerId: number, pi: PointerInfoBase): void {\r\n        // Only listen to pointer move events coming from the last pointer to click on the element (To support dual vr controller interaction)\r\n        if (pointerId != this._lastPointerDownId) {\r\n            return;\r\n        }\r\n\r\n        if (!this.isReadOnly) {\r\n            // Invert transform\r\n            this._invertTransformMatrix.transformCoordinates(coordinates.x, coordinates.y, this._transformedPosition);\r\n\r\n            const x = this._transformedPosition.x;\r\n            const y = this._transformedPosition.y;\r\n\r\n            if (this._pointerIsDown) {\r\n                this._updateValueFromPointer(x, y);\r\n            }\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates, pointerId, pi);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean, pi: PointerInfoBase): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick, pi);\r\n    }\r\n\r\n    public _onCanvasBlur() {\r\n        this._forcePointerUp();\r\n        super._onCanvasBlur();\r\n    }\r\n\r\n    /**\r\n     * This function expands the color picker by creating a color picker dialog with manual\r\n     * color value input and the ability to save colors into an array to be used later in\r\n     * subsequent launches of the dialogue.\r\n     * @param advancedTexture defines the AdvancedDynamicTexture the dialog is assigned to\r\n     * @param options defines size for dialog and options for saved colors. Also accepts last color picked as hex string and saved colors array as hex strings.\r\n     * @param options.pickerWidth\r\n     * @param options.pickerHeight\r\n     * @param options.headerHeight\r\n     * @param options.lastColor\r\n     * @param options.swatchLimit\r\n     * @param options.numSwatchesPerLine\r\n     * @param options.savedColors\r\n     * @returns picked color as a hex string and the saved colors array as hex strings.\r\n     */\r\n    public static ShowPickerDialogAsync(\r\n        advancedTexture: AdvancedDynamicTexture,\r\n        options: {\r\n            pickerWidth?: string;\r\n            pickerHeight?: string;\r\n            headerHeight?: string;\r\n            lastColor?: string;\r\n            swatchLimit?: number;\r\n            numSwatchesPerLine?: number;\r\n            savedColors?: Array<string>;\r\n        }\r\n    ): Promise<{\r\n        savedColors?: string[];\r\n        pickedColor: string;\r\n    }> {\r\n        return new Promise((resolve) => {\r\n            // Default options\r\n            options.pickerWidth = options.pickerWidth || \"640px\";\r\n            options.pickerHeight = options.pickerHeight || \"400px\";\r\n            options.headerHeight = options.headerHeight || \"35px\";\r\n            options.lastColor = options.lastColor || \"#000000\";\r\n            options.swatchLimit = options.swatchLimit || 20;\r\n            options.numSwatchesPerLine = options.numSwatchesPerLine || 10;\r\n\r\n            // Window size settings\r\n            const drawerMaxRows: number = options.swatchLimit / options.numSwatchesPerLine;\r\n            const rawSwatchSize: number = parseFloat(<string>options.pickerWidth) / options.numSwatchesPerLine;\r\n            const gutterSize: number = Math.floor(rawSwatchSize * 0.25);\r\n            const colGutters: number = gutterSize * (options.numSwatchesPerLine + 1);\r\n            const swatchSize: number = Math.floor((parseFloat(<string>options.pickerWidth) - colGutters) / options.numSwatchesPerLine);\r\n            const drawerMaxSize: number = swatchSize * drawerMaxRows + gutterSize * (drawerMaxRows + 1);\r\n            const containerSize: string = (parseInt(options.pickerHeight) + drawerMaxSize + Math.floor(swatchSize * 0.25)).toString() + \"px\";\r\n\r\n            // Button Colors\r\n            const buttonColor: string = \"#c0c0c0\";\r\n            const buttonBackgroundColor: string = \"#535353\";\r\n            const buttonBackgroundHoverColor: string = \"#414141\";\r\n            const buttonBackgroundClickColor: string = \"515151\";\r\n            const buttonDisabledColor: string = \"#555555\";\r\n            const buttonDisabledBackgroundColor: string = \"#454545\";\r\n            const currentSwatchesOutlineColor: string = \"#404040\";\r\n            const luminanceLimitColor: Color3 = Color3.FromHexString(\"#dddddd\");\r\n            const luminanceLimit: number = luminanceLimitColor.r + luminanceLimitColor.g + luminanceLimitColor.b;\r\n            const iconColorDark: string = \"#aaaaaa\";\r\n            const iconColorLight: string = \"#ffffff\";\r\n\r\n            // Button settings\r\n            let buttonFontSize: number;\r\n            let butEdit: Button;\r\n\r\n            // Input Text Colors\r\n            const inputFieldLabels: string[] = [\"R\", \"G\", \"B\"];\r\n            const inputTextBackgroundColor: string = \"#454545\";\r\n            const inputTextColor: string = \"#f0f0f0\";\r\n\r\n            // This int is used for naming swatches and serves as the index for calling them from the list\r\n            let swatchNumber: number;\r\n\r\n            // Menu Panel options. We need to know if the swatchDrawer exists so we can create it if needed.\r\n            let swatchDrawer: Grid;\r\n            let editSwatchMode: boolean = false;\r\n\r\n            // Color InputText fields that will be updated upon value change\r\n            let butSave: Button;\r\n            let lastVal: string;\r\n            let activeField: string;\r\n\r\n            // Dialog menu container which will contain both the main dialogue window and the swatch drawer which opens once a color is saved.\r\n            const dialogContainer: Grid = new Grid();\r\n            dialogContainer.name = \"Dialog Container\";\r\n            dialogContainer.width = options.pickerWidth;\r\n            if (options.savedColors) {\r\n                dialogContainer.height = containerSize;\r\n                const topRow: number = parseInt(options.pickerHeight) / parseInt(containerSize);\r\n                dialogContainer.addRowDefinition(topRow, false);\r\n                dialogContainer.addRowDefinition(1.0 - topRow, false);\r\n            } else {\r\n                dialogContainer.height = options.pickerHeight;\r\n                dialogContainer.addRowDefinition(1.0, false);\r\n            }\r\n            advancedTexture.addControl(dialogContainer);\r\n\r\n            // Swatch drawer which contains all saved color buttons\r\n            if (options.savedColors) {\r\n                swatchDrawer = new Grid();\r\n                swatchDrawer.name = \"Swatch Drawer\";\r\n                swatchDrawer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n                swatchDrawer.background = buttonBackgroundColor;\r\n                swatchDrawer.width = options.pickerWidth!;\r\n                const initialRows: number = options.savedColors.length / options.numSwatchesPerLine;\r\n                let gutterCount: number;\r\n                if (initialRows == 0) {\r\n                    gutterCount = 0;\r\n                } else {\r\n                    gutterCount = initialRows + 1;\r\n                }\r\n                swatchDrawer.height = (swatchSize * initialRows + gutterCount * gutterSize).toString() + \"px\";\r\n                swatchDrawer.top = Math.floor(swatchSize * 0.25).toString() + \"px\";\r\n                for (let i = 0; i < Math.ceil(options.savedColors.length / options.numSwatchesPerLine) * 2 + 1; i++) {\r\n                    if (i % 2 != 0) {\r\n                        swatchDrawer.addRowDefinition(swatchSize, true);\r\n                    } else {\r\n                        swatchDrawer.addRowDefinition(gutterSize, true);\r\n                    }\r\n                }\r\n                for (let i = 0; i < options.numSwatchesPerLine! * 2 + 1; i++) {\r\n                    if (i % 2 != 0) {\r\n                        swatchDrawer.addColumnDefinition(swatchSize, true);\r\n                    } else {\r\n                        swatchDrawer.addColumnDefinition(gutterSize, true);\r\n                    }\r\n                }\r\n                dialogContainer.addControl(swatchDrawer, 1, 0);\r\n            }\r\n\r\n            // Picker container\r\n            const pickerPanel: Grid = new Grid();\r\n            pickerPanel.name = \"Picker Panel\";\r\n            pickerPanel.height = options.pickerHeight;\r\n            const panelHead: number = parseInt(options.headerHeight) / parseInt(options.pickerHeight);\r\n            const pickerPanelRows: number[] = [panelHead, 1.0 - panelHead];\r\n            pickerPanel.addRowDefinition(pickerPanelRows[0], false);\r\n            pickerPanel.addRowDefinition(pickerPanelRows[1], false);\r\n            dialogContainer.addControl(pickerPanel, 0, 0);\r\n\r\n            // Picker container header\r\n            const header: Rectangle = new Rectangle();\r\n            header.name = \"Dialogue Header Bar\";\r\n            header.background = \"#cccccc\";\r\n            header.thickness = 0;\r\n            pickerPanel.addControl(header, 0, 0);\r\n\r\n            // Header close button\r\n            const closeButton: Button = Button.CreateSimpleButton(\"closeButton\", \"a\");\r\n            closeButton.fontFamily = \"coreglyphs\";\r\n            const headerColor3: Color3 = Color3.FromHexString(header.background);\r\n            const closeIconColor = new Color3(1.0 - headerColor3.r, 1.0 - headerColor3.g, 1.0 - headerColor3.b);\r\n            closeButton.color = closeIconColor.toHexString();\r\n            closeButton.fontSize = Math.floor(parseInt(options.headerHeight!) * 0.6);\r\n            closeButton.textBlock!.textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n            closeButton.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_RIGHT;\r\n            closeButton.height = closeButton.width = options.headerHeight;\r\n            closeButton.background = header.background;\r\n            closeButton.thickness = 0;\r\n            closeButton.pointerDownAnimation = () => {};\r\n            closeButton.pointerUpAnimation = () => {\r\n                closeButton.background = header.background;\r\n            };\r\n            closeButton.pointerEnterAnimation = () => {\r\n                closeButton.color = header.background;\r\n                closeButton.background = \"red\";\r\n            };\r\n            closeButton.pointerOutAnimation = () => {\r\n                closeButton.color = closeIconColor.toHexString();\r\n                closeButton.background = header.background;\r\n            };\r\n            closeButton.onPointerClickObservable.add(() => {\r\n                closePicker(currentSwatch.background);\r\n            });\r\n            pickerPanel.addControl(closeButton, 0, 0);\r\n\r\n            // Dialog container body\r\n            const dialogBody: Grid = new Grid();\r\n            dialogBody.name = \"Dialogue Body\";\r\n            dialogBody.background = buttonBackgroundColor;\r\n            const dialogBodyCols: number[] = [0.4375, 0.5625];\r\n            dialogBody.addRowDefinition(1.0, false);\r\n            dialogBody.addColumnDefinition(dialogBodyCols[0], false);\r\n            dialogBody.addColumnDefinition(dialogBodyCols[1], false);\r\n            pickerPanel.addControl(dialogBody, 1, 0);\r\n\r\n            // Picker grid\r\n            const pickerGrid: Grid = new Grid();\r\n            pickerGrid.name = \"Picker Grid\";\r\n            pickerGrid.addRowDefinition(0.85, false);\r\n            pickerGrid.addRowDefinition(0.15, false);\r\n            dialogBody.addControl(pickerGrid, 0, 0);\r\n\r\n            //  Picker control\r\n            const picker = new ColorPicker();\r\n            picker.name = \"GUI Color Picker\";\r\n            if (options.pickerHeight < options.pickerWidth) {\r\n                picker.width = 0.89;\r\n            } else {\r\n                picker.height = 0.89;\r\n            }\r\n            picker.value = Color3.FromHexString(options.lastColor);\r\n            picker.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n            picker.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n            picker.onPointerDownObservable.add(() => {\r\n                activeField = picker.name!;\r\n                lastVal = \"\";\r\n                editSwatches(false);\r\n            });\r\n            picker.onValueChangedObservable.add(function (value) {\r\n                // value is a color3\r\n                if (activeField == picker.name) {\r\n                    updateValues(value, picker.name);\r\n                }\r\n            });\r\n            pickerGrid.addControl(picker, 0, 0);\r\n\r\n            // Picker body right quarant\r\n            const pickerBodyRight: Grid = new Grid();\r\n            pickerBodyRight.name = \"Dialogue Right Half\";\r\n            pickerBodyRight.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            const pickerBodyRightRows: number[] = [0.514, 0.486];\r\n            pickerBodyRight.addRowDefinition(pickerBodyRightRows[0], false);\r\n            pickerBodyRight.addRowDefinition(pickerBodyRightRows[1], false);\r\n            dialogBody.addControl(pickerBodyRight, 1, 1);\r\n\r\n            // Picker container swatches and buttons\r\n            const pickerSwatchesButtons: Grid = new Grid();\r\n            pickerSwatchesButtons.name = \"Swatches and Buttons\";\r\n            const pickerButtonsCol: number[] = [0.417, 0.583];\r\n            pickerSwatchesButtons.addRowDefinition(1.0, false);\r\n            pickerSwatchesButtons.addColumnDefinition(pickerButtonsCol[0], false);\r\n            pickerSwatchesButtons.addColumnDefinition(pickerButtonsCol[1], false);\r\n            pickerBodyRight.addControl(pickerSwatchesButtons, 0, 0);\r\n\r\n            // Picker Swatches quadrant\r\n            const pickerSwatches: Grid = new Grid();\r\n            pickerSwatches.name = \"New and Current Swatches\";\r\n            const pickeSwatchesRows: number[] = [0.04, 0.16, 0.64, 0.16];\r\n            pickerSwatches.addRowDefinition(pickeSwatchesRows[0], false);\r\n            pickerSwatches.addRowDefinition(pickeSwatchesRows[1], false);\r\n            pickerSwatches.addRowDefinition(pickeSwatchesRows[2], false);\r\n            pickerSwatches.addRowDefinition(pickeSwatchesRows[3], false);\r\n            pickerSwatchesButtons.addControl(pickerSwatches, 0, 0);\r\n\r\n            // Active swatches\r\n            const activeSwatches: Grid = new Grid();\r\n            activeSwatches.name = \"Active Swatches\";\r\n            activeSwatches.width = 0.67;\r\n            activeSwatches.addRowDefinition(0.5, false);\r\n            activeSwatches.addRowDefinition(0.5, false);\r\n            pickerSwatches.addControl(activeSwatches, 2, 0);\r\n\r\n            const labelWidth: number = Math.floor(parseInt(options.pickerWidth) * dialogBodyCols[1] * pickerButtonsCol[0] * 0.11);\r\n            const labelHeight: number = Math.floor(parseInt(options.pickerHeight) * pickerPanelRows[1] * pickerBodyRightRows[0] * pickeSwatchesRows[1] * 0.5);\r\n\r\n            let labelTextSize: number;\r\n            if (options.pickerWidth > options.pickerHeight) {\r\n                labelTextSize = labelHeight;\r\n            } else {\r\n                labelTextSize = labelWidth;\r\n            }\r\n            // New color swatch and previous color button\r\n            const newText: TextBlock = new TextBlock();\r\n            newText.text = \"new\";\r\n            newText.name = \"New Color Label\";\r\n            newText.color = buttonColor;\r\n            newText.fontSize = labelTextSize;\r\n            pickerSwatches.addControl(newText, 1, 0);\r\n\r\n            const newSwatch = new Rectangle();\r\n            newSwatch.name = \"New Color Swatch\";\r\n            newSwatch.background = options.lastColor;\r\n            newSwatch.thickness = 0;\r\n            activeSwatches.addControl(newSwatch, 0, 0);\r\n\r\n            const currentSwatch: Button = Button.CreateSimpleButton(\"currentSwatch\", \"\");\r\n            currentSwatch.background = options.lastColor;\r\n            currentSwatch.thickness = 0;\r\n            currentSwatch.onPointerClickObservable.add(() => {\r\n                const revertColor = Color3.FromHexString(currentSwatch.background);\r\n                updateValues(revertColor, currentSwatch.name!);\r\n                editSwatches(false);\r\n            });\r\n            currentSwatch.pointerDownAnimation = () => {};\r\n            currentSwatch.pointerUpAnimation = () => {};\r\n            currentSwatch.pointerEnterAnimation = () => {};\r\n            currentSwatch.pointerOutAnimation = () => {};\r\n            activeSwatches.addControl(currentSwatch, 1, 0);\r\n\r\n            const swatchOutline: Rectangle = new Rectangle();\r\n            swatchOutline.name = \"Swatch Outline\";\r\n            swatchOutline.width = 0.67;\r\n            swatchOutline.thickness = 2;\r\n            swatchOutline.color = currentSwatchesOutlineColor;\r\n            swatchOutline.isHitTestVisible = false;\r\n            pickerSwatches.addControl(swatchOutline, 2, 0);\r\n\r\n            const currentText: TextBlock = new TextBlock();\r\n            currentText.name = \"Current Color Label\";\r\n            currentText.text = \"current\";\r\n            currentText.color = buttonColor;\r\n            currentText.fontSize = labelTextSize;\r\n            pickerSwatches.addControl(currentText, 3, 0);\r\n\r\n            // Buttons grid\r\n            const buttonGrid: Grid = new Grid();\r\n            buttonGrid.name = \"Button Grid\";\r\n            buttonGrid.height = 0.8;\r\n            const buttonGridRows: number = 1 / 3;\r\n            buttonGrid.addRowDefinition(buttonGridRows, false);\r\n            buttonGrid.addRowDefinition(buttonGridRows, false);\r\n            buttonGrid.addRowDefinition(buttonGridRows, false);\r\n            pickerSwatchesButtons.addControl(buttonGrid, 0, 1);\r\n\r\n            // Determine pixel width and height for all buttons from overall panel dimensions\r\n            const buttonWidth = Math.floor(parseInt(options.pickerWidth) * dialogBodyCols[1] * pickerButtonsCol[1] * 0.67).toString() + \"px\";\r\n            const buttonHeight =\r\n                Math.floor(\r\n                    parseInt(options.pickerHeight) * pickerPanelRows[1] * pickerBodyRightRows[0] * (parseFloat(buttonGrid.height.toString()) / 100) * buttonGridRows * 0.7\r\n                ).toString() + \"px\";\r\n\r\n            // Determine button type size\r\n            if (parseFloat(buttonWidth) > parseFloat(buttonHeight)) {\r\n                buttonFontSize = Math.floor(parseFloat(buttonHeight) * 0.45);\r\n            } else {\r\n                buttonFontSize = Math.floor(parseFloat(buttonWidth) * 0.11);\r\n            }\r\n\r\n            // Panel Buttons\r\n            const butOK: Button = Button.CreateSimpleButton(\"butOK\", \"OK\");\r\n            butOK.width = buttonWidth;\r\n            butOK.height = buttonHeight;\r\n            butOK.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n            butOK.thickness = 2;\r\n            butOK.color = buttonColor;\r\n            butOK.fontSize = buttonFontSize;\r\n            butOK.background = buttonBackgroundColor;\r\n            butOK.onPointerEnterObservable.add(() => {\r\n                butOK.background = buttonBackgroundHoverColor;\r\n            });\r\n            butOK.onPointerOutObservable.add(() => {\r\n                butOK.background = buttonBackgroundColor;\r\n            });\r\n            butOK.pointerDownAnimation = () => {\r\n                butOK.background = buttonBackgroundClickColor;\r\n            };\r\n            butOK.pointerUpAnimation = () => {\r\n                butOK.background = buttonBackgroundHoverColor;\r\n            };\r\n            butOK.onPointerClickObservable.add(() => {\r\n                editSwatches(false);\r\n                closePicker(newSwatch.background);\r\n            });\r\n            buttonGrid.addControl(butOK, 0, 0);\r\n\r\n            const butCancel: Button = Button.CreateSimpleButton(\"butCancel\", \"Cancel\");\r\n            butCancel.width = buttonWidth;\r\n            butCancel.height = buttonHeight;\r\n            butCancel.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n            butCancel.thickness = 2;\r\n            butCancel.color = buttonColor;\r\n            butCancel.fontSize = buttonFontSize;\r\n            butCancel.background = buttonBackgroundColor;\r\n            butCancel.onPointerEnterObservable.add(() => {\r\n                butCancel.background = buttonBackgroundHoverColor;\r\n            });\r\n            butCancel.onPointerOutObservable.add(() => {\r\n                butCancel.background = buttonBackgroundColor;\r\n            });\r\n            butCancel.pointerDownAnimation = () => {\r\n                butCancel.background = buttonBackgroundClickColor;\r\n            };\r\n            butCancel.pointerUpAnimation = () => {\r\n                butCancel.background = buttonBackgroundHoverColor;\r\n            };\r\n            butCancel.onPointerClickObservable.add(() => {\r\n                editSwatches(false);\r\n                closePicker(currentSwatch.background);\r\n            });\r\n            buttonGrid.addControl(butCancel, 1, 0);\r\n\r\n            if (options.savedColors) {\r\n                butSave = Button.CreateSimpleButton(\"butSave\", \"Save\");\r\n                butSave.width = buttonWidth;\r\n                butSave.height = buttonHeight;\r\n                butSave.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n                butSave.thickness = 2;\r\n                butSave.fontSize = buttonFontSize;\r\n                if (options.savedColors.length < options.swatchLimit!) {\r\n                    butSave.color = buttonColor;\r\n                    butSave.background = buttonBackgroundColor;\r\n                } else {\r\n                    disableButton(butSave, true);\r\n                }\r\n                butSave.onPointerEnterObservable.add(() => {\r\n                    if (options.savedColors) {\r\n                        if (options.savedColors.length < options.swatchLimit!) {\r\n                            butSave.background = buttonBackgroundHoverColor;\r\n                        }\r\n                    }\r\n                });\r\n                butSave.onPointerOutObservable.add(() => {\r\n                    if (options.savedColors) {\r\n                        if (options.savedColors.length < options.swatchLimit!) {\r\n                            butSave.background = buttonBackgroundColor;\r\n                        }\r\n                    }\r\n                });\r\n                butSave.pointerDownAnimation = () => {\r\n                    if (options.savedColors) {\r\n                        if (options.savedColors.length < options.swatchLimit!) {\r\n                            butSave.background = buttonBackgroundClickColor;\r\n                        }\r\n                    }\r\n                };\r\n                butSave.pointerUpAnimation = () => {\r\n                    if (options.savedColors) {\r\n                        if (options.savedColors.length < options.swatchLimit!) {\r\n                            butSave.background = buttonBackgroundHoverColor;\r\n                        }\r\n                    }\r\n                };\r\n                butSave.onPointerClickObservable.add(() => {\r\n                    if (options.savedColors) {\r\n                        if (options.savedColors.length == 0) {\r\n                            setEditButtonVisibility(true);\r\n                        }\r\n                        if (options.savedColors.length < options.swatchLimit!) {\r\n                            updateSwatches(newSwatch.background, butSave);\r\n                        }\r\n                        editSwatches(false);\r\n                    }\r\n                });\r\n                if (options.savedColors.length > 0) {\r\n                    setEditButtonVisibility(true);\r\n                }\r\n                buttonGrid.addControl(butSave, 2, 0);\r\n            }\r\n\r\n            // Picker color values input\r\n            const pickerColorValues: Grid = new Grid();\r\n            pickerColorValues.name = \"Dialog Lower Right\";\r\n            pickerColorValues.addRowDefinition(0.02, false);\r\n            pickerColorValues.addRowDefinition(0.63, false);\r\n            pickerColorValues.addRowDefinition(0.21, false);\r\n            pickerColorValues.addRowDefinition(0.14, false);\r\n            pickerBodyRight.addControl(pickerColorValues, 1, 0);\r\n\r\n            // RGB values text boxes\r\n            const currentColor = Color3.FromHexString(options.lastColor);\r\n            const rgbValuesQuadrant: Grid = new Grid();\r\n            rgbValuesQuadrant.name = \"RGB Values\";\r\n            rgbValuesQuadrant.width = 0.82;\r\n            rgbValuesQuadrant.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n            rgbValuesQuadrant.addRowDefinition(1 / 3, false);\r\n            rgbValuesQuadrant.addRowDefinition(1 / 3, false);\r\n            rgbValuesQuadrant.addRowDefinition(1 / 3, false);\r\n            rgbValuesQuadrant.addColumnDefinition(0.1, false);\r\n            rgbValuesQuadrant.addColumnDefinition(0.2, false);\r\n            rgbValuesQuadrant.addColumnDefinition(0.7, false);\r\n            pickerColorValues.addControl(rgbValuesQuadrant, 1, 0);\r\n\r\n            for (let i = 0; i < inputFieldLabels.length; i++) {\r\n                const labelText: TextBlock = new TextBlock();\r\n                labelText.text = inputFieldLabels[i];\r\n                labelText.color = buttonColor;\r\n                labelText.fontSize = buttonFontSize;\r\n                rgbValuesQuadrant.addControl(labelText, i, 0);\r\n            }\r\n\r\n            // Input fields for RGB values\r\n            const rValInt = new InputText();\r\n            rValInt.width = 0.83;\r\n            rValInt.height = 0.72;\r\n            rValInt.name = \"rIntField\";\r\n            rValInt.fontSize = buttonFontSize;\r\n            rValInt.text = (currentColor.r * 255).toString();\r\n            rValInt.color = inputTextColor;\r\n            rValInt.background = inputTextBackgroundColor;\r\n            rValInt.onFocusObservable.add(() => {\r\n                activeField = rValInt.name!;\r\n                lastVal = rValInt.text;\r\n                editSwatches(false);\r\n            });\r\n            rValInt.onBlurObservable.add(() => {\r\n                if (rValInt.text == \"\") {\r\n                    rValInt.text = \"0\";\r\n                }\r\n                updateInt(rValInt, \"r\");\r\n                if (activeField == rValInt.name) {\r\n                    activeField = \"\";\r\n                }\r\n            });\r\n            rValInt.onTextChangedObservable.add(() => {\r\n                if (activeField == rValInt.name) {\r\n                    updateInt(rValInt, \"r\");\r\n                }\r\n            });\r\n            rgbValuesQuadrant.addControl(rValInt, 0, 1);\r\n\r\n            const gValInt = new InputText();\r\n            gValInt.width = 0.83;\r\n            gValInt.height = 0.72;\r\n            gValInt.name = \"gIntField\";\r\n            gValInt.fontSize = buttonFontSize;\r\n            gValInt.text = (currentColor.g * 255).toString();\r\n            gValInt.color = inputTextColor;\r\n            gValInt.background = inputTextBackgroundColor;\r\n            gValInt.onFocusObservable.add(() => {\r\n                activeField = gValInt.name!;\r\n                lastVal = gValInt.text;\r\n                editSwatches(false);\r\n            });\r\n            gValInt.onBlurObservable.add(() => {\r\n                if (gValInt.text == \"\") {\r\n                    gValInt.text = \"0\";\r\n                }\r\n                updateInt(gValInt, \"g\");\r\n                if (activeField == gValInt.name) {\r\n                    activeField = \"\";\r\n                }\r\n            });\r\n            gValInt.onTextChangedObservable.add(() => {\r\n                if (activeField == gValInt.name) {\r\n                    updateInt(gValInt, \"g\");\r\n                }\r\n            });\r\n            rgbValuesQuadrant.addControl(gValInt, 1, 1);\r\n\r\n            const bValInt = new InputText();\r\n            bValInt.width = 0.83;\r\n            bValInt.height = 0.72;\r\n            bValInt.name = \"bIntField\";\r\n            bValInt.fontSize = buttonFontSize;\r\n            bValInt.text = (currentColor.b * 255).toString();\r\n            bValInt.color = inputTextColor;\r\n            bValInt.background = inputTextBackgroundColor;\r\n            bValInt.onFocusObservable.add(() => {\r\n                activeField = bValInt.name!;\r\n                lastVal = bValInt.text;\r\n                editSwatches(false);\r\n            });\r\n            bValInt.onBlurObservable.add(() => {\r\n                if (bValInt.text == \"\") {\r\n                    bValInt.text = \"0\";\r\n                }\r\n                updateInt(bValInt, \"b\");\r\n                if (activeField == bValInt.name) {\r\n                    activeField = \"\";\r\n                }\r\n            });\r\n            bValInt.onTextChangedObservable.add(() => {\r\n                if (activeField == bValInt.name) {\r\n                    updateInt(bValInt, \"b\");\r\n                }\r\n            });\r\n            rgbValuesQuadrant.addControl(bValInt, 2, 1);\r\n\r\n            const rValDec = new InputText();\r\n            rValDec.width = 0.95;\r\n            rValDec.height = 0.72;\r\n            rValDec.name = \"rDecField\";\r\n            rValDec.fontSize = buttonFontSize;\r\n            rValDec.text = currentColor.r.toString();\r\n            rValDec.color = inputTextColor;\r\n            rValDec.background = inputTextBackgroundColor;\r\n            rValDec.onFocusObservable.add(() => {\r\n                activeField = rValDec.name!;\r\n                lastVal = rValDec.text;\r\n                editSwatches(false);\r\n            });\r\n            rValDec.onBlurObservable.add(() => {\r\n                if (parseFloat(rValDec.text) == 0 || rValDec.text == \"\") {\r\n                    rValDec.text = \"0\";\r\n                    updateFloat(rValDec, \"r\");\r\n                }\r\n                if (activeField == rValDec.name) {\r\n                    activeField = \"\";\r\n                }\r\n            });\r\n            rValDec.onTextChangedObservable.add(() => {\r\n                if (activeField == rValDec.name) {\r\n                    updateFloat(rValDec, \"r\");\r\n                }\r\n            });\r\n            rgbValuesQuadrant.addControl(rValDec, 0, 2);\r\n\r\n            const gValDec = new InputText();\r\n            gValDec.width = 0.95;\r\n            gValDec.height = 0.72;\r\n            gValDec.name = \"gDecField\";\r\n            gValDec.fontSize = buttonFontSize;\r\n            gValDec.text = currentColor.g.toString();\r\n            gValDec.color = inputTextColor;\r\n            gValDec.background = inputTextBackgroundColor;\r\n            gValDec.onFocusObservable.add(() => {\r\n                activeField = gValDec.name!;\r\n                lastVal = gValDec.text;\r\n                editSwatches(false);\r\n            });\r\n            gValDec.onBlurObservable.add(() => {\r\n                if (parseFloat(gValDec.text) == 0 || gValDec.text == \"\") {\r\n                    gValDec.text = \"0\";\r\n                    updateFloat(gValDec, \"g\");\r\n                }\r\n                if (activeField == gValDec.name) {\r\n                    activeField = \"\";\r\n                }\r\n            });\r\n            gValDec.onTextChangedObservable.add(() => {\r\n                if (activeField == gValDec.name) {\r\n                    updateFloat(gValDec, \"g\");\r\n                }\r\n            });\r\n            rgbValuesQuadrant.addControl(gValDec, 1, 2);\r\n\r\n            const bValDec = new InputText();\r\n            bValDec.width = 0.95;\r\n            bValDec.height = 0.72;\r\n            bValDec.name = \"bDecField\";\r\n            bValDec.fontSize = buttonFontSize;\r\n            bValDec.text = currentColor.b.toString();\r\n            bValDec.color = inputTextColor;\r\n            bValDec.background = inputTextBackgroundColor;\r\n            bValDec.onFocusObservable.add(() => {\r\n                activeField = bValDec.name!;\r\n                lastVal = bValDec.text;\r\n                editSwatches(false);\r\n            });\r\n            bValDec.onBlurObservable.add(() => {\r\n                if (parseFloat(bValDec.text) == 0 || bValDec.text == \"\") {\r\n                    bValDec.text = \"0\";\r\n                    updateFloat(bValDec, \"b\");\r\n                }\r\n                if (activeField == bValDec.name) {\r\n                    activeField = \"\";\r\n                }\r\n            });\r\n            bValDec.onTextChangedObservable.add(() => {\r\n                if (activeField == bValDec.name) {\r\n                    updateFloat(bValDec, \"b\");\r\n                }\r\n            });\r\n            rgbValuesQuadrant.addControl(bValDec, 2, 2);\r\n\r\n            // Hex value input\r\n            const hexValueQuadrant: Grid = new Grid();\r\n            hexValueQuadrant.name = \"Hex Value\";\r\n            hexValueQuadrant.width = 0.82;\r\n            hexValueQuadrant.addRowDefinition(1.0, false);\r\n            hexValueQuadrant.addColumnDefinition(0.1, false);\r\n            hexValueQuadrant.addColumnDefinition(0.9, false);\r\n            pickerColorValues.addControl(hexValueQuadrant, 2, 0);\r\n\r\n            const labelText: TextBlock = new TextBlock();\r\n            labelText.text = \"#\";\r\n            labelText.color = buttonColor;\r\n            labelText.fontSize = buttonFontSize;\r\n            hexValueQuadrant.addControl(labelText, 0, 0);\r\n\r\n            const hexVal = new InputText();\r\n            hexVal.width = 0.96;\r\n            hexVal.height = 0.72;\r\n            hexVal.name = \"hexField\";\r\n            hexVal.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n            hexVal.fontSize = buttonFontSize;\r\n            const minusPound = options.lastColor.split(\"#\");\r\n            hexVal.text = minusPound[1];\r\n            hexVal.color = inputTextColor;\r\n            hexVal.background = inputTextBackgroundColor;\r\n            hexVal.onFocusObservable.add(() => {\r\n                activeField = hexVal.name!;\r\n                lastVal = hexVal.text;\r\n                editSwatches(false);\r\n            });\r\n            hexVal.onBlurObservable.add(() => {\r\n                if (hexVal.text.length == 3) {\r\n                    const val = hexVal.text.split(\"\");\r\n                    hexVal.text = val[0] + val[0] + val[1] + val[1] + val[2] + val[2];\r\n                }\r\n                if (hexVal.text == \"\") {\r\n                    hexVal.text = \"000000\";\r\n                    updateValues(Color3.FromHexString(hexVal.text), \"b\");\r\n                }\r\n                if (activeField == hexVal.name) {\r\n                    activeField = \"\";\r\n                }\r\n            });\r\n            hexVal.onTextChangedObservable.add(() => {\r\n                let newHexValue: string = hexVal.text;\r\n                const checkHex: boolean = /[^0-9A-F]/i.test(newHexValue);\r\n                if ((hexVal.text.length > 6 || checkHex) && activeField == hexVal.name) {\r\n                    hexVal.text = lastVal;\r\n                } else {\r\n                    if (hexVal.text.length < 6) {\r\n                        const leadingZero: Number = 6 - hexVal.text.length;\r\n                        for (let i = 0; i < leadingZero; i++) {\r\n                            newHexValue = \"0\" + newHexValue;\r\n                        }\r\n                    }\r\n                    if (hexVal.text.length == 3) {\r\n                        const val: string[] = hexVal.text.split(\"\");\r\n                        newHexValue = val[0] + val[0] + val[1] + val[1] + val[2] + val[2];\r\n                    }\r\n                    newHexValue = \"#\" + newHexValue;\r\n                    if (activeField == hexVal.name) {\r\n                        lastVal = hexVal.text;\r\n                        updateValues(Color3.FromHexString(newHexValue), hexVal.name);\r\n                    }\r\n                }\r\n            });\r\n            hexValueQuadrant.addControl(hexVal, 0, 1);\r\n\r\n            if (options.savedColors && options.savedColors.length > 0) {\r\n                updateSwatches(\"\", butSave!);\r\n            }\r\n\r\n            /**\r\n             * Will update all values for InputText and ColorPicker controls based on the BABYLON.Color3 passed to this function.\r\n             * Each InputText control and the ColorPicker control will be tested to see if they are the activeField and if they\r\n             * are will receive no update. This is to prevent the input from the user being overwritten.\r\n             * @param value\r\n             * @param inputField\r\n             */\r\n            function updateValues(value: Color3, inputField: string) {\r\n                activeField = inputField;\r\n                const pickedColor: string = value.toHexString();\r\n                newSwatch.background = pickedColor;\r\n                if (rValInt.name != activeField) {\r\n                    rValInt.text = Math.floor(value.r * 255).toString();\r\n                }\r\n                if (gValInt.name != activeField) {\r\n                    gValInt.text = Math.floor(value.g * 255).toString();\r\n                }\r\n                if (bValInt.name != activeField) {\r\n                    bValInt.text = Math.floor(value.b * 255).toString();\r\n                }\r\n                if (rValDec.name != activeField) {\r\n                    rValDec.text = value.r.toString();\r\n                }\r\n                if (gValDec.name != activeField) {\r\n                    gValDec.text = value.g.toString();\r\n                }\r\n                if (bValDec.name != activeField) {\r\n                    bValDec.text = value.b.toString();\r\n                }\r\n                if (hexVal.name != activeField) {\r\n                    const minusPound: string[] = pickedColor.split(\"#\");\r\n                    hexVal.text = minusPound[1];\r\n                }\r\n                if (picker.name != activeField) {\r\n                    picker.value = value;\r\n                }\r\n            }\r\n\r\n            // When the user enters an integer for R, G, or B we check to make sure it is a valid number and replace if not.\r\n            function updateInt(field: InputText, channel: string) {\r\n                let newValue: string = field.text;\r\n                const checkVal: boolean = /[^0-9]/g.test(newValue);\r\n                if (checkVal) {\r\n                    field.text = lastVal;\r\n                    return;\r\n                } else {\r\n                    if (newValue != \"\") {\r\n                        if (Math.floor(parseInt(newValue)) < 0) {\r\n                            newValue = \"0\";\r\n                        } else if (Math.floor(parseInt(newValue)) > 255) {\r\n                            newValue = \"255\";\r\n                        } else if (isNaN(parseInt(newValue))) {\r\n                            newValue = \"0\";\r\n                        }\r\n                    }\r\n                    if (activeField == field.name) {\r\n                        lastVal = newValue;\r\n                    }\r\n                }\r\n                if (newValue != \"\") {\r\n                    newValue = parseInt(newValue).toString();\r\n                    field.text = newValue;\r\n                    const newSwatchRGB: Color3 = Color3.FromHexString(newSwatch.background);\r\n                    if (activeField == field.name) {\r\n                        if (channel == \"r\") {\r\n                            updateValues(new Color3(parseInt(newValue) / 255, newSwatchRGB.g, newSwatchRGB.b), field.name);\r\n                        } else if (channel == \"g\") {\r\n                            updateValues(new Color3(newSwatchRGB.r, parseInt(newValue) / 255, newSwatchRGB.b), field.name);\r\n                        } else {\r\n                            updateValues(new Color3(newSwatchRGB.r, newSwatchRGB.g, parseInt(newValue) / 255), field.name);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // When the user enters a float for R, G, or B we check to make sure it is a valid number and replace if not.\r\n            function updateFloat(field: InputText, channel: string) {\r\n                let newValue: string = field.text;\r\n                const checkVal: boolean = /[^0-9.]/g.test(newValue);\r\n                if (checkVal) {\r\n                    field.text = lastVal;\r\n                    return;\r\n                } else {\r\n                    if (newValue != \"\" && newValue != \".\" && parseFloat(newValue) != 0) {\r\n                        if (parseFloat(newValue) < 0.0) {\r\n                            newValue = \"0.0\";\r\n                        } else if (parseFloat(newValue) > 1.0) {\r\n                            newValue = \"1.0\";\r\n                        } else if (isNaN(parseFloat(newValue))) {\r\n                            newValue = \"0.0\";\r\n                        }\r\n                    }\r\n                    if (activeField == field.name) {\r\n                        lastVal = newValue;\r\n                    }\r\n                }\r\n                if (newValue != \"\" && newValue != \".\" && parseFloat(newValue) != 0) {\r\n                    newValue = parseFloat(newValue).toString();\r\n                    field.text = newValue;\r\n                } else {\r\n                    newValue = \"0.0\";\r\n                }\r\n                const newSwatchRGB = Color3.FromHexString(newSwatch.background);\r\n                if (activeField == field.name) {\r\n                    if (channel == \"r\") {\r\n                        updateValues(new Color3(parseFloat(newValue), newSwatchRGB.g, newSwatchRGB.b), field.name);\r\n                    } else if (channel == \"g\") {\r\n                        updateValues(new Color3(newSwatchRGB.r, parseFloat(newValue), newSwatchRGB.b), field.name);\r\n                    } else {\r\n                        updateValues(new Color3(newSwatchRGB.r, newSwatchRGB.g, parseFloat(newValue)), field.name);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Removes the current index from the savedColors array. Drawer can then be regenerated.\r\n            function deleteSwatch(index: number) {\r\n                if (options.savedColors) {\r\n                    options.savedColors.splice(index, 1);\r\n                }\r\n                if (options.savedColors && options.savedColors.length == 0) {\r\n                    setEditButtonVisibility(false);\r\n                    editSwatchMode = false;\r\n                }\r\n            }\r\n\r\n            // Creates and styles an individual swatch when updateSwatches is called.\r\n            function createSwatch() {\r\n                if (options.savedColors && options.savedColors[swatchNumber]) {\r\n                    let icon: string;\r\n                    if (editSwatchMode) {\r\n                        icon = \"b\";\r\n                    } else {\r\n                        icon = \"\";\r\n                    }\r\n                    const swatch: Button = Button.CreateSimpleButton(\"Swatch_\" + swatchNumber, icon);\r\n                    swatch.fontFamily = \"coreglyphs\";\r\n                    const swatchColor: Color3 = Color3.FromHexString(options.savedColors[swatchNumber]);\r\n                    const swatchLuminence: number = swatchColor.r + swatchColor.g + swatchColor.b;\r\n\r\n                    // Set color of outline and textBlock based on luminance of the color swatch so feedback always visible\r\n                    if (swatchLuminence > luminanceLimit) {\r\n                        swatch.color = iconColorDark;\r\n                    } else {\r\n                        swatch.color = iconColorLight;\r\n                    }\r\n                    swatch.fontSize = Math.floor(swatchSize * 0.7);\r\n                    swatch.textBlock!.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n                    swatch.height = swatch.width = swatchSize.toString() + \"px\";\r\n                    swatch.background = options.savedColors[swatchNumber];\r\n                    swatch.thickness = 2;\r\n                    const metadata = swatchNumber;\r\n                    swatch.pointerDownAnimation = () => {\r\n                        swatch.thickness = 4;\r\n                    };\r\n                    swatch.pointerUpAnimation = () => {\r\n                        swatch.thickness = 3;\r\n                    };\r\n                    swatch.pointerEnterAnimation = () => {\r\n                        swatch.thickness = 3;\r\n                    };\r\n                    swatch.pointerOutAnimation = () => {\r\n                        swatch.thickness = 2;\r\n                    };\r\n                    swatch.onPointerClickObservable.add(() => {\r\n                        if (!editSwatchMode) {\r\n                            if (options.savedColors) {\r\n                                updateValues(Color3.FromHexString(options.savedColors[metadata]), swatch.name!);\r\n                            }\r\n                        } else {\r\n                            deleteSwatch(metadata);\r\n                            updateSwatches(\"\", butSave);\r\n                        }\r\n                    });\r\n                    return swatch;\r\n                } else {\r\n                    return null;\r\n                }\r\n            }\r\n\r\n            // Mode switch to render button text and close symbols on swatch controls\r\n            function editSwatches(mode?: boolean) {\r\n                if (mode !== undefined) {\r\n                    editSwatchMode = mode;\r\n                }\r\n                let thisButton: Button;\r\n                if (editSwatchMode) {\r\n                    for (let i = 0; i < swatchDrawer.children.length; i++) {\r\n                        thisButton = swatchDrawer.children[i] as Button;\r\n                        thisButton.textBlock!.text = \"b\";\r\n                    }\r\n                    if (butEdit !== undefined) {\r\n                        butEdit.textBlock!.text = \"Done\";\r\n                    }\r\n                } else {\r\n                    for (let i = 0; i < swatchDrawer.children.length; i++) {\r\n                        thisButton = swatchDrawer.children[i] as Button;\r\n                        thisButton.textBlock!.text = \"\";\r\n                    }\r\n                    if (butEdit !== undefined) {\r\n                        butEdit.textBlock!.text = \"Edit\";\r\n                    }\r\n                }\r\n            }\r\n\r\n            /**\r\n             * When Save Color button is pressed this function will first create a swatch drawer if one is not already\r\n             * made. Then all controls are removed from the drawer and we step through the savedColors array and\r\n             * creates one swatch per color. It will also set the height of the drawer control based on how many\r\n             * saved colors there are and how many can be stored per row.\r\n             * @param color\r\n             * @param button\r\n             */\r\n            function updateSwatches(color: string, button: Button) {\r\n                if (options.savedColors) {\r\n                    if (color != \"\") {\r\n                        options.savedColors.push(color);\r\n                    }\r\n                    swatchNumber = 0;\r\n                    swatchDrawer.clearControls();\r\n                    const rowCount: number = Math.ceil(options.savedColors.length / options.numSwatchesPerLine!);\r\n                    let gutterCount: number;\r\n                    if (rowCount == 0) {\r\n                        gutterCount = 0;\r\n                    } else {\r\n                        gutterCount = rowCount + 1;\r\n                    }\r\n                    if (swatchDrawer.rowCount != rowCount + gutterCount) {\r\n                        const currentRows: number = swatchDrawer.rowCount;\r\n                        for (let i = 0; i < currentRows; i++) {\r\n                            swatchDrawer.removeRowDefinition(0);\r\n                        }\r\n                        for (let i = 0; i < rowCount + gutterCount; i++) {\r\n                            if (i % 2) {\r\n                                swatchDrawer.addRowDefinition(swatchSize, true);\r\n                            } else {\r\n                                swatchDrawer.addRowDefinition(gutterSize, true);\r\n                            }\r\n                        }\r\n                    }\r\n                    swatchDrawer.height = (swatchSize * rowCount + gutterCount * gutterSize).toString() + \"px\";\r\n\r\n                    for (let y = 1, thisRow = 1; y < rowCount + gutterCount; y += 2, thisRow++) {\r\n                        // Determine number of buttons to create per row based on the button limit per row and number of saved colors\r\n                        let totalButtonsThisRow: number;\r\n                        if (options.savedColors.length > thisRow * options.numSwatchesPerLine!) {\r\n                            totalButtonsThisRow = options.numSwatchesPerLine!;\r\n                        } else {\r\n                            totalButtonsThisRow = options.savedColors.length - (thisRow - 1) * options.numSwatchesPerLine!;\r\n                        }\r\n                        const buttonIterations: number = Math.min(Math.max(totalButtonsThisRow, 0), options.numSwatchesPerLine!);\r\n                        for (let x = 0, w = 1; x < buttonIterations; x++) {\r\n                            if (x > options.numSwatchesPerLine!) {\r\n                                continue;\r\n                            }\r\n                            const swatch: Button | null = createSwatch();\r\n                            if (swatch != null) {\r\n                                swatchDrawer.addControl(swatch, y, w);\r\n                                w += 2;\r\n                                swatchNumber++;\r\n                            } else {\r\n                                continue;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (options.savedColors.length >= options.swatchLimit!) {\r\n                        disableButton(button, true);\r\n                    } else {\r\n                        disableButton(button, false);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Shows or hides edit swatches button depending on if there are saved swatches\r\n            function setEditButtonVisibility(enableButton: boolean) {\r\n                if (enableButton) {\r\n                    butEdit = Button.CreateSimpleButton(\"butEdit\", \"Edit\");\r\n                    butEdit.width = buttonWidth;\r\n                    butEdit.height = buttonHeight;\r\n                    butEdit.left = Math.floor(parseInt(buttonWidth) * 0.1).toString() + \"px\";\r\n                    butEdit.top = (parseFloat(butEdit.left) * -1).toString() + \"px\";\r\n                    butEdit.verticalAlignment = Control.VERTICAL_ALIGNMENT_BOTTOM;\r\n                    butEdit.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n                    butEdit.thickness = 2;\r\n                    butEdit.color = buttonColor;\r\n                    butEdit.fontSize = buttonFontSize;\r\n                    butEdit.background = buttonBackgroundColor;\r\n                    butEdit.onPointerEnterObservable.add(() => {\r\n                        butEdit.background = buttonBackgroundHoverColor;\r\n                    });\r\n                    butEdit.onPointerOutObservable.add(() => {\r\n                        butEdit.background = buttonBackgroundColor;\r\n                    });\r\n                    butEdit.pointerDownAnimation = () => {\r\n                        butEdit.background = buttonBackgroundClickColor;\r\n                    };\r\n                    butEdit.pointerUpAnimation = () => {\r\n                        butEdit.background = buttonBackgroundHoverColor;\r\n                    };\r\n                    butEdit.onPointerClickObservable.add(() => {\r\n                        if (editSwatchMode) {\r\n                            editSwatchMode = false;\r\n                        } else {\r\n                            editSwatchMode = true;\r\n                        }\r\n                        editSwatches();\r\n                    });\r\n                    pickerGrid.addControl(butEdit, 1, 0);\r\n                } else {\r\n                    pickerGrid.removeControl(butEdit);\r\n                }\r\n            }\r\n\r\n            // Called when the user hits the limit of saved colors in the drawer.\r\n            function disableButton(button: Button, disabled: boolean) {\r\n                if (disabled) {\r\n                    button.color = buttonDisabledColor;\r\n                    button.background = buttonDisabledBackgroundColor;\r\n                } else {\r\n                    button.color = buttonColor;\r\n                    button.background = buttonBackgroundColor;\r\n                }\r\n            }\r\n\r\n            // Passes last chosen color back to scene and kills dialog by removing from AdvancedDynamicTexture\r\n            function closePicker(color: string) {\r\n                if (options.savedColors && options.savedColors.length > 0) {\r\n                    resolve({\r\n                        savedColors: options.savedColors,\r\n                        pickedColor: color,\r\n                    });\r\n                } else {\r\n                    resolve({\r\n                        pickedColor: color,\r\n                    });\r\n                }\r\n                advancedTexture.removeControl(dialogContainer);\r\n            }\r\n        });\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.ColorPicker\", ColorPicker);\r\n","import { Container } from \"./container\";\r\nimport { Control } from \"./control\";\r\nimport type { Measure } from \"../measure\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/** Class used to create 2D ellipse containers */\r\nexport class Ellipse extends Container {\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    @serialize()\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Ellipse\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Ellipse\";\r\n    }\r\n\r\n    protected _localDraw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        Control.drawEllipse(\r\n            this._currentMeasure.left + this._currentMeasure.width / 2,\r\n            this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2,\r\n            this._currentMeasure.height / 2 - this._thickness / 2,\r\n            context\r\n        );\r\n\r\n        if (this._backgroundGradient || this._background) {\r\n            context.fillStyle = this._getBackgroundColor(context);\r\n\r\n            context.fill();\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._thickness) {\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    protected _clipForChildren(context: ICanvasRenderingContext) {\r\n        Control.drawEllipse(\r\n            this._currentMeasure.left + this._currentMeasure.width / 2,\r\n            this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2,\r\n            this._currentMeasure.height / 2,\r\n            context\r\n        );\r\n\r\n        context.clip();\r\n    }\r\n\r\n    public _renderHighlightSpecific(context: ICanvasRenderingContext): void {\r\n        Control.drawEllipse(\r\n            this._currentMeasure.left + this._currentMeasure.width / 2,\r\n            this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._highlightLineWidth / 2,\r\n            this._currentMeasure.height / 2 - this._highlightLineWidth / 2,\r\n            context\r\n        );\r\n        context.stroke();\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Ellipse\", Ellipse);\r\n","import type { Nullable } from \"core/types\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Button } from \"./button\";\r\nimport type { Control } from \"./control\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport type { IFocusableControl } from \"./focusableControl\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport type { IKeyboardEvent } from \"core/Events/deviceInputEvents\";\r\n\r\n/**\r\n * Class used to create a focusable button that can easily handle keyboard events\r\n * @since 5.0.0\r\n */\r\nexport class FocusableButton extends Button implements IFocusableControl {\r\n    /** Highlight color when button is focused */\r\n    public focusedColor: Nullable<string> = null;\r\n    private _isFocused = false;\r\n    private _unfocusedColor: Nullable<string> = null;\r\n\r\n    /** Observable raised when the control gets the focus */\r\n    public onFocusObservable = new Observable<Button>();\r\n    /** Observable raised when the control loses the focus */\r\n    public onBlurObservable = new Observable<Button>();\r\n    /** Observable raised when a key event was processed */\r\n    public onKeyboardEventProcessedObservable = new Observable<IKeyboardEvent>();\r\n\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this._unfocusedColor = this.color;\r\n    }\r\n\r\n    /** @internal */\r\n    public onBlur(): void {\r\n        if (this._isFocused) {\r\n            this._isFocused = false;\r\n            if (this.focusedColor && this._unfocusedColor != null) {\r\n                // Set color back to saved unfocused color\r\n                this.color = this._unfocusedColor;\r\n            }\r\n            this.onBlurObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public onFocus(): void {\r\n        this._isFocused = true;\r\n\r\n        if (this.focusedColor) {\r\n            // Save the unfocused color\r\n            this._unfocusedColor = this.color;\r\n            this.color = this.focusedColor;\r\n        }\r\n        this.onFocusObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Function called to get the list of controls that should not steal the focus from this control\r\n     * @returns an array of controls\r\n     */\r\n    public keepsFocusWith(): Nullable<Control[]> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Function to focus a button programmatically\r\n     */\r\n    public focus() {\r\n        this._host.moveFocusToControl(this);\r\n    }\r\n\r\n    /**\r\n     * Function to unfocus a button programmatically\r\n     */\r\n    public blur() {\r\n        this._host.focusedControl = null;\r\n    }\r\n\r\n    /**\r\n     * Handles the keyboard event\r\n     * @param evt Defines the KeyboardEvent\r\n     */\r\n    public processKeyboard(evt: IKeyboardEvent): void {\r\n        this.onKeyboardEventProcessedObservable.notifyObservers(evt, -1, this);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!this.isReadOnly) {\r\n            // Clicking on button should focus\r\n            this.focus();\r\n        }\r\n\r\n        return super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi);\r\n    }\r\n\r\n    /** @internal */\r\n    public displose() {\r\n        super.dispose();\r\n\r\n        this.onBlurObservable.clear();\r\n        this.onFocusObservable.clear();\r\n        this.onKeyboardEventProcessedObservable.clear();\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.FocusableButton\", FocusableButton);\r\n","import type { Nullable } from \"core/types\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport type { VirtualKeyboard } from \"./virtualKeyboard\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { Measure } from \"../measure\";\r\nimport { InputText } from \"./inputText\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport type { PointerInfo, PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport type { IKeyboardEvent } from \"core/Events/deviceInputEvents\";\r\n\r\nimport { serialize } from \"core/Misc/decorators\";\r\n\r\n/**\r\n * Class used to create input text control\r\n */\r\nexport class InputTextArea extends InputText {\r\n    private _textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    private _textVerticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n    private _lines: any[];\r\n    private _lineSpacing: ValueAndUnit = new ValueAndUnit(0);\r\n    private _outlineWidth: number = 0;\r\n    private _outlineColor: string = \"white\";\r\n    private _maxHeight = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n\r\n    private _clipTextTop: number;\r\n    private _clipTextLeft: number;\r\n\r\n    private _cursorInfo: { globalStartIndex: number; globalEndIndex: number; relativeStartIndex: number; relativeEndIndex: number; currentLineIndex: number };\r\n    private _highlightCursorInfo: { initialStartIndex: number; initialRelativeStartIndex: number; initialLineIndex: number };\r\n\r\n    /**\r\n     * An event triggered after the text was broken up into lines\r\n     */\r\n    public onLinesReadyObservable = new Observable<InputTextArea>();\r\n\r\n    /** @internal */\r\n    public _connectedVirtualKeyboard: Nullable<VirtualKeyboard>;\r\n    private _contextForBreakLines: ICanvasRenderingContext;\r\n    private _clickedCoordinateX: Nullable<number>;\r\n    private _clickedCoordinateY: Nullable<number>;\r\n\r\n    private _availableWidth: number;\r\n    private _availableHeight: number;\r\n\r\n    private _scrollTop: Nullable<number>;\r\n\r\n    private _autoStretchHeight: boolean;\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public get outlineWidth(): number {\r\n        return this._outlineWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public set outlineWidth(value: number) {\r\n        if (this._outlineWidth === value) {\r\n            return;\r\n        }\r\n        this._outlineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public get outlineColor(): string {\r\n        return this._outlineColor;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public set outlineColor(value: string) {\r\n        if (this._outlineColor === value) {\r\n            return;\r\n        }\r\n        this._outlineColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can auto stretch its height to adapt to the text */\r\n    @serialize()\r\n    public get autoStretchHeight(): boolean {\r\n        return this._autoStretchHeight;\r\n    }\r\n\r\n    public set autoStretchHeight(value: boolean) {\r\n        if (this._autoStretchHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoStretchHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    public set height(value: string | number) {\r\n        this._fixedRatioMasterIsWidth = false;\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n\r\n        this._autoStretchHeight = false;\r\n    }\r\n\r\n    @serialize()\r\n    public get maxHeight(): string | number {\r\n        return this._maxHeight.toString(this._host);\r\n    }\r\n\r\n    /** Gets the maximum width allowed by the control in pixels */\r\n    public get maxHeightInPixels(): number {\r\n        return this._maxHeight.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set maxHeight(value: string | number) {\r\n        if (this._maxHeight.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._maxHeight.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new InputTextArea\r\n     * @param name defines the control name\r\n     * @param text defines the text of the control\r\n     */\r\n    constructor(public name?: string, text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n\r\n        this.isPointerBlocker = true;\r\n\r\n        this.onLinesReadyObservable.add(() => this._updateCursorPosition());\r\n\r\n        this._highlightCursorInfo = {\r\n            initialStartIndex: -1,\r\n            initialRelativeStartIndex: -1,\r\n            initialLineIndex: -1,\r\n        };\r\n\r\n        this._cursorInfo = {\r\n            globalStartIndex: 0,\r\n            globalEndIndex: 0,\r\n            relativeEndIndex: 0,\r\n            relativeStartIndex: 0,\r\n            currentLineIndex: 0,\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"InputTextArea\";\r\n    }\r\n\r\n    /**\r\n     * Handles the keyboard event\r\n     * @param evt Defines the KeyboardEvent\r\n     */\r\n    public processKeyboard(evt: IKeyboardEvent): void {\r\n        // process pressed key\r\n        this.alternativeProcessKey(evt.code, evt.key, evt);\r\n\r\n        this.onKeyboardEventProcessedObservable.notifyObservers(evt);\r\n    }\r\n\r\n    /**\r\n     * Process the last keyboard input\r\n     *\r\n     * @param code The ascii input number\r\n     * @param key The key string representation\r\n     * @param evt The keyboard event emits with input\r\n     * @internal\r\n     */\r\n    public alternativeProcessKey(code: string, key?: string, evt?: IKeyboardEvent) {\r\n        //return if clipboard event keys (i.e -ctr/cmd + c,v,x)\r\n        if (evt && (evt.ctrlKey || evt.metaKey) && (code === \"KeyC\" || code === \"KeyV\" || code === \"KeyX\")) {\r\n            return;\r\n        }\r\n\r\n        // Specific cases\r\n        switch (code) {\r\n            case \"KeyA\": // A - select all\r\n                if (evt && (evt.ctrlKey || evt.metaKey)) {\r\n                    this._selectAllText();\r\n                    evt.preventDefault();\r\n                    return;\r\n                }\r\n                break;\r\n            case \"Period\": //SLASH\r\n                if (evt && evt.shiftKey) {\r\n                    evt.preventDefault();\r\n                }\r\n                break;\r\n            case \"Backspace\": // BACKSPACE\r\n                if (!this._isTextHighlightOn && this._cursorInfo.globalStartIndex > 0) {\r\n                    this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n                    this._cursorInfo.globalStartIndex--;\r\n                }\r\n\r\n                this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex);\r\n\r\n                this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n\r\n                if (evt) {\r\n                    evt.preventDefault();\r\n                }\r\n\r\n                this._blinkIsEven = false;\r\n                this._isTextHighlightOn = false;\r\n\r\n                this._textHasChanged();\r\n                break;\r\n            case \"Delete\": // DELETE\r\n                if (!this._isTextHighlightOn && this._cursorInfo.globalEndIndex < this.text.length) {\r\n                    this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex + 1;\r\n                }\r\n\r\n                this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex);\r\n\r\n                this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n\r\n                if (evt) {\r\n                    evt.preventDefault();\r\n                }\r\n\r\n                this._blinkIsEven = false;\r\n                this._isTextHighlightOn = false;\r\n\r\n                this._textHasChanged();\r\n                break;\r\n            case \"Enter\": // RETURN\r\n                this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex, \"\\n\");\r\n                this._cursorInfo.globalStartIndex++;\r\n                this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n\r\n                this._blinkIsEven = false;\r\n                this._isTextHighlightOn = false;\r\n\r\n                this._textHasChanged();\r\n                return;\r\n            case \"End\": // END\r\n                this._cursorInfo.globalStartIndex = this.text.length;\r\n                this._blinkIsEven = false;\r\n                this._isTextHighlightOn = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case \"Home\": // HOME\r\n                this._cursorInfo.globalStartIndex = 0;\r\n                this._blinkIsEven = false;\r\n                this._isTextHighlightOn = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case \"ArrowLeft\": // LEFT\r\n                this._markAsDirty();\r\n\r\n                if (evt && evt.shiftKey) {\r\n                    // shift + ctrl/cmd + <-\r\n                    if (evt.ctrlKey || evt.metaKey) {\r\n                        // Go to line's start by substract the relativeStartIndex to the globalStartIndex\r\n                        this._cursorInfo.globalStartIndex -= this._cursorInfo.relativeStartIndex;\r\n                        this._cursorInfo.globalEndIndex = this._highlightCursorInfo.initialStartIndex;\r\n                    }\r\n                    // store the starting point\r\n                    if (!this._isTextHighlightOn) {\r\n                        this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;\r\n                        this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;\r\n                        this._highlightCursorInfo.initialRelativeStartIndex = this._cursorInfo.relativeStartIndex;\r\n\r\n                        this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n                        this._cursorInfo.globalStartIndex--;\r\n                        this._isTextHighlightOn = true;\r\n                    } else {\r\n                        if (this._cursorInfo.globalEndIndex > this._highlightCursorInfo.initialStartIndex) {\r\n                            this._cursorInfo.globalEndIndex--;\r\n                        } else {\r\n                            this._cursorInfo.globalStartIndex--;\r\n                        }\r\n                    }\r\n                    this._blinkIsEven = true;\r\n                    evt.preventDefault();\r\n                    return;\r\n                }\r\n\r\n                if (this._isTextHighlightOn) {\r\n                    this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n                } else if (evt && (evt.ctrlKey || evt.metaKey)) {\r\n                    // ctr + <-\r\n                    this._cursorInfo.globalStartIndex -= this._cursorInfo.relativeStartIndex;\r\n                    evt.preventDefault();\r\n                } else if (this._cursorInfo.globalStartIndex > 0) {\r\n                    this._cursorInfo.globalStartIndex--;\r\n                }\r\n\r\n                // update the cursor\r\n                this._blinkIsEven = false;\r\n                this._isTextHighlightOn = false;\r\n                return;\r\n            case \"ArrowRight\": // RIGHT\r\n                this._markAsDirty();\r\n\r\n                if (evt && evt.shiftKey) {\r\n                    // shift + ctrl/cmd + ->\r\n                    if (evt.ctrlKey || evt.metaKey) {\r\n                        const rightDelta = this._lines[this._cursorInfo.currentLineIndex].text.length - this._cursorInfo.relativeEndIndex - 1;\r\n                        this._cursorInfo.globalEndIndex += rightDelta;\r\n                        this._cursorInfo.globalStartIndex = this._highlightCursorInfo.initialStartIndex;\r\n                    }\r\n                    // store the starting point\r\n                    if (!this._isTextHighlightOn) {\r\n                        this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;\r\n                        this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;\r\n                        this._highlightCursorInfo.initialRelativeStartIndex = this._cursorInfo.relativeStartIndex;\r\n\r\n                        this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n                        this._cursorInfo.globalEndIndex++;\r\n                        this._isTextHighlightOn = true;\r\n                    } else {\r\n                        if (this._cursorInfo.globalStartIndex < this._highlightCursorInfo.initialStartIndex) {\r\n                            this._cursorInfo.globalStartIndex++;\r\n                        } else {\r\n                            this._cursorInfo.globalEndIndex++;\r\n                        }\r\n                    }\r\n                    this._blinkIsEven = true;\r\n                    evt.preventDefault();\r\n                    return;\r\n                }\r\n                if (this._isTextHighlightOn) {\r\n                    this._cursorInfo.globalStartIndex = this._cursorInfo.globalEndIndex;\r\n                } else if (evt && (evt.ctrlKey || evt.metaKey)) {\r\n                    //ctr + ->\r\n                    const rightDelta = this._lines[this._cursorInfo.currentLineIndex].text.length - this._cursorInfo.relativeEndIndex;\r\n                    this._cursorInfo.globalStartIndex += rightDelta;\r\n                } else if (this._cursorInfo.globalStartIndex < this.text.length) {\r\n                    this._cursorInfo.globalStartIndex++;\r\n                }\r\n\r\n                // update the cursor\r\n                this._blinkIsEven = false;\r\n                this._isTextHighlightOn = false;\r\n                return;\r\n            case \"ArrowUp\": // UP\r\n                // update the cursor\r\n                this._blinkIsEven = false;\r\n\r\n                if (evt) {\r\n                    if (evt.shiftKey) {\r\n                        if (!this._isTextHighlightOn) {\r\n                            this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;\r\n                            this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;\r\n                            this._highlightCursorInfo.initialRelativeStartIndex = this._cursorInfo.relativeStartIndex;\r\n                        }\r\n                        this._isTextHighlightOn = true;\r\n                        this._blinkIsEven = true;\r\n                    } else {\r\n                        this._isTextHighlightOn = false;\r\n                    }\r\n                    evt.preventDefault();\r\n                }\r\n\r\n                if (this._cursorInfo.currentLineIndex === 0) {\r\n                    // First line\r\n                    this._cursorInfo.globalStartIndex = 0;\r\n                } else {\r\n                    const currentLine = this._lines[this._cursorInfo.currentLineIndex];\r\n                    const upperLine = this._lines[this._cursorInfo.currentLineIndex - 1];\r\n\r\n                    let tmpIndex = 0;\r\n                    let relativeIndex = 0;\r\n                    if (!this._isTextHighlightOn || this._cursorInfo.currentLineIndex < this._highlightCursorInfo.initialLineIndex) {\r\n                        tmpIndex = this._cursorInfo.globalStartIndex;\r\n                        relativeIndex = this._cursorInfo.relativeStartIndex;\r\n                    } else {\r\n                        tmpIndex = this._cursorInfo.globalEndIndex;\r\n                        relativeIndex = this._cursorInfo.relativeEndIndex;\r\n                    }\r\n\r\n                    const currentText = currentLine.text.substr(0, relativeIndex);\r\n                    const currentWidth = this._contextForBreakLines.measureText(currentText).width;\r\n\r\n                    let upperWidth = 0;\r\n                    let previousWidth = 0;\r\n\r\n                    tmpIndex -= relativeIndex; // Start of current line\r\n                    tmpIndex -= upperLine.text.length + upperLine.lineEnding.length; // Start of upper line\r\n                    let upperLineRelativeIndex = 0;\r\n\r\n                    while (upperWidth < currentWidth && upperLineRelativeIndex < upperLine.text.length) {\r\n                        tmpIndex++;\r\n                        upperLineRelativeIndex++;\r\n                        previousWidth = Math.abs(currentWidth - upperWidth);\r\n                        upperWidth = this._contextForBreakLines.measureText(upperLine.text.substr(0, upperLineRelativeIndex)).width;\r\n                    }\r\n\r\n                    // Find closest move\r\n                    if (Math.abs(currentWidth - upperWidth) > previousWidth && upperLineRelativeIndex > 0) {\r\n                        tmpIndex--;\r\n                    }\r\n\r\n                    if (!this._isTextHighlightOn) {\r\n                        this._cursorInfo.globalStartIndex = tmpIndex;\r\n                    } else if (this._cursorInfo.currentLineIndex <= this._highlightCursorInfo.initialLineIndex) {\r\n                        this._cursorInfo.globalStartIndex = tmpIndex;\r\n                        this._cursorInfo.globalEndIndex = this._highlightCursorInfo.initialStartIndex;\r\n                        this._cursorInfo.relativeEndIndex = this._highlightCursorInfo.initialRelativeStartIndex;\r\n                    } else {\r\n                        this._cursorInfo.globalEndIndex = tmpIndex;\r\n                    }\r\n                }\r\n\r\n                this._markAsDirty();\r\n                return;\r\n            case \"ArrowDown\": // DOWN\r\n                // update the cursor\r\n                this._blinkIsEven = false;\r\n\r\n                if (evt) {\r\n                    if (evt.shiftKey) {\r\n                        if (!this._isTextHighlightOn) {\r\n                            this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;\r\n                            this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;\r\n                            this._highlightCursorInfo.initialRelativeStartIndex = this._cursorInfo.relativeStartIndex;\r\n                        }\r\n\r\n                        this._isTextHighlightOn = true;\r\n                        this._blinkIsEven = true;\r\n                    } else {\r\n                        this._isTextHighlightOn = false;\r\n                    }\r\n                    evt.preventDefault();\r\n                }\r\n\r\n                if (this._cursorInfo.currentLineIndex === this._lines.length - 1) {\r\n                    // Last line\r\n                    this._cursorInfo.globalStartIndex = this.text.length;\r\n                } else {\r\n                    const currentLine = this._lines[this._cursorInfo.currentLineIndex];\r\n                    const underLine = this._lines[this._cursorInfo.currentLineIndex + 1];\r\n\r\n                    let tmpIndex = 0;\r\n                    let relativeIndex = 0;\r\n                    if (!this._isTextHighlightOn || this._cursorInfo.currentLineIndex < this._highlightCursorInfo.initialLineIndex) {\r\n                        tmpIndex = this._cursorInfo.globalStartIndex;\r\n                        relativeIndex = this._cursorInfo.relativeStartIndex;\r\n                    } else {\r\n                        tmpIndex = this._cursorInfo.globalEndIndex;\r\n                        relativeIndex = this._cursorInfo.relativeEndIndex;\r\n                    }\r\n\r\n                    const currentText = currentLine.text.substr(0, relativeIndex);\r\n                    const currentWidth = this._contextForBreakLines.measureText(currentText).width;\r\n\r\n                    let underWidth = 0;\r\n                    let previousWidth = 0;\r\n\r\n                    tmpIndex += currentLine.text.length - relativeIndex + currentLine.lineEnding.length; // Start of current line\r\n                    let underLineRelativeIndex = 0;\r\n\r\n                    while (underWidth < currentWidth && underLineRelativeIndex < underLine.text.length) {\r\n                        tmpIndex++;\r\n                        underLineRelativeIndex++;\r\n                        previousWidth = Math.abs(currentWidth - underWidth);\r\n                        underWidth = this._contextForBreakLines.measureText(underLine.text.substr(0, underLineRelativeIndex)).width;\r\n                    }\r\n\r\n                    // Find closest move\r\n                    if (Math.abs(currentWidth - underWidth) > previousWidth && underLineRelativeIndex > 0) {\r\n                        tmpIndex--;\r\n                    }\r\n\r\n                    if (!this._isTextHighlightOn) {\r\n                        this._cursorInfo.globalStartIndex = tmpIndex;\r\n                    } else if (this._cursorInfo.currentLineIndex < this._highlightCursorInfo.initialLineIndex) {\r\n                        this._cursorInfo.globalStartIndex = tmpIndex;\r\n                        if (this._cursorInfo.globalStartIndex > this._cursorInfo.globalEndIndex) {\r\n                            this._cursorInfo.globalEndIndex += this._cursorInfo.globalStartIndex;\r\n                            this._cursorInfo.globalStartIndex = this._cursorInfo.globalEndIndex - this._cursorInfo.globalStartIndex;\r\n                            this._cursorInfo.globalEndIndex -= this._cursorInfo.globalStartIndex;\r\n                        }\r\n                    } else {\r\n                        this._cursorInfo.globalEndIndex = tmpIndex;\r\n                        this._cursorInfo.globalStartIndex = this._highlightCursorInfo.initialStartIndex;\r\n                    }\r\n                }\r\n\r\n                this._markAsDirty();\r\n                return;\r\n        }\r\n\r\n        // Printable characters\r\n        if (key?.length === 1) {\r\n            evt?.preventDefault();\r\n            this._currentKey = key;\r\n            this.onBeforeKeyAddObservable.notifyObservers(this);\r\n            key = this._currentKey;\r\n            if (this._addKey) {\r\n                this._isTextHighlightOn = false;\r\n                this._blinkIsEven = false;\r\n\r\n                this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex, key);\r\n                this._cursorInfo.globalStartIndex += key.length;\r\n                this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n\r\n                this._textHasChanged();\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _parseLineWordWrap(line: string = \"\", width: number, context: ICanvasRenderingContext): { text: string; width: number; lineEnding: string }[] {\r\n        const lines = [];\r\n        const words = line.split(\" \");\r\n        let lineWidth = 0;\r\n\r\n        for (let n = 0; n < words.length; n++) {\r\n            const testLine = n > 0 ? line + \" \" + words[n] : words[0];\r\n            const metrics = context.measureText(testLine);\r\n            const testWidth = metrics.width;\r\n            if (testWidth > width) {\r\n                if (n > 0) {\r\n                    // Avoid first word duplication if of too long\r\n                    lineWidth = context.measureText(line).width;\r\n                    lines.push({ text: line, width: lineWidth, lineEnding: \" \" });\r\n                }\r\n\r\n                line = words[n];\r\n\r\n                let flushedLine = \"\";\r\n\r\n                line.split(\"\").map((char) => {\r\n                    if (context.measureText(flushedLine + char).width > width) {\r\n                        lines.push({ text: flushedLine, width: context.measureText(flushedLine).width, lineEnding: \"\\n\" });\r\n                        flushedLine = \"\";\r\n                    }\r\n                    flushedLine += char;\r\n                });\r\n\r\n                line = flushedLine;\r\n                // Measure remaining characters\r\n                lineWidth = context.measureText(line).width;\r\n            } else {\r\n                lineWidth = testWidth;\r\n                line = testLine;\r\n            }\r\n        }\r\n        lines.push({ text: line, width: lineWidth, lineEnding: \" \" });\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _breakLines(refWidth: number, context: ICanvasRenderingContext): object[] {\r\n        const lines: { text: string; width: number; lineEnding: string }[] = [];\r\n        const _lines = this.text.split(\"\\n\");\r\n\r\n        if (this.clipContent) {\r\n            for (const _line of _lines) {\r\n                lines.push(...this._parseLineWordWrap(_line, refWidth, context));\r\n            }\r\n        } else {\r\n            for (const _line of _lines) {\r\n                lines.push(this._parseLine(_line, context));\r\n            }\r\n        }\r\n\r\n        lines[lines.length - 1].lineEnding = \"\\n\";\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _parseLine(line: string = \"\", context: ICanvasRenderingContext): { text: string; width: number; lineEnding: string } {\r\n        return { text: line, width: context.measureText(line).width, lineEnding: \" \" };\r\n    }\r\n\r\n    /**\r\n     * Processing of child right before the parent measurement update\r\n     *\r\n     * @param parentMeasure The parent measure\r\n     * @param context The rendering canvas\r\n     * @internal\r\n     */\r\n    protected _preMeasure(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        if (!this._fontOffset || this._wasDirty) {\r\n            this._fontOffset = Control._GetFontOffset(context.font);\r\n        }\r\n\r\n        let text = this._beforeRenderText(this._textWrapper).text;\r\n\r\n        // placeholder conditions and color setting\r\n        if (!this._isFocused && !this.text && this._placeholderText) {\r\n            text = this._placeholderText;\r\n\r\n            if (this._placeholderColor) {\r\n                context.fillStyle = this._placeholderColor;\r\n            }\r\n        }\r\n\r\n        // measures the textlength -> this.measure.width\r\n        this._textWidth = context.measureText(text).width;\r\n        // we double up the margin width\r\n        const marginWidth = this._margin.getValueInPixel(this._host, parentMeasure.width) * 2;\r\n\r\n        if (this._autoStretchWidth) {\r\n            const tmpLines = text.split(\"\\n\");\r\n            const longerString = tmpLines.reduce((acc: string, val: string) => {\r\n                const valueLength = context.measureText(val).width;\r\n                const accLength = context.measureText(acc).width;\r\n                return valueLength > accLength ? val : acc;\r\n            }, \"\");\r\n\r\n            const longerStringWidth = context.measureText(longerString).width;\r\n            this.width = Math.min(this._maxWidth.getValueInPixel(this._host, parentMeasure.width), longerStringWidth + marginWidth) + \"px\";\r\n\r\n            this.autoStretchWidth = true;\r\n        }\r\n\r\n        this._availableWidth = this._width.getValueInPixel(this._host, parentMeasure.width) - marginWidth;\r\n\r\n        // Prepare lines\r\n        this._lines = this._breakLines(this._availableWidth, context);\r\n        // can we find a cleaner implementation here?\r\n        this._contextForBreakLines = context;\r\n\r\n        if (this._autoStretchHeight) {\r\n            const textHeight = this._lines.length * this._fontOffset.height;\r\n            const totalHeight = textHeight + this._margin.getValueInPixel(this._host, parentMeasure.height) * 2;\r\n            this.height = Math.min(this._maxHeight.getValueInPixel(this._host, parentMeasure.height), totalHeight) + \"px\";\r\n\r\n            this._autoStretchHeight = true;\r\n        }\r\n\r\n        this._availableHeight = this._height.getValueInPixel(this._host, parentMeasure.height) - marginWidth;\r\n\r\n        if (this._isFocused) {\r\n            this._cursorInfo.currentLineIndex = 0;\r\n\r\n            let lineLength = this._lines[this._cursorInfo.currentLineIndex].text.length + this._lines[this._cursorInfo.currentLineIndex].lineEnding.length;\r\n            let tmpLength = 0;\r\n\r\n            while (tmpLength + lineLength <= this._cursorInfo.globalStartIndex) {\r\n                tmpLength += lineLength;\r\n\r\n                if (this._cursorInfo.currentLineIndex < this._lines.length - 1) {\r\n                    this._cursorInfo.currentLineIndex++;\r\n                    lineLength = this._lines[this._cursorInfo.currentLineIndex].text.length + this._lines[this._cursorInfo.currentLineIndex].lineEnding.length;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _computeScroll() {\r\n        this._clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n        this._clipTextTop = this._currentMeasure.top + this._margin.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n\r\n        if (this._isFocused && this._lines[this._cursorInfo.currentLineIndex].width > this._availableWidth) {\r\n            const textLeft = this._clipTextLeft - this._lines[this._cursorInfo.currentLineIndex].width + this._availableWidth;\r\n\r\n            if (!this._scrollLeft) {\r\n                this._scrollLeft = textLeft;\r\n            }\r\n        } else {\r\n            this._scrollLeft = this._clipTextLeft;\r\n        }\r\n\r\n        if (this._isFocused && !this._autoStretchHeight) {\r\n            const selectedHeight = (this._cursorInfo.currentLineIndex + 1) * this._fontOffset.height;\r\n            const textTop = this._clipTextTop - selectedHeight;\r\n\r\n            if (!this._scrollTop) {\r\n                this._scrollTop = textTop;\r\n            }\r\n        } else {\r\n            this._scrollTop = this._clipTextTop;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Processing of child after the parent measurement update\r\n     *\r\n     * @internal\r\n     */\r\n    protected _additionalProcessing(): void {\r\n        // Flush the highlighted text each frame\r\n        this.highlightedText = \"\";\r\n\r\n        this.onLinesReadyObservable.notifyObservers(this);\r\n    }\r\n\r\n    private _drawText(text: string, textWidth: number, y: number, context: ICanvasRenderingContext): void {\r\n        const width = this._currentMeasure.width;\r\n        let x = this._scrollLeft as number;\r\n        switch (this._textHorizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x += 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x += width - textWidth;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x += (width - textWidth) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this.outlineWidth) {\r\n            context.strokeText(text, this._currentMeasure.left + x, y);\r\n        }\r\n        context.fillText(text, x, y);\r\n    }\r\n\r\n    /**\r\n     * Copy the text in the clipboard\r\n     *\r\n     * @param ev The clipboard event\r\n     * @internal\r\n     */\r\n    protected _onCopyText(ev: ClipboardEvent): void {\r\n        this._isTextHighlightOn = false;\r\n        //when write permission to clipbaord data is denied\r\n        try {\r\n            ev.clipboardData && ev.clipboardData.setData(\"text/plain\", this._highlightedText);\r\n        } catch {} //pass\r\n        this._host.clipboardData = this._highlightedText;\r\n    }\r\n\r\n    /**\r\n     * Cut the text and copy it in the clipboard\r\n     *\r\n     * @param ev The clipboard event\r\n     * @internal\r\n     */\r\n    protected _onCutText(ev: ClipboardEvent): void {\r\n        if (!this._highlightedText) {\r\n            return;\r\n        }\r\n        //when write permission to clipbaord data is denied\r\n        try {\r\n            ev.clipboardData && ev.clipboardData.setData(\"text/plain\", this._highlightedText);\r\n        } catch {} //pass\r\n\r\n        this._host.clipboardData = this._highlightedText;\r\n\r\n        this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex);\r\n\r\n        this._textHasChanged();\r\n    }\r\n\r\n    /**\r\n     * Paste the copied text from the clipboard\r\n     *\r\n     * @param ev The clipboard event\r\n     * @internal\r\n     */\r\n    protected _onPasteText(ev: ClipboardEvent): void {\r\n        let data: string = \"\";\r\n        if (ev.clipboardData && ev.clipboardData.types.indexOf(\"text/plain\") !== -1) {\r\n            data = ev.clipboardData.getData(\"text/plain\");\r\n        } else {\r\n            //get the cached data; returns blank string by default\r\n            data = this._host.clipboardData;\r\n        }\r\n\r\n        this._isTextHighlightOn = false;\r\n\r\n        this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex, data);\r\n\r\n        const deltaIndex = data.length - (this._cursorInfo.globalEndIndex - this._cursorInfo.globalStartIndex);\r\n\r\n        this._cursorInfo.globalStartIndex += deltaIndex;\r\n        this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n\r\n        this._textHasChanged();\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        this._computeScroll();\r\n\r\n        this._scrollLeft = this._scrollLeft ?? 0;\r\n        this._scrollTop = this._scrollTop ?? 0;\r\n\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        // Background\r\n        if (this._isFocused) {\r\n            if (this._focusedBackground) {\r\n                context.fillStyle = this._isEnabled ? this._focusedBackground : this._disabledColor;\r\n\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        } else if (this._background) {\r\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n\r\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        // sets the color of the rectangle (border if background available)\r\n        if (this.color) {\r\n            context.fillStyle = this.color;\r\n        }\r\n\r\n        const height = this._currentMeasure.height;\r\n        const width = this._currentMeasure.width;\r\n        let rootY = 0;\r\n\r\n        switch (this._textVerticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                rootY = this._fontOffset.ascent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;\r\n                break;\r\n        }\r\n\r\n        context.save();\r\n        context.beginPath();\r\n        context.fillStyle = this.fontStyle;\r\n\r\n        // here we define the visible reactangle to clip it in next line\r\n        context.rect(this._clipTextLeft, this._clipTextTop, this._availableWidth + 2, this._availableHeight + 2);\r\n        context.clip();\r\n\r\n        // Text\r\n        rootY += this._scrollTop;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (i !== 0 && this._lineSpacing.internalValue !== 0) {\r\n                if (this._lineSpacing.isPixel) {\r\n                    rootY += this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    rootY = rootY + this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n                }\r\n            }\r\n\r\n            this._drawText(line.text, line.width, rootY, context);\r\n            rootY += this._fontOffset.height;\r\n        }\r\n\r\n        context.restore();\r\n\r\n        // Cursor\r\n        if (this._isFocused) {\r\n            // Render cursor\r\n            if (!this._blinkIsEven || this._isTextHighlightOn) {\r\n                let cursorLeft = this._scrollLeft + context.measureText(this._lines[this._cursorInfo.currentLineIndex].text.substr(0, this._cursorInfo.relativeStartIndex)).width;\r\n\r\n                if (cursorLeft < this._clipTextLeft) {\r\n                    this._scrollLeft += this._clipTextLeft - cursorLeft;\r\n                    cursorLeft = this._clipTextLeft;\r\n                    this._markAsDirty();\r\n                } else if (cursorLeft > this._clipTextLeft + this._availableWidth) {\r\n                    this._scrollLeft += this._clipTextLeft + this._availableWidth - cursorLeft;\r\n                    cursorLeft = this._clipTextLeft + this._availableWidth;\r\n                    this._markAsDirty();\r\n                }\r\n\r\n                let cursorTop = this._scrollTop + this._cursorInfo.currentLineIndex * this._fontOffset.height; //cursorTop distance from top to cursor start\r\n\r\n                if (cursorTop < this._clipTextTop) {\r\n                    this._scrollTop += this._clipTextTop - cursorTop;\r\n                    cursorTop = this._clipTextTop;\r\n                    this._markAsDirty();\r\n                } else if (cursorTop + this._fontOffset.height > this._clipTextTop + this._availableHeight) {\r\n                    this._scrollTop += this._clipTextTop + this._availableHeight - cursorTop - this._fontOffset.height;\r\n                    cursorTop = this._clipTextTop + this._availableHeight - this._fontOffset.height;\r\n                    this._markAsDirty();\r\n                }\r\n\r\n                if (!this._isTextHighlightOn) {\r\n                    context.fillRect(cursorLeft, cursorTop, 2, this._fontOffset.height);\r\n                }\r\n            }\r\n\r\n            this._resetBlinking();\r\n\r\n            //show the highlighted text\r\n            if (this._isTextHighlightOn) {\r\n                clearTimeout(this._blinkTimeout);\r\n\r\n                this._highlightedText = this.text.substring(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex);\r\n\r\n                context.globalAlpha = this._highligherOpacity;\r\n                context.fillStyle = this._textHighlightColor;\r\n\r\n                const startLineIndex = Math.min(this._cursorInfo.currentLineIndex, this._highlightCursorInfo.initialLineIndex);\r\n                const endLineIndex = Math.max(this._cursorInfo.currentLineIndex, this._highlightCursorInfo.initialLineIndex);\r\n\r\n                let highlightRootY = this._scrollTop + startLineIndex * this._fontOffset.height;\r\n\r\n                for (let i = startLineIndex; i <= endLineIndex; i++) {\r\n                    const line = this._lines[i];\r\n\r\n                    let highlightRootX = this._scrollLeft as number;\r\n                    switch (this._textHorizontalAlignment) {\r\n                        case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                            highlightRootX += 0;\r\n                            break;\r\n                        case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                            highlightRootX += width - line.width;\r\n                            break;\r\n                        case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                            highlightRootX += (width - line.width) / 2;\r\n                            break;\r\n                    }\r\n\r\n                    const begin = i === startLineIndex ? this._cursorInfo.relativeStartIndex : 0;\r\n                    const end = i === endLineIndex ? this._cursorInfo.relativeEndIndex : line.text.length;\r\n\r\n                    const leftOffsetWidth = context.measureText(line.text.substr(0, begin)).width;\r\n                    const selectedText = line.text.substring(begin, end);\r\n                    const hightlightWidth = context.measureText(selectedText).width;\r\n\r\n                    context.fillRect(highlightRootX + leftOffsetWidth, highlightRootY, hightlightWidth, this._fontOffset.height);\r\n\r\n                    highlightRootY += this._fontOffset.height;\r\n                }\r\n\r\n                if (this._cursorInfo.globalEndIndex === this._cursorInfo.globalStartIndex) {\r\n                    this._resetBlinking();\r\n                }\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n\r\n        // Border\r\n        if (this._thickness) {\r\n            if (this._isFocused) {\r\n                if (this.focusedColor) {\r\n                    context.strokeStyle = this.focusedColor;\r\n                }\r\n            } else {\r\n                if (this.color) {\r\n                    context.strokeStyle = this.color;\r\n                }\r\n            }\r\n\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.strokeRect(\r\n                this._currentMeasure.left + this._thickness / 2,\r\n                this._currentMeasure.top + this._thickness / 2,\r\n                this._currentMeasure.width - this._thickness,\r\n                this._currentMeasure.height - this._thickness\r\n            );\r\n        }\r\n    }\r\n\r\n    private _resetBlinking() {\r\n        clearTimeout(this._blinkTimeout);\r\n        this._blinkTimeout = <any>setTimeout(() => {\r\n            this._blinkIsEven = !this._blinkIsEven;\r\n            this._markAsDirty();\r\n        }, 500);\r\n    }\r\n\r\n    protected _applyStates(context: ICanvasRenderingContext): void {\r\n        super._applyStates(context);\r\n        if (this.outlineWidth) {\r\n            context.lineWidth = this.outlineWidth;\r\n            context.strokeStyle = this.outlineColor;\r\n        }\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        this._clickedCoordinateX = coordinates.x;\r\n        this._clickedCoordinateY = coordinates.y;\r\n\r\n        this._isTextHighlightOn = false;\r\n        this._highlightedText = \"\";\r\n        this._isPointerDown = true;\r\n        this._host._capturingControl[pointerId] = this;\r\n        if (this._host.focusedControl === this) {\r\n            // Move cursor\r\n            clearTimeout(this._blinkTimeout);\r\n            this._markAsDirty();\r\n            return true;\r\n        }\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        this._host.focusedControl = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    // for textselection\r\n    public _onPointerMove(target: Control, coordinates: Vector2, pointerId: number, pi: PointerInfoBase): void {\r\n        // Avoid Chromium-like beahavior when this event is fired right after onPointerDown\r\n        if (pi.event.movementX === 0 && pi.event.movementY === 0) {\r\n            return;\r\n        }\r\n\r\n        if (this._host.focusedControl === this && this._isPointerDown) {\r\n            this._clickedCoordinateX = coordinates.x;\r\n            this._clickedCoordinateY = coordinates.y;\r\n\r\n            if (!this._isTextHighlightOn) {\r\n                this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;\r\n                this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;\r\n                this._highlightCursorInfo.initialRelativeStartIndex = this._cursorInfo.relativeStartIndex;\r\n\r\n                this._isTextHighlightOn = true;\r\n            }\r\n\r\n            this._markAsDirty();\r\n        }\r\n        super._onPointerMove(target, coordinates, pointerId, pi);\r\n    }\r\n\r\n    /**\r\n     * Apply the correct position of cursor according to current modification\r\n     */\r\n    private _updateCursorPosition() {\r\n        if (!this._isFocused) {\r\n            return;\r\n        }\r\n\r\n        if (this._clickedCoordinateX && this._clickedCoordinateY) {\r\n            if (!this._isTextHighlightOn) {\r\n                this._cursorInfo = {\r\n                    globalStartIndex: 0,\r\n                    globalEndIndex: 0,\r\n                    relativeStartIndex: 0,\r\n                    relativeEndIndex: 0,\r\n                    currentLineIndex: 0,\r\n                };\r\n            }\r\n\r\n            let globalIndex = 0;\r\n            let relativeIndex = 0;\r\n\r\n            const lastClickedCoordinateY = this._clickedCoordinateY - (this._scrollTop as number);\r\n\r\n            const relativeCoordinateY = Math.floor(lastClickedCoordinateY / this._fontOffset.height);\r\n            this._cursorInfo.currentLineIndex = Math.min(Math.max(relativeCoordinateY, 0), this._lines.length - 1);\r\n\r\n            let currentSize = 0;\r\n\r\n            const relativeXPosition = this._clickedCoordinateX - (this._scrollLeft ?? 0);\r\n\r\n            let previousDist = 0;\r\n\r\n            for (let index = 0; index < this._cursorInfo.currentLineIndex; index++) {\r\n                const line = this._lines[index];\r\n                globalIndex += line.text.length + line.lineEnding.length;\r\n            }\r\n\r\n            while (currentSize < relativeXPosition && this._lines[this._cursorInfo.currentLineIndex].text.length > relativeIndex) {\r\n                relativeIndex++;\r\n                previousDist = Math.abs(relativeXPosition - currentSize);\r\n                currentSize = this._contextForBreakLines.measureText(this._lines[this._cursorInfo.currentLineIndex].text.substr(0, relativeIndex)).width;\r\n            }\r\n\r\n            // Find closest move\r\n            if (Math.abs(relativeXPosition - currentSize) > previousDist && relativeIndex > 0) {\r\n                relativeIndex--;\r\n            }\r\n\r\n            globalIndex += relativeIndex;\r\n\r\n            if (!this._isTextHighlightOn) {\r\n                this._cursorInfo.globalStartIndex = globalIndex;\r\n                this._cursorInfo.relativeStartIndex = relativeIndex;\r\n                this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n                this._cursorInfo.relativeEndIndex = this._cursorInfo.relativeStartIndex;\r\n            } else {\r\n                if (globalIndex < this._highlightCursorInfo.initialStartIndex) {\r\n                    this._cursorInfo.globalStartIndex = globalIndex;\r\n                    this._cursorInfo.relativeStartIndex = relativeIndex;\r\n                    this._cursorInfo.globalEndIndex = this._highlightCursorInfo.initialStartIndex;\r\n                    this._cursorInfo.relativeEndIndex = this._highlightCursorInfo.initialRelativeStartIndex;\r\n                } else {\r\n                    this._cursorInfo.globalStartIndex = this._highlightCursorInfo.initialStartIndex;\r\n                    this._cursorInfo.relativeStartIndex = this._highlightCursorInfo.initialRelativeStartIndex;\r\n                    this._cursorInfo.globalEndIndex = globalIndex;\r\n                    this._cursorInfo.relativeEndIndex = relativeIndex;\r\n                }\r\n            }\r\n\r\n            // Avoid the caret during highlighting\r\n            this._blinkIsEven = this._isTextHighlightOn;\r\n            this._clickedCoordinateX = null;\r\n            this._clickedCoordinateY = null;\r\n        } else {\r\n            // Standard behavior same as Current line is at least above the initial highlight index\r\n            this._cursorInfo.relativeStartIndex = 0;\r\n            this._cursorInfo.currentLineIndex = 0;\r\n\r\n            let lineLength = this._lines[this._cursorInfo.currentLineIndex].text.length + this._lines[this._cursorInfo.currentLineIndex].lineEnding.length;\r\n            let tmpLength = 0;\r\n\r\n            while (tmpLength + lineLength <= this._cursorInfo.globalStartIndex) {\r\n                tmpLength += lineLength;\r\n\r\n                if (this._cursorInfo.currentLineIndex < this._lines.length - 1) {\r\n                    this._cursorInfo.currentLineIndex++;\r\n                    lineLength = this._lines[this._cursorInfo.currentLineIndex].text.length + this._lines[this._cursorInfo.currentLineIndex].lineEnding.length;\r\n                }\r\n            }\r\n\r\n            this._cursorInfo.relativeStartIndex = this._cursorInfo.globalStartIndex - tmpLength;\r\n\r\n            if (this._highlightCursorInfo.initialStartIndex !== -1 && this._cursorInfo.globalStartIndex >= this._highlightCursorInfo.initialStartIndex) {\r\n                // Current line is at least below the initial highlight index\r\n                while (tmpLength + lineLength <= this._cursorInfo.globalEndIndex) {\r\n                    tmpLength += lineLength;\r\n\r\n                    if (this._cursorInfo.currentLineIndex < this._lines.length - 1) {\r\n                        this._cursorInfo.currentLineIndex++;\r\n                        lineLength = this._lines[this._cursorInfo.currentLineIndex].text.length + this._lines[this._cursorInfo.currentLineIndex].lineEnding.length;\r\n                    }\r\n                }\r\n\r\n                this._cursorInfo.relativeEndIndex = this._cursorInfo.globalEndIndex - tmpLength;\r\n            } else if (!this._isTextHighlightOn) {\r\n                this._cursorInfo.relativeEndIndex = this._cursorInfo.relativeStartIndex;\r\n                this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update all values of cursor information based on cursorIndex value\r\n     *\r\n     * @param offset The index to take care of\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _updateValueFromCursorIndex(offset: number) {\r\n        // Override to avoid parent behavior during _onPointerMove\r\n    }\r\n\r\n    /**\r\n     * Select the word immediatly under the cursor on double click\r\n     *\r\n     * @param _evt Pointer informations of double click\r\n     * @internal\r\n     */\r\n    protected _processDblClick(_evt: PointerInfo) {\r\n        //pre-find the start and end index of the word under cursor, speeds up the rendering\r\n        let moveLeft, moveRight;\r\n        do {\r\n            moveLeft = this._cursorInfo.globalStartIndex > 0 && this._textWrapper.isWord(this._cursorInfo.globalStartIndex - 1) ? --this._cursorInfo.globalStartIndex : 0;\r\n            moveRight =\r\n                this._cursorInfo.globalEndIndex < this._textWrapper.length && this._textWrapper.isWord(this._cursorInfo.globalEndIndex) ? ++this._cursorInfo.globalEndIndex : 0;\r\n        } while (moveLeft || moveRight);\r\n\r\n        this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;\r\n        this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;\r\n\r\n        this.onTextHighlightObservable.notifyObservers(this);\r\n\r\n        this._isTextHighlightOn = true;\r\n        this._blinkIsEven = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @internal */\r\n    protected _selectAllText() {\r\n        this._isTextHighlightOn = true;\r\n        this._blinkIsEven = true;\r\n\r\n        this._highlightCursorInfo = {\r\n            initialStartIndex: 0,\r\n            initialRelativeStartIndex: 0,\r\n            initialLineIndex: 0,\r\n        };\r\n\r\n        this._cursorInfo = {\r\n            globalStartIndex: 0,\r\n            globalEndIndex: this._textWrapper.length,\r\n            relativeEndIndex: this._lines[this._lines.length - 1].text.length,\r\n            relativeStartIndex: 0,\r\n            currentLineIndex: this._lines.length - 1,\r\n        };\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    public dipose() {\r\n        super.dispose();\r\n\r\n        this.onLinesReadyObservable.clear();\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.InputTextArea\", InputTextArea);\r\n","import { InputText } from \"./inputText\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { TextWrapper } from \"./textWrapper\";\r\n\r\n/**\r\n * Class used to create a password control\r\n */\r\nexport class InputPassword extends InputText {\r\n    protected _getTypeName(): string {\r\n        return \"InputPassword\";\r\n    }\r\n\r\n    protected _beforeRenderText(textWrapper: TextWrapper): TextWrapper {\r\n        const pwdTextWrapper = new TextWrapper();\r\n        let txt = \"\";\r\n        for (let i = 0; i < textWrapper.length; i++) {\r\n            txt += \"\\u2022\";\r\n        }\r\n        pwdTextWrapper.text = txt;\r\n        return pwdTextWrapper;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.InputPassword\", InputPassword);\r\n","import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Vector3, Matrix } from \"core/Maths/math.vector\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport type { Measure } from \"../measure\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/** Class used to render 2D lines */\r\nexport class Line extends Control {\r\n    private _lineWidth = 1;\r\n    /** @internal */\r\n    public _x1 = new ValueAndUnit(0);\r\n    /** @internal */\r\n    public _y1 = new ValueAndUnit(0);\r\n    /** @internal */\r\n    public _x2 = new ValueAndUnit(0);\r\n    /** @internal */\r\n    public _y2 = new ValueAndUnit(0);\r\n    private _dash = new Array<number>();\r\n    private _connectedControl: Control;\r\n    private _connectedControlDirtyObserver: Nullable<Observer<Control>>;\r\n\r\n    /** Gets or sets the dash pattern */\r\n    @serialize()\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the control connected with the line end */\r\n    public get connectedControl(): Control {\r\n        return this._connectedControl;\r\n    }\r\n\r\n    public set connectedControl(value: Control) {\r\n        if (this._connectedControl === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._connectedControlDirtyObserver && this._connectedControl) {\r\n            this._connectedControl.onDirtyObservable.remove(this._connectedControlDirtyObserver);\r\n            this._connectedControlDirtyObserver = null;\r\n        }\r\n\r\n        if (value) {\r\n            this._connectedControlDirtyObserver = value.onDirtyObservable.add(() => this._markAsDirty());\r\n        }\r\n\r\n        this._connectedControl = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets start coordinates on X axis */\r\n    @serialize()\r\n    public get x1(): string | number {\r\n        return this._x1.toString(this._host);\r\n    }\r\n\r\n    public set x1(value: string | number) {\r\n        if (this._x1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets start coordinates on Y axis */\r\n    @serialize()\r\n    public get y1(): string | number {\r\n        return this._y1.toString(this._host);\r\n    }\r\n\r\n    public set y1(value: string | number) {\r\n        if (this._y1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on X axis */\r\n    @serialize()\r\n    public get x2(): string | number {\r\n        return this._x2.toString(this._host);\r\n    }\r\n\r\n    public set x2(value: string | number) {\r\n        if (this._x2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on Y axis */\r\n    @serialize()\r\n    public get y2(): string | number {\r\n        return this._y2.toString(this._host);\r\n    }\r\n\r\n    public set y2(value: string | number) {\r\n        if (this._y2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    @serialize()\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets horizontal alignment */\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    /** Gets or sets vertical alignment */\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    /** @internal */\r\n    public get _effectiveX2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerX : 0) + this._x2.getValue(this._host);\r\n    }\r\n\r\n    /** @internal */\r\n    public get _effectiveY2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerY : 0) + this._y2.getValue(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Line\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this._automaticSize = true;\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Line\";\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        context.strokeStyle = this._getColor(context);\r\n        context.lineWidth = this._lineWidth;\r\n        context.setLineDash(this._dash);\r\n\r\n        context.beginPath();\r\n        context.moveTo(this._cachedParentMeasure.left + this._x1.getValue(this._host), this._cachedParentMeasure.top + this._y1.getValue(this._host));\r\n\r\n        context.lineTo(this._cachedParentMeasure.left + this._effectiveX2, this._cachedParentMeasure.top + this._effectiveY2);\r\n        context.stroke();\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public _measure(): void {\r\n        // Width / Height\r\n        this._currentMeasure.width = Math.abs(this._x1.getValue(this._host) - this._effectiveX2) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._y1.getValue(this._host) - this._effectiveY2) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure): void {\r\n        this._currentMeasure.left = parentMeasure.left + Math.min(this._x1.getValue(this._host), this._effectiveX2) - this._lineWidth / 2;\r\n        this._currentMeasure.top = parentMeasure.top + Math.min(this._y1.getValue(this._host), this._effectiveY2) - this._lineWidth / 2;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line given 3D cartesian coordinates.\r\n     * @param position Targeted world position\r\n     * @param scene Scene\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene, end: boolean = false): void {\r\n        if (!this._host || this.parent !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        const globalViewport = this._host._getGlobalViewport();\r\n        const projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition, end);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line to a position in screen absolute space.\r\n     * @param projectedPosition Position in screen absolute space (X, Y)\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3, end: boolean = false): void {\r\n        const x: string = projectedPosition.x + this._linkOffsetX.getValue(this._host) + \"px\";\r\n        const y: string = projectedPosition.y + this._linkOffsetY.getValue(this._host) + \"px\";\r\n\r\n        if (end) {\r\n            this.x2 = x;\r\n            this.y2 = y;\r\n            this._x2.ignoreAdaptiveScaling = true;\r\n            this._y2.ignoreAdaptiveScaling = true;\r\n        } else {\r\n            this.x1 = x;\r\n            this.y1 = y;\r\n            this._x1.ignoreAdaptiveScaling = true;\r\n            this._y1.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Line\", Line);\r\n","import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport { Epsilon } from \"core/Maths/math.constants\";\r\nimport type { Camera } from \"core/Cameras/camera\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\n\r\nimport type { MultiLine } from \"./controls/multiLine\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\nimport type { Control } from \"./controls/control\";\r\n\r\n/**\r\n * Class used to store a point for a MultiLine object.\r\n * The point can be pure 2D coordinates, a mesh or a control\r\n */\r\nexport class MultiLinePoint {\r\n    private _multiLine: MultiLine;\r\n\r\n    private _x: ValueAndUnit;\r\n    private _y: ValueAndUnit;\r\n    private _control: Nullable<Control>;\r\n    private _mesh: Nullable<AbstractMesh>;\r\n\r\n    private _controlObserver: Nullable<Observer<Control>>;\r\n    private _meshObserver: Nullable<Observer<Camera>>;\r\n\r\n    /** @internal */\r\n    public _point: Vector3;\r\n\r\n    /**\r\n     * Creates a new MultiLinePoint\r\n     * @param multiLine defines the source MultiLine object\r\n     */\r\n    constructor(multiLine: MultiLine) {\r\n        this._multiLine = multiLine;\r\n\r\n        this._x = new ValueAndUnit(0);\r\n        this._y = new ValueAndUnit(0);\r\n\r\n        this._point = new Vector3(0, 0, 0);\r\n    }\r\n\r\n    /** Gets or sets x coordinate */\r\n    public get x(): string | number {\r\n        return this._x.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set x(value: string | number) {\r\n        if (this._x.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets y coordinate */\r\n    public get y(): string | number {\r\n        return this._y.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set y(value: string | number) {\r\n        if (this._y.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the control associated with this point */\r\n    public get control(): Nullable<Control> {\r\n        return this._control;\r\n    }\r\n\r\n    public set control(value: Nullable<Control>) {\r\n        if (this._control === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._control && this._controlObserver) {\r\n            this._control.onDirtyObservable.remove(this._controlObserver);\r\n\r\n            this._controlObserver = null;\r\n        }\r\n\r\n        this._control = value;\r\n\r\n        if (this._control) {\r\n            this._controlObserver = this._control.onDirtyObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the mesh associated with this point */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._mesh;\r\n    }\r\n\r\n    public set mesh(value: Nullable<AbstractMesh>) {\r\n        if (this._mesh === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._mesh && this._meshObserver) {\r\n            this._mesh.getScene().onAfterCameraRenderObservable.remove(this._meshObserver);\r\n        }\r\n\r\n        this._mesh = value;\r\n\r\n        if (this._mesh) {\r\n            this._meshObserver = this._mesh.getScene().onAfterCameraRenderObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Resets links */\r\n    public resetLinks(): void {\r\n        this.control = null;\r\n        this.mesh = null;\r\n    }\r\n\r\n    /**\r\n     * Gets a translation vector with Z component\r\n     * @returns the translation vector\r\n     */\r\n    public translate(): Vector3 {\r\n        this._point = this._translatePoint();\r\n\r\n        return this._point;\r\n    }\r\n\r\n    private _translatePoint(): Vector3 {\r\n        if (this._mesh != null) {\r\n            return this._multiLine._host.getProjectedPositionWithZ(this._mesh.getBoundingInfo().boundingSphere.center, this._mesh.getWorldMatrix());\r\n        } else if (this._control != null) {\r\n            return new Vector3(this._control.centerX, this._control.centerY, 1 - Epsilon);\r\n        } else {\r\n            const host: any = this._multiLine._host as any;\r\n\r\n            const xValue: number = this._x.getValueInPixel(host, Number(host._canvas.width));\r\n            const yValue: number = this._y.getValueInPixel(host, Number(host._canvas.height));\r\n\r\n            return new Vector3(xValue, yValue, 1 - Epsilon);\r\n        }\r\n    }\r\n\r\n    /** Release associated resources */\r\n    public dispose(): void {\r\n        this.resetLinks();\r\n    }\r\n}\r\n","import type { Nullable } from \"core/types\";\r\nimport { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\n\r\nimport { Control } from \"./control\";\r\nimport { MultiLinePoint } from \"../multiLinePoint\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { Vector3 } from \"core/Maths/math.vector\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/**\r\n * Class used to create multi line control\r\n */\r\nexport class MultiLine extends Control {\r\n    private _lineWidth: number = 1;\r\n    private _dash: number[];\r\n    private _points: Nullable<MultiLinePoint>[];\r\n\r\n    private _minX: Nullable<number>;\r\n    private _minY: Nullable<number>;\r\n    private _maxX: Nullable<number>;\r\n    private _maxY: Nullable<number>;\r\n\r\n    /**\r\n     * Creates a new MultiLine\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this._automaticSize = true;\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._dash = [];\r\n        this._points = [];\r\n    }\r\n\r\n    /** Gets or sets dash pattern */\r\n    @serialize()\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets point stored at specified index\r\n     * @param index defines the index to look for\r\n     * @returns the requested point if found\r\n     */\r\n    public getAt(index: number): MultiLinePoint {\r\n        if (!this._points[index]) {\r\n            this._points[index] = new MultiLinePoint(this);\r\n        }\r\n\r\n        return this._points[index] as MultiLinePoint;\r\n    }\r\n\r\n    /** Function called when a point is updated */\r\n    public onPointUpdate = (): void => {\r\n        this._markAsDirty();\r\n    };\r\n\r\n    /**\r\n     * Adds new points to the point collection\r\n     * @param items defines the list of items (mesh, control or 2d coordinates) to add\r\n     * @returns the list of created MultiLinePoint\r\n     */\r\n    public add(...items: (AbstractMesh | Control | { x: string | number; y: string | number })[]): MultiLinePoint[] {\r\n        return items.map((item) => this.push(item));\r\n    }\r\n\r\n    /**\r\n     * Adds a new point to the point collection\r\n     * @param item defines the item (mesh, control or 2d coordinates) to add\r\n     * @returns the created MultiLinePoint\r\n     */\r\n    public push(item?: AbstractMesh | Control | { x: string | number; y: string | number }): MultiLinePoint {\r\n        const point: MultiLinePoint = this.getAt(this._points.length);\r\n\r\n        if (item == null) {\r\n            return point;\r\n        }\r\n\r\n        if (item instanceof AbstractMesh) {\r\n            point.mesh = item;\r\n        } else if (item instanceof Control) {\r\n            point.control = item;\r\n        } else if (item.x != null && item.y != null) {\r\n            point.x = item.x;\r\n            point.y = item.y;\r\n        }\r\n\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific value or point from the active point collection\r\n     * @param value defines the value or point to remove\r\n     */\r\n    public remove(value: number | MultiLinePoint): void {\r\n        let index: number;\r\n\r\n        if (value instanceof MultiLinePoint) {\r\n            index = this._points.indexOf(value);\r\n\r\n            if (index === -1) {\r\n                return;\r\n            }\r\n        } else {\r\n            index = value;\r\n        }\r\n\r\n        const point: Nullable<MultiLinePoint> = this._points[index];\r\n\r\n        if (!point) {\r\n            return;\r\n        }\r\n\r\n        point.dispose();\r\n\r\n        this._points.splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     * Resets this object to initial state (no point)\r\n     */\r\n    public reset(): void {\r\n        while (this._points.length > 0) {\r\n            this.remove(this._points.length - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets all links\r\n     */\r\n    public resetLinks(): void {\r\n        this._points.forEach((point) => {\r\n            if (point != null) {\r\n                point.resetLinks();\r\n            }\r\n        });\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MultiLine\";\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._lineWidth;\r\n        context.setLineDash(this._dash);\r\n\r\n        context.beginPath();\r\n\r\n        let first: boolean = true; //first index is not necessarily 0\r\n        let previousPoint: Vector3;\r\n\r\n        this._points.forEach((point) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            if (first) {\r\n                context.moveTo(point._point.x, point._point.y);\r\n\r\n                first = false;\r\n            } else {\r\n                if (point._point.z < 1 && previousPoint.z < 1) {\r\n                    context.lineTo(point._point.x, point._point.y);\r\n                } else {\r\n                    context.moveTo(point._point.x, point._point.y);\r\n                }\r\n            }\r\n            previousPoint = point._point;\r\n        });\r\n\r\n        context.stroke();\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(): void {\r\n        this._minX = null;\r\n        this._minY = null;\r\n        this._maxX = null;\r\n        this._maxY = null;\r\n\r\n        this._points.forEach((point) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            point.translate();\r\n\r\n            if (this._minX == null || point._point.x < this._minX) {\r\n                this._minX = point._point.x;\r\n            }\r\n            if (this._minY == null || point._point.y < this._minY) {\r\n                this._minY = point._point.y;\r\n            }\r\n            if (this._maxX == null || point._point.x > this._maxX) {\r\n                this._maxX = point._point.x;\r\n            }\r\n            if (this._maxY == null || point._point.y > this._maxY) {\r\n                this._maxY = point._point.y;\r\n            }\r\n        });\r\n\r\n        if (this._minX == null) {\r\n            this._minX = 0;\r\n        }\r\n        if (this._minY == null) {\r\n            this._minY = 0;\r\n        }\r\n        if (this._maxX == null) {\r\n            this._maxX = 0;\r\n        }\r\n        if (this._maxY == null) {\r\n            this._maxY = 0;\r\n        }\r\n    }\r\n\r\n    public _measure(): void {\r\n        if (this._minX == null || this._maxX == null || this._minY == null || this._maxY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.width = Math.abs(this._maxX - this._minX) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._maxY - this._minY) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(): void {\r\n        if (this._minX == null || this._minY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.left = this._minX - this._lineWidth / 2;\r\n        this._currentMeasure.top = this._minY - this._lineWidth / 2;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.reset();\r\n\r\n        super.dispose();\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.MultiLine\", MultiLine);\r\n","import { Observable } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/**\r\n * Class used to create radio button controls\r\n */\r\nexport class RadioButton extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    @serialize()\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets group name */\r\n    @serialize()\r\n    public group = \"\";\r\n\r\n    /** Observable raised when isChecked is changed */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    @serialize()\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    @serialize()\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    @serialize()\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n\r\n        if (this._isChecked && this._host) {\r\n            // Update all controls from same group\r\n            this._host.executeOnAllControls((control) => {\r\n                if (control === this) {\r\n                    return;\r\n                }\r\n\r\n                if ((<any>control).group === undefined) {\r\n                    return;\r\n                }\r\n                const childRadio = <RadioButton>control;\r\n                if (childRadio.group === this.group) {\r\n                    childRadio.isChecked = false;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new RadioButton\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"RadioButton\";\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        const actualWidth = this._currentMeasure.width - this._thickness;\r\n        const actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        // Outer\r\n        Control.drawEllipse(\r\n            this._currentMeasure.left + this._currentMeasure.width / 2,\r\n            this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2,\r\n            this._currentMeasure.height / 2 - this._thickness / 2,\r\n            context\r\n        );\r\n\r\n        context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n        context.fill();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._thickness;\r\n\r\n        context.stroke();\r\n\r\n        // Inner\r\n        if (this._isChecked) {\r\n            context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n            const offsetWidth = actualWidth * this._checkSizeRatio;\r\n            const offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n            Control.drawEllipse(\r\n                this._currentMeasure.left + this._currentMeasure.width / 2,\r\n                this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                offsetWidth / 2 - this._thickness / 2,\r\n                offseHeight / 2 - this._thickness / 2,\r\n                context\r\n            );\r\n\r\n            context.fill();\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isReadOnly) {\r\n            return true;\r\n        }\r\n\r\n        if (!this.isChecked) {\r\n            this.isChecked = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a radio button with a header\r\n     * @param title defines the label to use for the header\r\n     * @param group defines the group to use for the radio button\r\n     * @param isChecked defines the initial state of the radio button\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the radio button and a textBlock\r\n     */\r\n    public static AddRadioButtonWithHeader(title: string, group: string, isChecked: boolean, onValueChanged: (button: RadioButton, value: boolean) => void): StackPanel {\r\n        const panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        const radio = new RadioButton();\r\n        radio.width = \"20px\";\r\n        radio.height = \"20px\";\r\n        radio.isChecked = isChecked;\r\n        radio.color = \"green\";\r\n        radio.group = group;\r\n        radio.onIsCheckedChangedObservable.add((value) => onValueChanged(radio, value));\r\n        panel.addControl(radio);\r\n\r\n        const header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.RadioButton\", RadioButton);\r\n","import { Observable } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Control } from \"../control\";\r\nimport { ValueAndUnit } from \"../../valueAndUnit\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class BaseSlider extends Control {\r\n    protected _thumbWidth = new ValueAndUnit(20, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _minimum = 0;\r\n    private _maximum = 100;\r\n    private _value = 50;\r\n    private _isVertical = false;\r\n    protected _barOffset = new ValueAndUnit(5, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _isThumbClamped = false;\r\n    protected _displayThumb = true;\r\n    private _step = 0;\r\n\r\n    private _lastPointerDownId = -1;\r\n\r\n    // Shared rendering info\r\n    protected _effectiveBarOffset = 0;\r\n    protected _renderLeft: number;\r\n    protected _renderTop: number;\r\n    protected _renderWidth: number;\r\n    protected _renderHeight: number;\r\n    protected _backgroundBoxLength: number;\r\n    protected _backgroundBoxThickness: number;\r\n    protected _effectiveThumbThickness: number;\r\n\r\n    /** Observable raised when the slider value changes */\r\n    public onValueChangedObservable = new Observable<number>();\r\n\r\n    /** Gets or sets a boolean indicating if the thumb must be rendered */\r\n    @serialize()\r\n    public get displayThumb(): boolean {\r\n        return this._displayThumb;\r\n    }\r\n\r\n    public set displayThumb(value: boolean) {\r\n        if (this._displayThumb === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayThumb = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a step to apply to values (0 by default) */\r\n    @serialize()\r\n    public get step(): number {\r\n        return this._step;\r\n    }\r\n\r\n    public set step(value: number) {\r\n        if (this._step === value) {\r\n            return;\r\n        }\r\n\r\n        this._step = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets main bar offset (ie. the margin applied to the value bar) */\r\n    @serialize()\r\n    public get barOffset(): string | number {\r\n        return this._barOffset.toString(this._host);\r\n    }\r\n\r\n    /** Gets main bar offset in pixels*/\r\n    public get barOffsetInPixels(): number {\r\n        return this._barOffset.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set barOffset(value: string | number) {\r\n        if (this._barOffset.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._barOffset.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets thumb width */\r\n    @serialize()\r\n    public get thumbWidth(): string | number {\r\n        return this._thumbWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets thumb width in pixels */\r\n    public get thumbWidthInPixels(): number {\r\n        return this._thumbWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set thumbWidth(value: string | number) {\r\n        if (this._thumbWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._thumbWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets minimum value */\r\n    @serialize()\r\n    public get minimum(): number {\r\n        return this._minimum;\r\n    }\r\n\r\n    public set minimum(value: number) {\r\n        if (this._minimum === value) {\r\n            return;\r\n        }\r\n\r\n        this._minimum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets maximum value */\r\n    @serialize()\r\n    public get maximum(): number {\r\n        return this._maximum;\r\n    }\r\n\r\n    public set maximum(value: number) {\r\n        if (this._maximum === value) {\r\n            return;\r\n        }\r\n\r\n        this._maximum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets current value */\r\n    @serialize()\r\n    public get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: number) {\r\n        value = Math.max(Math.min(value, this._maximum), this._minimum);\r\n\r\n        if (this._value === value) {\r\n            return;\r\n        }\r\n\r\n        this._value = value;\r\n        this._markAsDirty();\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /**Gets or sets a boolean indicating if the slider should be vertical or horizontal */\r\n    @serialize()\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating if the thumb can go over main bar extends */\r\n    @serialize()\r\n    public get isThumbClamped(): boolean {\r\n        return this._isThumbClamped;\r\n    }\r\n\r\n    public set isThumbClamped(value: boolean) {\r\n        if (this._isThumbClamped === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbClamped = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new BaseSlider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"BaseSlider\";\r\n    }\r\n\r\n    protected _getThumbPosition() {\r\n        if (this.isVertical) {\r\n            return ((this.maximum - this.value) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\r\n        }\r\n\r\n        return ((this.value - this.minimum) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\r\n    }\r\n\r\n    protected _getThumbThickness(type: string): number {\r\n        let thumbThickness = 0;\r\n        switch (type) {\r\n            case \"circle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.max(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\r\n                } else {\r\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n                }\r\n                break;\r\n            case \"rectangle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.min(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\r\n                } else {\r\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n                }\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    protected _prepareRenderingData(type: string) {\r\n        // Main bar\r\n        this._effectiveBarOffset = 0;\r\n        this._renderLeft = this._currentMeasure.left;\r\n        this._renderTop = this._currentMeasure.top;\r\n        this._renderWidth = this._currentMeasure.width;\r\n        this._renderHeight = this._currentMeasure.height;\r\n\r\n        this._backgroundBoxLength = Math.max(this._currentMeasure.width, this._currentMeasure.height);\r\n        this._backgroundBoxThickness = Math.min(this._currentMeasure.width, this._currentMeasure.height);\r\n        this._effectiveThumbThickness = this._getThumbThickness(type);\r\n\r\n        if (this.displayThumb) {\r\n            this._backgroundBoxLength -= this._effectiveThumbThickness;\r\n        }\r\n        //throw error when height is less than width for vertical slider\r\n        if (this.isVertical && this._currentMeasure.height < this._currentMeasure.width) {\r\n            console.error(\"Height should be greater than width\");\r\n            return;\r\n        }\r\n        if (this._barOffset.isPixel) {\r\n            this._effectiveBarOffset = Math.min(this._barOffset.getValue(this._host), this._backgroundBoxThickness);\r\n        } else {\r\n            this._effectiveBarOffset = this._backgroundBoxThickness * this._barOffset.getValue(this._host);\r\n        }\r\n\r\n        this._backgroundBoxThickness -= this._effectiveBarOffset * 2;\r\n\r\n        if (this.isVertical) {\r\n            this._renderLeft += this._effectiveBarOffset;\r\n            if (!this.isThumbClamped && this.displayThumb) {\r\n                this._renderTop += this._effectiveThumbThickness / 2;\r\n            }\r\n\r\n            this._renderHeight = this._backgroundBoxLength;\r\n            this._renderWidth = this._backgroundBoxThickness;\r\n        } else {\r\n            this._renderTop += this._effectiveBarOffset;\r\n            if (!this.isThumbClamped && this.displayThumb) {\r\n                this._renderLeft += this._effectiveThumbThickness / 2;\r\n            }\r\n            this._renderHeight = this._backgroundBoxThickness;\r\n            this._renderWidth = this._backgroundBoxLength;\r\n        }\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        let value: number;\r\n        if (this._isVertical) {\r\n            value = this._minimum + (1 - (y - this._currentMeasure.top) / this._currentMeasure.height) * (this._maximum - this._minimum);\r\n        } else {\r\n            value = this._minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this._maximum - this._minimum);\r\n        }\r\n        this.value = this._step ? Math.round(value / this._step) * this._step : value;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isReadOnly) {\r\n            return true;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n        this._lastPointerDownId = pointerId;\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2, pointerId: number, pi: PointerInfoBase): void {\r\n        // Only listen to pointer move events coming from the last pointer to click on the element (To support dual vr controller interaction)\r\n        if (pointerId != this._lastPointerDownId) {\r\n            return;\r\n        }\r\n\r\n        if (this._pointerIsDown && !this.isReadOnly) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates, pointerId, pi);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    public _onCanvasBlur(): void {\r\n        this._forcePointerUp();\r\n        super._onCanvasBlur();\r\n    }\r\n}\r\n","import { BaseSlider } from \"./baseSlider\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { BaseGradient } from \"../gradient/BaseGradient\";\r\nimport type { AdvancedDynamicTexture } from \"gui/2D/advancedDynamicTexture\";\r\nimport { Tools } from \"core/Misc/tools\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class Slider extends BaseSlider {\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _thumbColor = \"\";\r\n    private _isThumbCircle = false;\r\n    protected _displayValueBar = true;\r\n    private _backgroundGradient: Nullable<BaseGradient> = null;\r\n\r\n    /** Gets or sets a boolean indicating if the value bar must be rendered */\r\n    @serialize()\r\n    public get displayValueBar(): boolean {\r\n        return this._displayValueBar;\r\n    }\r\n\r\n    public set displayValueBar(value: boolean) {\r\n        if (this._displayValueBar === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayValueBar = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets border color */\r\n    @serialize()\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    @serialize()\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background gradient */\r\n    public get backgroundGradient(): Nullable<BaseGradient> {\r\n        return this._backgroundGradient;\r\n    }\r\n\r\n    public set backgroundGradient(value: Nullable<BaseGradient>) {\r\n        if (this._backgroundGradient === value) {\r\n            return;\r\n        }\r\n\r\n        this._backgroundGradient = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets thumb's color */\r\n    @serialize()\r\n    public get thumbColor(): string {\r\n        return this._thumbColor;\r\n    }\r\n\r\n    public set thumbColor(value: string) {\r\n        if (this._thumbColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the thumb should be round or square */\r\n    @serialize()\r\n    public get isThumbCircle(): boolean {\r\n        return this._isThumbCircle;\r\n    }\r\n\r\n    public set isThumbCircle(value: boolean) {\r\n        if (this._isThumbCircle === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbCircle = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Slider\";\r\n    }\r\n\r\n    protected _getBackgroundColor(context: ICanvasRenderingContext) {\r\n        return this._backgroundGradient ? this._backgroundGradient.getCanvasGradient(context) : this._background;\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        this._prepareRenderingData(this.isThumbCircle ? \"circle\" : \"rectangle\");\r\n        let left = this._renderLeft;\r\n        let top = this._renderTop;\r\n        const width = this._renderWidth;\r\n        const height = this._renderHeight;\r\n\r\n        let radius = 0;\r\n\r\n        if (this.isThumbClamped && this.isThumbCircle) {\r\n            if (this.isVertical) {\r\n                top += this._effectiveThumbThickness / 2;\r\n            } else {\r\n                left += this._effectiveThumbThickness / 2;\r\n            }\r\n\r\n            radius = this._backgroundBoxThickness / 2;\r\n        } else {\r\n            radius = (this._effectiveThumbThickness - this._effectiveBarOffset) / 2;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        const thumbPosition = this._getThumbPosition();\r\n        context.fillStyle = this._getBackgroundColor(context);\r\n\r\n        if (this.isVertical) {\r\n            if (this.isThumbClamped) {\r\n                if (this.isThumbCircle) {\r\n                    context.beginPath();\r\n                    context.arc(left + this._backgroundBoxThickness / 2, top, radius, Math.PI, 2 * Math.PI);\r\n                    context.fill();\r\n                    context.fillRect(left, top, width, height);\r\n                } else {\r\n                    context.fillRect(left, top, width, height + this._effectiveThumbThickness);\r\n                }\r\n            } else {\r\n                context.fillRect(left, top, width, height);\r\n            }\r\n        } else {\r\n            if (this.isThumbClamped) {\r\n                if (this.isThumbCircle) {\r\n                    context.beginPath();\r\n                    context.arc(left + this._backgroundBoxLength, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                    context.fill();\r\n                    context.fillRect(left, top, width, height);\r\n                } else {\r\n                    context.fillRect(left, top, width + this._effectiveThumbThickness, height);\r\n                }\r\n            } else {\r\n                context.fillRect(left, top, width, height);\r\n            }\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        // Value bar\r\n        context.fillStyle = this._getColor(context);\r\n        if (this._displayValueBar) {\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + this._backgroundBoxThickness / 2, top + this._backgroundBoxLength, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                    } else {\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                    }\r\n                } else {\r\n                    context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            } else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    } else {\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                } else {\r\n                    context.fillRect(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Thumb\r\n        context.fillStyle = this._thumbColor || this._getColor(context);\r\n        if (this.displayThumb) {\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n            if (this._isThumbCircle) {\r\n                context.beginPath();\r\n                if (this.isVertical) {\r\n                    context.arc(left + this._backgroundBoxThickness / 2, top + thumbPosition, radius, 0, 2 * Math.PI);\r\n                } else {\r\n                    context.arc(left + thumbPosition, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                }\r\n                context.fill();\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                context.stroke();\r\n            } else {\r\n                if (this.isVertical) {\r\n                    context.fillRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                } else {\r\n                    context.fillRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                if (this.isVertical) {\r\n                    context.strokeRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                } else {\r\n                    context.strokeRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    public serialize(serializationObject: any) {\r\n        super.serialize(serializationObject);\r\n\r\n        if (this.backgroundGradient) {\r\n            serializationObject.backgroundGradient = {};\r\n            this.backgroundGradient.serialize(serializationObject.backgroundGradient);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        super._parseFromContent(serializedObject, host);\r\n\r\n        if (serializedObject.backgroundGradient) {\r\n            const className = Tools.Instantiate(\"BABYLON.GUI.\" + serializedObject.backgroundGradient.className);\r\n            this.backgroundGradient = new className();\r\n            this.backgroundGradient!.parse(serializedObject.backgroundGradient);\r\n        }\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Slider\", Slider);\r\n","import { Rectangle } from \"./rectangle\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Checkbox } from \"./checkbox\";\r\nimport { RadioButton } from \"./radioButton\";\r\nimport { Slider } from \"./sliders/slider\";\r\nimport { Container } from \"./container\";\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n */\r\nexport class SelectorGroup {\r\n    private _groupPanel = new StackPanel();\r\n    private _selectors: StackPanel[] = new Array();\r\n    private _groupHeader: TextBlock;\r\n\r\n    /**\r\n     * Creates a new SelectorGroup\r\n     * @param name of group, used as a group heading\r\n     */\r\n    constructor(\r\n        /** name of SelectorGroup */\r\n        public name: string\r\n    ) {\r\n        this._groupPanel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._groupPanel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._groupHeader = this._addGroupHeader(name);\r\n    }\r\n\r\n    /** Gets the groupPanel of the SelectorGroup  */\r\n    public get groupPanel(): StackPanel {\r\n        return this._groupPanel;\r\n    }\r\n\r\n    /** Gets the selectors array */\r\n    public get selectors(): StackPanel[] {\r\n        return this._selectors;\r\n    }\r\n\r\n    /** Gets and sets the group header */\r\n    public get header() {\r\n        return this._groupHeader.text;\r\n    }\r\n\r\n    public set header(label: string) {\r\n        if (this._groupHeader.text === \"label\") {\r\n            return;\r\n        }\r\n\r\n        this._groupHeader.text = label;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _addGroupHeader(text: string): TextBlock {\r\n        const groupHeading = new TextBlock(\"groupHead\", text);\r\n        groupHeading.width = 0.9;\r\n        groupHeading.height = \"30px\";\r\n        groupHeading.textWrapping = true;\r\n        groupHeading.color = \"black\";\r\n        groupHeading.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.left = \"2px\";\r\n        this._groupPanel.addControl(groupHeading);\r\n        return groupHeading;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        return this._selectors[selectorNb];\r\n    }\r\n\r\n    /** Removes the selector at the given position\r\n     * @param selectorNb the position of the selector within the group\r\n     */\r\n    public removeSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        this._groupPanel.removeControl(this._selectors[selectorNb]);\r\n        this._selectors.splice(selectorNb, 1);\r\n    }\r\n}\r\n\r\n/** Class used to create a CheckboxGroup\r\n * which contains groups of checkbox buttons\r\n */\r\nexport class CheckboxGroup extends SelectorGroup {\r\n    /** Adds a checkbox as a control\r\n     * @param text is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public addCheckbox(text: string, func = (s: boolean) => {}, checked: boolean = false): void {\r\n        checked = checked || false;\r\n        const button = new Checkbox();\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function (state) {\r\n            func(state);\r\n        });\r\n\r\n        const _selector = Control.AddHeader(button, text, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Checkbox>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n */\r\nexport class RadioGroup extends SelectorGroup {\r\n    private _selectNb = 0;\r\n\r\n    /** Adds a radio button as a control\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public addRadio(label: string, func = (n: number) => {}, checked = false): void {\r\n        const nb = this._selectNb++;\r\n        const button = new RadioButton();\r\n        button.name = label;\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.group = this.name;\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function (state) {\r\n            if (state) {\r\n                func(nb);\r\n            }\r\n        });\r\n\r\n        const _selector = Control.AddHeader(button, label, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<RadioButton>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a SliderGroup\r\n * which contains groups of slider buttons\r\n */\r\nexport class SliderGroup extends SelectorGroup {\r\n    /**\r\n     * Adds a slider to the SelectorGroup\r\n     * @param label is the label for the SliderBar\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onValueChange is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addSlider(\r\n        label: string,\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        func = (v: number) => {},\r\n        unit: string = \"Units\",\r\n        min: number = 0,\r\n        max: number = 0,\r\n        value: number = 0,\r\n        onValueChange = (v: number) => {\r\n            return v | 0;\r\n        }\r\n    ): void {\r\n        const button = new Slider();\r\n        button.name = unit;\r\n        button.value = value;\r\n        button.minimum = min;\r\n        button.maximum = max;\r\n        button.width = 0.9;\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.borderColor = \"black\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        button.left = \"4px\";\r\n        button.paddingBottom = \"4px\";\r\n\r\n        button.onValueChangedObservable.add(function (value) {\r\n            (<TextBlock>button.parent!.children[0]).text = button.parent!.children[0].name + \": \" + onValueChange(value) + \" \" + button.name;\r\n            func(value);\r\n        });\r\n\r\n        const _selector = Control.AddHeader(button, label + \": \" + onValueChange(value) + \" \" + unit, \"30px\", { isHorizontal: false, controlFirst: false });\r\n        _selector.height = \"60px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        _selector.children[0].name = label;\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        this.selectors[selectorNb].children[0].name = label;\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).text =\r\n            label + \": \" + (<Slider>this.selectors[selectorNb].children[1]).value + \" \" + this.selectors[selectorNb].children[1].name;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).color = color;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[1].color = color;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Slider>this.selectors[selectorNb].children[1]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to hold the controls for the checkboxes, radio buttons and sliders\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/selector\r\n */\r\nexport class SelectionPanel extends Rectangle {\r\n    private _panel: StackPanel;\r\n    private _buttonColor: string = \"#364249\";\r\n    private _buttonBackground: string = \"#CCCCCC\";\r\n    private _headerColor: string = \"black\";\r\n    private _barColor: string = \"white\";\r\n    private _barHeight: string = \"2px\";\r\n    private _spacerHeight: string = \"20px\";\r\n    private _labelColor: string;\r\n    private _groups: SelectorGroup[];\r\n    private _bars: any[] = new Array();\r\n\r\n    /**\r\n     * Creates a new SelectionPanel\r\n     * @param name of SelectionPanel\r\n     * @param groups is an array of SelectionGroups\r\n     */\r\n    constructor(\r\n        /** name of SelectionPanel */\r\n        public name: string,\r\n        /** an array of SelectionGroups */\r\n        public groups: SelectorGroup[] = []\r\n    ) {\r\n        super(name);\r\n        this._groups = groups;\r\n        this.thickness = 2;\r\n        this._panel = new StackPanel();\r\n        this._panel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._panel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._panel.top = 5;\r\n        this._panel.left = 5;\r\n        this._panel.width = 0.95;\r\n        if (groups.length > 0) {\r\n            for (let i = 0; i < groups.length - 1; i++) {\r\n                this._panel.addControl(groups[i].groupPanel);\r\n                this._addSpacer();\r\n            }\r\n            this._panel.addControl(groups[groups.length - 1].groupPanel);\r\n        }\r\n        this.addControl(this._panel);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"SelectionPanel\";\r\n    }\r\n\r\n    /** Gets the (stack) panel of the SelectionPanel  */\r\n    public get panel(): StackPanel {\r\n        return this._panel;\r\n    }\r\n\r\n    /** Gets or sets the headerColor */\r\n    public get headerColor(): string {\r\n        return this._headerColor;\r\n    }\r\n\r\n    public set headerColor(color: string) {\r\n        if (this._headerColor === color) {\r\n            return;\r\n        }\r\n        this._headerColor = color;\r\n        this._setHeaderColor();\r\n    }\r\n\r\n    private _setHeaderColor() {\r\n        for (let i = 0; i < this._groups.length; i++) {\r\n            this._groups[i].groupPanel.children[0].color = this._headerColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button color */\r\n    public get buttonColor(): string {\r\n        return this._buttonColor;\r\n    }\r\n\r\n    public set buttonColor(color: string) {\r\n        if (this._buttonColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonColor = color;\r\n        this._setbuttonColor();\r\n    }\r\n\r\n    private _setbuttonColor() {\r\n        for (let i = 0; i < this._groups.length; i++) {\r\n            for (let j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonColor(j, this._buttonColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the label color */\r\n    public get labelColor(): string {\r\n        return this._labelColor;\r\n    }\r\n\r\n    public set labelColor(color: string) {\r\n        if (this._labelColor === color) {\r\n            return;\r\n        }\r\n        this._labelColor = color;\r\n        this._setLabelColor();\r\n    }\r\n\r\n    private _setLabelColor() {\r\n        for (let i = 0; i < this._groups.length; i++) {\r\n            for (let j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorLabelColor(j, this._labelColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button background */\r\n    public get buttonBackground(): string {\r\n        return this._buttonBackground;\r\n    }\r\n\r\n    public set buttonBackground(color: string) {\r\n        if (this._buttonBackground === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonBackground = color;\r\n        this._setButtonBackground();\r\n    }\r\n\r\n    private _setButtonBackground() {\r\n        for (let i = 0; i < this._groups.length; i++) {\r\n            for (let j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonBackground(j, this._buttonBackground);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the color of separator bar */\r\n    public get barColor(): string {\r\n        return this._barColor;\r\n    }\r\n\r\n    public set barColor(color: string) {\r\n        if (this._barColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._barColor = color;\r\n        this._setBarColor();\r\n    }\r\n\r\n    private _setBarColor() {\r\n        for (let i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].background = this._barColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of separator bar */\r\n    public get barHeight(): string {\r\n        return this._barHeight;\r\n    }\r\n\r\n    public set barHeight(value: string) {\r\n        if (this._barHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._barHeight = value;\r\n        this._setBarHeight();\r\n    }\r\n\r\n    private _setBarHeight() {\r\n        for (let i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].height = this._barHeight;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of spacers*/\r\n    public get spacerHeight(): string {\r\n        return this._spacerHeight;\r\n    }\r\n\r\n    public set spacerHeight(value: string) {\r\n        if (this._spacerHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._spacerHeight = value;\r\n        this._setSpacerHeight();\r\n    }\r\n\r\n    private _setSpacerHeight() {\r\n        for (let i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].height = this._spacerHeight;\r\n        }\r\n    }\r\n\r\n    /** Adds a bar between groups */\r\n    private _addSpacer(): void {\r\n        const separator = new Container();\r\n        separator.width = 1;\r\n        separator.height = this._spacerHeight;\r\n        separator.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        const bar = new Rectangle();\r\n        bar.width = 1;\r\n        bar.height = this._barHeight;\r\n        bar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        bar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        bar.background = this._barColor;\r\n        bar.color = \"transparent\";\r\n        separator.addControl(bar);\r\n\r\n        this._panel.addControl(separator);\r\n        this._bars.push(separator);\r\n    }\r\n\r\n    /** Add a group to the selection panel\r\n     * @param group is the selector group to add\r\n     */\r\n    public addGroup(group: SelectorGroup): void {\r\n        if (this._groups.length > 0) {\r\n            this._addSpacer();\r\n        }\r\n        this._panel.addControl(group.groupPanel);\r\n        this._groups.push(group);\r\n        group.groupPanel.children[0].color = this._headerColor;\r\n        for (let j = 0; j < group.selectors.length; j++) {\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonColor(j, this._buttonColor);\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonBackground(j, this._buttonBackground);\r\n        }\r\n    }\r\n\r\n    /** Remove the group from the given position\r\n     * @param groupNb is the position of the group in the list\r\n     */\r\n    public removeGroup(groupNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        const group = this._groups[groupNb];\r\n        this._panel.removeControl(group.groupPanel);\r\n        this._groups.splice(groupNb, 1);\r\n        if (groupNb < this._bars.length) {\r\n            this._panel.removeControl(this._bars[groupNb]);\r\n            this._bars.splice(groupNb, 1);\r\n        }\r\n    }\r\n\r\n    /** Change a group header label\r\n     * @param label is the new group header label\r\n     * @param groupNb is the number of the group to relabel\r\n     * */\r\n    public setHeaderName(label: string, groupNb: number) {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        const group = this._groups[groupNb];\r\n        (<TextBlock>group.groupPanel.children[0]).text = label;\r\n    }\r\n\r\n    /** Change selector label to the one given\r\n     * @param label is the new selector label\r\n     * @param groupNb is the number of the groupcontaining the selector\r\n     * @param selectorNb is the number of the selector within a group to relabel\r\n     * */\r\n    public relabel(label: string, groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        const group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorLabel(selectorNb, label);\r\n    }\r\n\r\n    /** For a given group position remove the selector at the given position\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param selectorNb is the number of the selector within the group\r\n     */\r\n    public removeFromGroupSelector(groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        const group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        group.removeSelector(selectorNb);\r\n    }\r\n\r\n    /** For a given group position of correct type add a checkbox button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupCheckbox(groupNb: number, label: string, func = () => {}, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        const group = this._groups[groupNb];\r\n        (<CheckboxGroup>group).addCheckbox(label, func, checked);\r\n    }\r\n\r\n    /** For a given group position of correct type add a radio button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupRadio(groupNb: number, label: string, func = () => {}, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        const group = this._groups[groupNb];\r\n        (<RadioGroup>group).addRadio(label, func, checked);\r\n    }\r\n\r\n    /**\r\n     * For a given slider group add a slider\r\n     * @param groupNb is the number of the group to add the slider to\r\n     * @param label is the label for the Slider\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onVal is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addToGroupSlider(\r\n        groupNb: number,\r\n        label: string,\r\n        func = () => {},\r\n        unit: string = \"Units\",\r\n        min: number = 0,\r\n        max: number = 0,\r\n        value: number = 0,\r\n        onVal = (v: number) => {\r\n            return v | 0;\r\n        }\r\n    ): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        const group = this._groups[groupNb];\r\n        (<SliderGroup>group).addSlider(label, func, unit, min, max, value, onVal);\r\n    }\r\n}\r\n","import { Measure } from \"../../measure\";\r\nimport { Container } from \"../container\";\r\nimport { ValueAndUnit } from \"../../valueAndUnit\";\r\nimport { Control } from \"../control\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/**\r\n * Class used to hold a the container for ScrollViewer\r\n * @internal\r\n */\r\nexport class _ScrollViewerWindow extends Container {\r\n    public parentClientWidth: number;\r\n    public parentClientHeight: number;\r\n\r\n    private _freezeControls = false;\r\n    private _parentMeasure: Measure;\r\n    private _oldLeft: number | null;\r\n    private _oldTop: number | null;\r\n\r\n    public get freezeControls(): boolean {\r\n        return this._freezeControls;\r\n    }\r\n\r\n    public set freezeControls(value: boolean) {\r\n        if (this._freezeControls === value) {\r\n            return;\r\n        }\r\n\r\n        if (!value) {\r\n            this._restoreMeasures();\r\n        }\r\n\r\n        // trigger a full normal layout calculation to be sure all children have their measures up to date\r\n        this._freezeControls = false;\r\n\r\n        const textureSize = this.host.getSize();\r\n        const renderWidth = textureSize.width;\r\n        const renderHeight = textureSize.height;\r\n\r\n        const context = this.host.getContext();\r\n\r\n        const measure = new Measure(0, 0, renderWidth, renderHeight);\r\n\r\n        this.host._numLayoutCalls = 0;\r\n\r\n        this.host._rootContainer._layout(measure, context);\r\n\r\n        // in freeze mode, prepare children measures accordingly\r\n        if (value) {\r\n            this._updateMeasures();\r\n            if (this._useBuckets()) {\r\n                this._makeBuckets();\r\n            }\r\n        }\r\n\r\n        this._freezeControls = value;\r\n\r\n        this.host.markAsDirty(); // redraw with the (new) current settings\r\n    }\r\n\r\n    private _bucketWidth: number = 0;\r\n    private _bucketHeight: number = 0;\r\n    private _buckets: { [key: number]: Array<Control> } = {};\r\n    private _bucketLen: number;\r\n\r\n    public get bucketWidth(): number {\r\n        return this._bucketWidth;\r\n    }\r\n\r\n    public get bucketHeight(): number {\r\n        return this._bucketHeight;\r\n    }\r\n\r\n    public setBucketSizes(width: number, height: number): void {\r\n        this._bucketWidth = width;\r\n        this._bucketHeight = height;\r\n\r\n        if (this._useBuckets()) {\r\n            if (this._freezeControls) {\r\n                this._makeBuckets();\r\n            }\r\n        } else {\r\n            this._buckets = {};\r\n        }\r\n    }\r\n\r\n    private _useBuckets(): boolean {\r\n        return this._bucketWidth > 0 && this._bucketHeight > 0;\r\n    }\r\n\r\n    private _makeBuckets(): void {\r\n        this._buckets = {};\r\n        this._bucketLen = Math.ceil(this.widthInPixels / this._bucketWidth);\r\n        this._dispatchInBuckets(this._children);\r\n        this._oldLeft = null;\r\n        this._oldTop = null;\r\n    }\r\n\r\n    private _dispatchInBuckets(children: Control[]): void {\r\n        for (let i = 0; i < children.length; ++i) {\r\n            const child = children[i];\r\n\r\n            const bStartX = Math.max(0, Math.floor((child._customData._origLeft - this._customData.origLeft) / this._bucketWidth)),\r\n                bEndX = Math.floor((child._customData._origLeft - this._customData.origLeft + child._currentMeasure.width - 1) / this._bucketWidth),\r\n                bEndY = Math.floor((child._customData._origTop - this._customData.origTop + child._currentMeasure.height - 1) / this._bucketHeight);\r\n            let bStartY = Math.max(0, Math.floor((child._customData._origTop - this._customData.origTop) / this._bucketHeight));\r\n\r\n            while (bStartY <= bEndY) {\r\n                for (let x = bStartX; x <= bEndX; ++x) {\r\n                    const bucket = bStartY * this._bucketLen + x;\r\n                    let lstc = this._buckets[bucket];\r\n\r\n                    if (!lstc) {\r\n                        lstc = [];\r\n                        this._buckets[bucket] = lstc;\r\n                    }\r\n\r\n                    lstc.push(child);\r\n                }\r\n                bStartY++;\r\n            }\r\n\r\n            if (child instanceof Container && child._children.length > 0) {\r\n                this._dispatchInBuckets(child._children);\r\n            }\r\n        }\r\n    }\r\n\r\n    // reset left and top measures for the window and all its children\r\n    private _updateMeasures(): void {\r\n        const left = this.leftInPixels | 0,\r\n            top = this.topInPixels | 0;\r\n\r\n        this._measureForChildren.left -= left;\r\n        this._measureForChildren.top -= top;\r\n        this._currentMeasure.left -= left;\r\n        this._currentMeasure.top -= top;\r\n\r\n        this._customData.origLeftForChildren = this._measureForChildren.left;\r\n        this._customData.origTopForChildren = this._measureForChildren.top;\r\n        this._customData.origLeft = this._currentMeasure.left;\r\n        this._customData.origTop = this._currentMeasure.top;\r\n\r\n        this._updateChildrenMeasures(this._children, left, top);\r\n    }\r\n\r\n    private _updateChildrenMeasures(children: Control[], left: number, top: number): void {\r\n        for (let i = 0; i < children.length; ++i) {\r\n            const child = children[i];\r\n\r\n            child._currentMeasure.left -= left;\r\n            child._currentMeasure.top -= top;\r\n\r\n            child._customData._origLeft = child._currentMeasure.left; // save the original left and top values for each child\r\n            child._customData._origTop = child._currentMeasure.top;\r\n\r\n            if (child instanceof Container && child._children.length > 0) {\r\n                this._updateChildrenMeasures(child._children, left, top);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _restoreMeasures(): void {\r\n        const left = this.leftInPixels | 0,\r\n            top = this.topInPixels | 0;\r\n\r\n        this._measureForChildren.left = this._customData.origLeftForChildren + left;\r\n        this._measureForChildren.top = this._customData.origTopForChildren + top;\r\n        this._currentMeasure.left = this._customData.origLeft + left;\r\n        this._currentMeasure.top = this._customData.origTop + top;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ScrollViewerWindow\r\n     * @param name of ScrollViewerWindow\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ScrollViewerWindow\";\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._parentMeasure = parentMeasure;\r\n\r\n        this._measureForChildren.left = this._currentMeasure.left;\r\n        this._measureForChildren.top = this._currentMeasure.top;\r\n\r\n        this._measureForChildren.width = parentMeasure.width;\r\n        this._measureForChildren.height = parentMeasure.height;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _layout(parentMeasure: Measure, context: ICanvasRenderingContext): boolean {\r\n        if (this._freezeControls) {\r\n            this.invalidateRect(); // will trigger a redraw of the window\r\n            return false;\r\n        }\r\n\r\n        return super._layout(parentMeasure, context);\r\n    }\r\n\r\n    private _scrollChildren(children: Control[], left: number, top: number): void {\r\n        for (let i = 0; i < children.length; ++i) {\r\n            const child = children[i];\r\n\r\n            child._currentMeasure.left = child._customData._origLeft + left;\r\n            child._currentMeasure.top = child._customData._origTop + top;\r\n            child._isClipped = false; // clipping will be handled by _draw and the call to _intersectsRect()\r\n\r\n            if (child instanceof Container && child._children.length > 0) {\r\n                this._scrollChildren(child._children, left, top);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _scrollChildrenWithBuckets(left: number, top: number, scrollLeft: number, scrollTop: number): void {\r\n        const bStartX = Math.max(0, Math.floor(-left / this._bucketWidth)),\r\n            bEndX = Math.floor((-left + this._parentMeasure.width - 1) / this._bucketWidth),\r\n            bEndY = Math.floor((-top + this._parentMeasure.height - 1) / this._bucketHeight);\r\n        let bStartY = Math.max(0, Math.floor(-top / this._bucketHeight));\r\n\r\n        while (bStartY <= bEndY) {\r\n            for (let x = bStartX; x <= bEndX; ++x) {\r\n                const bucket = bStartY * this._bucketLen + x,\r\n                    lstc = this._buckets[bucket];\r\n\r\n                if (lstc) {\r\n                    for (let i = 0; i < lstc.length; ++i) {\r\n                        const child = lstc[i];\r\n                        child._currentMeasure.left = child._customData._origLeft + scrollLeft;\r\n                        child._currentMeasure.top = child._customData._origTop + scrollTop;\r\n                        child._isClipped = false; // clipping will be handled by _draw and the call to _intersectsRect()\r\n                    }\r\n                }\r\n            }\r\n            bStartY++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _draw(context: ICanvasRenderingContext, invalidatedRectangle?: Measure): void {\r\n        if (!this._freezeControls) {\r\n            super._draw(context, invalidatedRectangle);\r\n            return;\r\n        }\r\n\r\n        this._localDraw(context);\r\n\r\n        if (this.clipChildren) {\r\n            this._clipForChildren(context);\r\n        }\r\n\r\n        const left = this.leftInPixels | 0,\r\n            top = this.topInPixels | 0;\r\n\r\n        if (this._useBuckets()) {\r\n            if (this._oldLeft !== null && this._oldTop !== null) {\r\n                this._scrollChildrenWithBuckets(this._oldLeft, this._oldTop, left, top);\r\n                this._scrollChildrenWithBuckets(left, top, left, top);\r\n            } else {\r\n                this._scrollChildren(this._children, left, top);\r\n            }\r\n        } else {\r\n            this._scrollChildren(this._children, left, top);\r\n        }\r\n\r\n        this._oldLeft = left;\r\n        this._oldTop = top;\r\n\r\n        for (const child of this._children) {\r\n            if (!child._intersectsRect(this._parentMeasure)) {\r\n                continue;\r\n            }\r\n            child._render(context, this._parentMeasure);\r\n        }\r\n    }\r\n\r\n    protected _postMeasure(): void {\r\n        if (this._freezeControls) {\r\n            super._postMeasure();\r\n            return;\r\n        }\r\n\r\n        let maxWidth = this.parentClientWidth;\r\n        let maxHeight = this.parentClientHeight;\r\n        for (const child of this.children) {\r\n            if (!child.isVisible || child.notRenderable) {\r\n                continue;\r\n            }\r\n\r\n            if (child.horizontalAlignment === Control.HORIZONTAL_ALIGNMENT_CENTER) {\r\n                child._offsetLeft(this._currentMeasure.left - child._currentMeasure.left);\r\n            }\r\n\r\n            if (child.verticalAlignment === Control.VERTICAL_ALIGNMENT_CENTER) {\r\n                child._offsetTop(this._currentMeasure.top - child._currentMeasure.top);\r\n            }\r\n\r\n            maxWidth = Math.max(maxWidth, child._currentMeasure.left - this._currentMeasure.left + child._currentMeasure.width + child.paddingRightInPixels);\r\n            maxHeight = Math.max(maxHeight, child._currentMeasure.top - this._currentMeasure.top + child._currentMeasure.height + child.paddingBottomInPixels);\r\n        }\r\n\r\n        if (this._currentMeasure.width !== maxWidth) {\r\n            this._width.updateInPlace(maxWidth, ValueAndUnit.UNITMODE_PIXEL);\r\n            this._currentMeasure.width = maxWidth;\r\n            this._rebuildLayout = true;\r\n            this._isDirty = true;\r\n        }\r\n\r\n        if (this._currentMeasure.height !== maxHeight) {\r\n            this._height.updateInPlace(maxHeight, ValueAndUnit.UNITMODE_PIXEL);\r\n            this._currentMeasure.height = maxHeight;\r\n            this._rebuildLayout = true;\r\n            this._isDirty = true;\r\n        }\r\n\r\n        super._postMeasure();\r\n    }\r\n}\r\n","import type { Vector2 } from \"core/Maths/math.vector\";\r\nimport { BaseSlider } from \"./baseSlider\";\r\nimport type { Control } from \"../control\";\r\nimport { Measure } from \"../../measure\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { BaseGradient } from \"../gradient/BaseGradient\";\r\nimport type { AdvancedDynamicTexture } from \"gui/2D/advancedDynamicTexture\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class ScrollBar extends BaseSlider {\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _tempMeasure = new Measure(0, 0, 0, 0);\r\n    private _invertScrollDirection = false;\r\n    private _backgroundGradient: Nullable<BaseGradient> = null;\r\n\r\n    /** Gets or sets border color */\r\n    @serialize()\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    @serialize()\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background gradient. Takes precedence over gradient. */\r\n    public get backgroundGradient(): Nullable<BaseGradient> {\r\n        return this._backgroundGradient;\r\n    }\r\n\r\n    public set backgroundGradient(value: Nullable<BaseGradient>) {\r\n        if (this._backgroundGradient === value) {\r\n            return;\r\n        }\r\n\r\n        this._backgroundGradient = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Inverts the scrolling direction (default: false) */\r\n    @serialize()\r\n    public get invertScrollDirection() {\r\n        return this._invertScrollDirection;\r\n    }\r\n\r\n    public set invertScrollDirection(invert: boolean) {\r\n        this._invertScrollDirection = invert;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Scrollbar\";\r\n    }\r\n\r\n    protected _getThumbThickness(): number {\r\n        let thumbThickness = 0;\r\n        if (this._thumbWidth.isPixel) {\r\n            thumbThickness = this._thumbWidth.getValue(this._host);\r\n        } else {\r\n            thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    private _getBackgroundColor(context: ICanvasRenderingContext) {\r\n        return this._backgroundGradient ? this._backgroundGradient.getCanvasGradient(context) : this._background;\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        this._prepareRenderingData(\"rectangle\");\r\n        const left = this._renderLeft;\r\n\r\n        const thumbPosition = this._getThumbPosition();\r\n        context.fillStyle = this._getBackgroundColor(context);\r\n\r\n        context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n\r\n        // Value bar\r\n        context.fillStyle = this._getColor(context);\r\n\r\n        // Thumb\r\n        if (this.isVertical) {\r\n            this._tempMeasure.left = left - this._effectiveBarOffset;\r\n            this._tempMeasure.top = this._currentMeasure.top + thumbPosition;\r\n            this._tempMeasure.width = this._currentMeasure.width;\r\n            this._tempMeasure.height = this._effectiveThumbThickness;\r\n        } else {\r\n            this._tempMeasure.left = this._currentMeasure.left + thumbPosition;\r\n            this._tempMeasure.top = this._currentMeasure.top;\r\n            this._tempMeasure.width = this._effectiveThumbThickness;\r\n            this._tempMeasure.height = this._currentMeasure.height;\r\n        }\r\n\r\n        context.fillRect(this._tempMeasure.left, this._tempMeasure.top, this._tempMeasure.width, this._tempMeasure.height);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    private _first: boolean;\r\n    private _originX: number;\r\n    private _originY: number;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        const sign = this._invertScrollDirection ? -1 : 1;\r\n\r\n        if (this._first) {\r\n            this._first = false;\r\n            this._originX = x;\r\n            this._originY = y;\r\n\r\n            // Check if move is required\r\n            if (\r\n                x < this._tempMeasure.left ||\r\n                x > this._tempMeasure.left + this._tempMeasure.width ||\r\n                y < this._tempMeasure.top ||\r\n                y > this._tempMeasure.top + this._tempMeasure.height\r\n            ) {\r\n                if (this.isVertical) {\r\n                    this.value = this.minimum + (1 - (y - this._currentMeasure.top) / this._currentMeasure.height) * (this.maximum - this.minimum);\r\n                } else {\r\n                    this.value = this.minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this.maximum - this.minimum);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Delta mode\r\n        let delta = 0;\r\n        if (this.isVertical) {\r\n            delta = -((y - this._originY) / (this._currentMeasure.height - this._effectiveThumbThickness));\r\n        } else {\r\n            delta = (x - this._originX) / (this._currentMeasure.width - this._effectiveThumbThickness);\r\n        }\r\n\r\n        this.value += sign * delta * (this.maximum - this.minimum);\r\n\r\n        this._originX = x;\r\n        this._originY = y;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        this._first = true;\r\n\r\n        return super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi);\r\n    }\r\n\r\n    public serialize(serializationObject: any) {\r\n        super.serialize(serializationObject);\r\n\r\n        if (this.backgroundGradient) {\r\n            serializationObject.backgroundGradient = {};\r\n            this.backgroundGradient.serialize(serializationObject.backgroundGradient);\r\n        }\r\n    }\r\n\r\n    public _parseFromContent(serializationObject: any, host: AdvancedDynamicTexture) {\r\n        super._parseFromContent(serializationObject, host);\r\n\r\n        if (serializationObject.backgroundGradient) {\r\n            const className = Tools.Instantiate(\"BABYLON.GUI.\" + serializationObject.backgroundGradient.className);\r\n            this.backgroundGradient = new className();\r\n            this.backgroundGradient!.parse(serializationObject.backgroundGradient);\r\n        }\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Scrollbar\", ScrollBar);\r\n","import type { Vector2 } from \"core/Maths/math.vector\";\r\nimport { BaseSlider } from \"./baseSlider\";\r\nimport type { Control } from \"../control\";\r\nimport type { Image } from \"../image\";\r\nimport { Measure } from \"../../measure\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class ImageScrollBar extends BaseSlider {\r\n    private _backgroundBaseImage: Image;\r\n    private _backgroundImage: Image;\r\n    private _thumbImage: Image;\r\n    private _thumbBaseImage: Image;\r\n    private _thumbLength: number = 0.5;\r\n    private _thumbHeight: number = 1;\r\n    private _barImageHeight: number = 1;\r\n    private _tempMeasure = new Measure(0, 0, 0, 0);\r\n    private _invertScrollDirection = false;\r\n\r\n    /** Number of 90° rotation to apply on the images when in vertical mode */\r\n    @serialize()\r\n    public num90RotationInVerticalMode = 1;\r\n\r\n    /** Inverts the scrolling direction (default: false) */\r\n    @serialize()\r\n    public get invertScrollDirection() {\r\n        return this._invertScrollDirection;\r\n    }\r\n\r\n    public set invertScrollDirection(invert: boolean) {\r\n        this._invertScrollDirection = invert;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the background for horizontal bar\r\n     */\r\n    public get backgroundImage(): Image {\r\n        return this._backgroundBaseImage;\r\n    }\r\n\r\n    public set backgroundImage(value: Image) {\r\n        if (this._backgroundBaseImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._backgroundBaseImage = value;\r\n\r\n        if (this.isVertical && this.num90RotationInVerticalMode !== 0) {\r\n            if (!value.isLoaded) {\r\n                value.onImageLoadedObservable.addOnce(() => {\r\n                    const rotatedValue = value._rotate90(this.num90RotationInVerticalMode, true);\r\n                    this._backgroundImage = rotatedValue;\r\n                    if (!rotatedValue.isLoaded) {\r\n                        rotatedValue.onImageLoadedObservable.addOnce(() => {\r\n                            this._markAsDirty();\r\n                        });\r\n                    }\r\n                    this._markAsDirty();\r\n                });\r\n            } else {\r\n                this._backgroundImage = value._rotate90(this.num90RotationInVerticalMode, true);\r\n                this._markAsDirty();\r\n            }\r\n        } else {\r\n            this._backgroundImage = value;\r\n            if (value && !value.isLoaded) {\r\n                value.onImageLoadedObservable.addOnce(() => {\r\n                    this._markAsDirty();\r\n                });\r\n            }\r\n\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the thumb\r\n     */\r\n    public get thumbImage(): Image {\r\n        return this._thumbBaseImage;\r\n    }\r\n\r\n    public set thumbImage(value: Image) {\r\n        if (this._thumbBaseImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbBaseImage = value;\r\n\r\n        if (this.isVertical && this.num90RotationInVerticalMode !== 0) {\r\n            if (!value.isLoaded) {\r\n                value.onImageLoadedObservable.addOnce(() => {\r\n                    const rotatedValue = value._rotate90(-this.num90RotationInVerticalMode, true);\r\n                    this._thumbImage = rotatedValue;\r\n                    if (!rotatedValue.isLoaded) {\r\n                        rotatedValue.onImageLoadedObservable.addOnce(() => {\r\n                            this._markAsDirty();\r\n                        });\r\n                    }\r\n                    this._markAsDirty();\r\n                });\r\n            } else {\r\n                this._thumbImage = value._rotate90(-this.num90RotationInVerticalMode, true);\r\n                this._markAsDirty();\r\n            }\r\n        } else {\r\n            this._thumbImage = value;\r\n            if (value && !value.isLoaded) {\r\n                value.onImageLoadedObservable.addOnce(() => {\r\n                    this._markAsDirty();\r\n                });\r\n            }\r\n\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the length of the thumb\r\n     */\r\n    public get thumbLength(): number {\r\n        return this._thumbLength;\r\n    }\r\n\r\n    public set thumbLength(value: number) {\r\n        if (this._thumbLength === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbLength = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height of the thumb\r\n     */\r\n    public get thumbHeight(): number {\r\n        return this._thumbHeight;\r\n    }\r\n\r\n    public set thumbHeight(value: number) {\r\n        if (this._thumbLength === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height of the bar image\r\n     */\r\n    public get barImageHeight(): number {\r\n        return this._barImageHeight;\r\n    }\r\n\r\n    public set barImageHeight(value: number) {\r\n        if (this._barImageHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._barImageHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new ImageScrollBar\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ImageScrollBar\";\r\n    }\r\n\r\n    protected _getThumbThickness(): number {\r\n        let thumbThickness = 0;\r\n        if (this._thumbWidth.isPixel) {\r\n            thumbThickness = this._thumbWidth.getValue(this._host);\r\n        } else {\r\n            thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        this._prepareRenderingData(\"rectangle\");\r\n        const thumbPosition = this._getThumbPosition();\r\n        const left = this._renderLeft;\r\n        const top = this._renderTop;\r\n        const width = this._renderWidth;\r\n        const height = this._renderHeight;\r\n\r\n        // Background\r\n        if (this._backgroundImage) {\r\n            this._tempMeasure.copyFromFloats(left, top, width, height);\r\n            if (this.isVertical) {\r\n                this._tempMeasure.copyFromFloats(left + width * (1 - this._barImageHeight) * 0.5, this._currentMeasure.top, width * this._barImageHeight, height);\r\n                this._tempMeasure.height += this._effectiveThumbThickness;\r\n                this._backgroundImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            } else {\r\n                this._tempMeasure.copyFromFloats(this._currentMeasure.left, top + height * (1 - this._barImageHeight) * 0.5, width, height * this._barImageHeight);\r\n                this._tempMeasure.width += this._effectiveThumbThickness;\r\n                this._backgroundImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            }\r\n            this._backgroundImage._draw(context);\r\n        }\r\n\r\n        // Thumb\r\n        if (this.isVertical) {\r\n            this._tempMeasure.copyFromFloats(\r\n                left - this._effectiveBarOffset + this._currentMeasure.width * (1 - this._thumbHeight) * 0.5,\r\n                this._currentMeasure.top + thumbPosition,\r\n                this._currentMeasure.width * this._thumbHeight,\r\n                this._effectiveThumbThickness\r\n            );\r\n        } else {\r\n            this._tempMeasure.copyFromFloats(\r\n                this._currentMeasure.left + thumbPosition,\r\n                this._currentMeasure.top + this._currentMeasure.height * (1 - this._thumbHeight) * 0.5,\r\n                this._effectiveThumbThickness,\r\n                this._currentMeasure.height * this._thumbHeight\r\n            );\r\n        }\r\n\r\n        if (this._thumbImage) {\r\n            this._thumbImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._thumbImage._draw(context);\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    private _first: boolean;\r\n    private _originX: number;\r\n    private _originY: number;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        const sign = this._invertScrollDirection ? -1 : 1;\r\n\r\n        if (this._first) {\r\n            this._first = false;\r\n            this._originX = x;\r\n            this._originY = y;\r\n\r\n            // Check if move is required\r\n            if (\r\n                x < this._tempMeasure.left ||\r\n                x > this._tempMeasure.left + this._tempMeasure.width ||\r\n                y < this._tempMeasure.top ||\r\n                y > this._tempMeasure.top + this._tempMeasure.height\r\n            ) {\r\n                if (this.isVertical) {\r\n                    this.value = this.minimum + (1 - (y - this._currentMeasure.top) / this._currentMeasure.height) * (this.maximum - this.minimum);\r\n                } else {\r\n                    this.value = this.minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this.maximum - this.minimum);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Delta mode\r\n        let delta = 0;\r\n        if (this.isVertical) {\r\n            delta = -((y - this._originY) / (this._currentMeasure.height - this._effectiveThumbThickness));\r\n        } else {\r\n            delta = (x - this._originX) / (this._currentMeasure.width - this._effectiveThumbThickness);\r\n        }\r\n\r\n        this.value += sign * delta * (this.maximum - this.minimum);\r\n\r\n        this._originX = x;\r\n        this._originY = y;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        this._first = true;\r\n\r\n        return super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi);\r\n    }\r\n}\r\n","import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math\";\r\nimport { Rectangle } from \"../rectangle\";\r\nimport { Grid } from \"../grid\";\r\nimport type { Image } from \"../image\";\r\nimport { Control } from \"../control\";\r\nimport type { Container } from \"../container\";\r\nimport type { Measure } from \"../../measure\";\r\nimport type { AdvancedDynamicTexture } from \"../../advancedDynamicTexture\";\r\nimport { _ScrollViewerWindow } from \"./scrollViewerWindow\";\r\nimport { ScrollBar } from \"../sliders/scrollBar\";\r\nimport { ImageScrollBar } from \"../sliders/imageScrollBar\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\n\r\n/**\r\n * Class used to hold a viewer window and sliders in a grid\r\n */\r\nexport class ScrollViewer extends Rectangle {\r\n    private _grid: Grid;\r\n    private _horizontalBarSpace: Rectangle;\r\n    private _verticalBarSpace: Rectangle;\r\n    private _dragSpace: Rectangle;\r\n    private _horizontalBar: ScrollBar | ImageScrollBar;\r\n    private _verticalBar: ScrollBar | ImageScrollBar;\r\n    private _barColor: string;\r\n    private _barBackground: string;\r\n    private _barImage: Image;\r\n    private _horizontalBarImage: Image;\r\n    private _verticalBarImage: Image;\r\n    private _barBackgroundImage: Image;\r\n    private _horizontalBarBackgroundImage: Image;\r\n    private _verticalBarBackgroundImage: Image;\r\n    private _barSize: number = 20;\r\n    private _window: _ScrollViewerWindow;\r\n    private _pointerIsOver: Boolean = false;\r\n    private _wheelPrecision: number = 0.05;\r\n    private _onWheelObserver: Nullable<Observer<Vector2>>;\r\n    private _clientWidth: number;\r\n    private _clientHeight: number;\r\n    private _useImageBar: Boolean;\r\n    private _thumbLength: number = 0.5;\r\n    private _thumbHeight: number = 1;\r\n    private _barImageHeight: number = 1;\r\n    private _horizontalBarImageHeight: number = 1;\r\n    private _verticalBarImageHeight: number = 1;\r\n    private _oldWindowContentsWidth: number = 0;\r\n    private _oldWindowContentsHeight: number = 0;\r\n\r\n    /**\r\n     * Gets the horizontal scrollbar\r\n     */\r\n    public get horizontalBar(): ScrollBar | ImageScrollBar {\r\n        return this._horizontalBar;\r\n    }\r\n\r\n    /**\r\n     * Gets the vertical scrollbar\r\n     */\r\n    public get verticalBar(): ScrollBar | ImageScrollBar {\r\n        return this._verticalBar;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        this._window.addControl(control);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        this._window.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._window.children;\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (const child of this._children) {\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Freezes or unfreezes the controls in the window.\r\n     * When controls are frozen, the scroll viewer can render a lot more quickly but updates to positions/sizes of controls\r\n     * are not taken into account. If you want to change positions/sizes, unfreeze, perform the changes then freeze again\r\n     */\r\n    public get freezeControls(): boolean {\r\n        return this._window.freezeControls;\r\n    }\r\n\r\n    public set freezeControls(value: boolean) {\r\n        this._window.freezeControls = value;\r\n    }\r\n\r\n    /** Gets the bucket width */\r\n    public get bucketWidth(): number {\r\n        return this._window.bucketWidth;\r\n    }\r\n\r\n    /** Gets the bucket height */\r\n    public get bucketHeight(): number {\r\n        return this._window.bucketHeight;\r\n    }\r\n\r\n    /**\r\n     * Sets the bucket sizes.\r\n     * When freezeControls is true, setting a non-zero bucket size will improve performances by updating only\r\n     * controls that are visible. The bucket sizes is used to subdivide (internally) the window area to smaller areas into which\r\n     * controls are dispatched. So, the size should be roughly equals to the mean size of all the controls of\r\n     * the window. To disable the usage of buckets, sets either width or height (or both) to 0.\r\n     * Please note that using this option will raise the memory usage (the higher the bucket sizes, the less memory\r\n     * used), that's why it is not enabled by default.\r\n     * @param width width of the bucket\r\n     * @param height height of the bucket\r\n     */\r\n    public setBucketSizes(width: number, height: number): void {\r\n        this._window.setBucketSizes(width, height);\r\n    }\r\n\r\n    private _forceHorizontalBar: boolean = false;\r\n    private _forceVerticalBar: boolean = false;\r\n\r\n    /**\r\n     * Forces the horizontal scroll bar to be displayed\r\n     */\r\n    public get forceHorizontalBar(): boolean {\r\n        return this._forceHorizontalBar;\r\n    }\r\n\r\n    public set forceHorizontalBar(value: boolean) {\r\n        this._grid.setRowDefinition(1, value ? this._barSize : 0, true);\r\n        this._horizontalBar.isVisible = value;\r\n        this._forceHorizontalBar = value;\r\n    }\r\n\r\n    /**\r\n     * Forces the vertical scroll bar to be displayed\r\n     */\r\n    public get forceVerticalBar(): boolean {\r\n        return this._forceVerticalBar;\r\n    }\r\n\r\n    public set forceVerticalBar(value: boolean) {\r\n        this._grid.setColumnDefinition(1, value ? this._barSize : 0, true);\r\n        this._verticalBar.isVisible = value;\r\n        this._forceVerticalBar = value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ScrollViewer\r\n     * @param name of ScrollViewer\r\n     * @param isImageBased\r\n     */\r\n    constructor(name?: string, isImageBased?: boolean) {\r\n        super(name);\r\n\r\n        this._useImageBar = isImageBased ? isImageBased : false;\r\n\r\n        this.onDirtyObservable.add(() => {\r\n            this._horizontalBarSpace.color = this.color;\r\n            this._verticalBarSpace.color = this.color;\r\n            this._dragSpace.color = this.color;\r\n        });\r\n\r\n        this.onPointerEnterObservable.add(() => {\r\n            this._pointerIsOver = true;\r\n        });\r\n\r\n        this.onPointerOutObservable.add(() => {\r\n            this._pointerIsOver = false;\r\n        });\r\n\r\n        this._grid = new Grid();\r\n        if (this._useImageBar) {\r\n            this._horizontalBar = new ImageScrollBar();\r\n            this._verticalBar = new ImageScrollBar();\r\n        } else {\r\n            this._horizontalBar = new ScrollBar();\r\n            this._verticalBar = new ScrollBar();\r\n        }\r\n\r\n        this._window = new _ScrollViewerWindow(\"scrollViewer_window\");\r\n        this._window.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._window.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._grid.addColumnDefinition(1);\r\n        this._grid.addColumnDefinition(0, true);\r\n        this._grid.addRowDefinition(1);\r\n        this._grid.addRowDefinition(0, true);\r\n\r\n        super.addControl(this._grid);\r\n        this._grid.addControl(this._window, 0, 0);\r\n\r\n        this._verticalBarSpace = new Rectangle();\r\n        this._verticalBarSpace.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalBarSpace.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._verticalBarSpace.thickness = 1;\r\n        this._grid.addControl(this._verticalBarSpace, 0, 1);\r\n        this._addBar(this._verticalBar, this._verticalBarSpace, true, Math.PI);\r\n\r\n        this._horizontalBarSpace = new Rectangle();\r\n        this._horizontalBarSpace.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._horizontalBarSpace.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._horizontalBarSpace.thickness = 1;\r\n        this._grid.addControl(this._horizontalBarSpace, 1, 0);\r\n        this._addBar(this._horizontalBar, this._horizontalBarSpace, false, 0);\r\n\r\n        this._dragSpace = new Rectangle();\r\n        this._dragSpace.thickness = 1;\r\n        this._grid.addControl(this._dragSpace, 1, 1);\r\n\r\n        // Colors\r\n        if (!this._useImageBar) {\r\n            this.barColor = \"grey\";\r\n            this.barBackground = \"transparent\";\r\n        }\r\n    }\r\n\r\n    /** Reset the scroll viewer window to initial size */\r\n    public resetWindow() {\r\n        this._window.width = \"100%\";\r\n        this._window.height = \"100%\";\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ScrollViewer\";\r\n    }\r\n\r\n    private _buildClientSizes() {\r\n        const ratio = this.host.idealRatio;\r\n\r\n        this._window.parentClientWidth = this._currentMeasure.width - (this._verticalBar.isVisible || this.forceVerticalBar ? this._barSize * ratio : 0) - 2 * this.thickness;\r\n        this._window.parentClientHeight = this._currentMeasure.height - (this._horizontalBar.isVisible || this.forceHorizontalBar ? this._barSize * ratio : 0) - 2 * this.thickness;\r\n\r\n        this._clientWidth = this._window.parentClientWidth;\r\n        this._clientHeight = this._window.parentClientHeight;\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._buildClientSizes();\r\n    }\r\n\r\n    protected _postMeasure(): void {\r\n        super._postMeasure();\r\n\r\n        this._updateScroller();\r\n\r\n        this._setWindowPosition(false);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the mouse wheel precision\r\n     * from 0 to 1 with a default value of 0.05\r\n     * */\r\n    @serialize()\r\n    public get wheelPrecision(): number {\r\n        return this._wheelPrecision;\r\n    }\r\n\r\n    public set wheelPrecision(value: number) {\r\n        if (this._wheelPrecision === value) {\r\n            return;\r\n        }\r\n\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n\r\n        this._wheelPrecision = value;\r\n    }\r\n\r\n    /** Gets or sets the scroll bar container background color */\r\n    @serialize()\r\n    public get scrollBackground(): string {\r\n        return this._horizontalBarSpace.background;\r\n    }\r\n\r\n    public set scrollBackground(color: string) {\r\n        if (this._horizontalBarSpace.background === color) {\r\n            return;\r\n        }\r\n        this._horizontalBarSpace.background = color;\r\n        this._verticalBarSpace.background = color;\r\n    }\r\n\r\n    /** Gets or sets the bar color */\r\n    @serialize()\r\n    public get barColor(): string {\r\n        return this._barColor;\r\n    }\r\n\r\n    public set barColor(color: string) {\r\n        if (this._barColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._barColor = color;\r\n        this._horizontalBar.color = color;\r\n        this._verticalBar.color = color;\r\n    }\r\n\r\n    /** Gets or sets the bar image */\r\n    public get thumbImage(): Image {\r\n        return this._barImage;\r\n    }\r\n\r\n    public set thumbImage(value: Image) {\r\n        if (this._barImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._barImage = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        hb.thumbImage = value;\r\n        vb.thumbImage = value;\r\n    }\r\n\r\n    /** Gets or sets the horizontal bar image */\r\n    public get horizontalThumbImage(): Image {\r\n        return this._horizontalBarImage;\r\n    }\r\n\r\n    public set horizontalThumbImage(value: Image) {\r\n        if (this._horizontalBarImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._horizontalBarImage = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        hb.thumbImage = value;\r\n    }\r\n\r\n    /** Gets or sets the vertical bar image */\r\n    public get verticalThumbImage(): Image {\r\n        return this._verticalBarImage;\r\n    }\r\n\r\n    public set verticalThumbImage(value: Image) {\r\n        if (this._verticalBarImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._verticalBarImage = value;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        vb.thumbImage = value;\r\n    }\r\n\r\n    /** Gets or sets the size of the bar */\r\n    @serialize()\r\n    public get barSize(): number {\r\n        return this._barSize;\r\n    }\r\n\r\n    public set barSize(value: number) {\r\n        if (this._barSize === value) {\r\n            return;\r\n        }\r\n\r\n        this._barSize = value;\r\n        this._markAsDirty();\r\n\r\n        if (this._horizontalBar.isVisible) {\r\n            this._grid.setRowDefinition(1, this._barSize, true);\r\n        }\r\n        if (this._verticalBar.isVisible) {\r\n            this._grid.setColumnDefinition(1, this._barSize, true);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the length of the thumb */\r\n    public get thumbLength(): number {\r\n        return this._thumbLength;\r\n    }\r\n\r\n    public set thumbLength(value: number) {\r\n        if (this._thumbLength === value) {\r\n            return;\r\n        }\r\n        if (value <= 0) {\r\n            value = 0.1;\r\n        }\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n        this._thumbLength = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        hb.thumbLength = value;\r\n        vb.thumbLength = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of the thumb */\r\n    public get thumbHeight(): number {\r\n        return this._thumbHeight;\r\n    }\r\n\r\n    public set thumbHeight(value: number) {\r\n        if (this._thumbHeight === value) {\r\n            return;\r\n        }\r\n        if (value <= 0) {\r\n            value = 0.1;\r\n        }\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n        this._thumbHeight = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        hb.thumbHeight = value;\r\n        vb.thumbHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of the bar image */\r\n    public get barImageHeight(): number {\r\n        return this._barImageHeight;\r\n    }\r\n\r\n    public set barImageHeight(value: number) {\r\n        if (this._barImageHeight === value) {\r\n            return;\r\n        }\r\n        if (value <= 0) {\r\n            value = 0.1;\r\n        }\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n        this._barImageHeight = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        hb.barImageHeight = value;\r\n        vb.barImageHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of the horizontal bar image */\r\n    public get horizontalBarImageHeight(): number {\r\n        return this._horizontalBarImageHeight;\r\n    }\r\n\r\n    public set horizontalBarImageHeight(value: number) {\r\n        if (this._horizontalBarImageHeight === value) {\r\n            return;\r\n        }\r\n        if (value <= 0) {\r\n            value = 0.1;\r\n        }\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n        this._horizontalBarImageHeight = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        hb.barImageHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of the vertical bar image */\r\n    public get verticalBarImageHeight(): number {\r\n        return this._verticalBarImageHeight;\r\n    }\r\n\r\n    public set verticalBarImageHeight(value: number) {\r\n        if (this._verticalBarImageHeight === value) {\r\n            return;\r\n        }\r\n        if (value <= 0) {\r\n            value = 0.1;\r\n        }\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n        this._verticalBarImageHeight = value;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        vb.barImageHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the bar background */\r\n    @serialize()\r\n    public get barBackground(): string {\r\n        return this._barBackground;\r\n    }\r\n\r\n    public set barBackground(color: string) {\r\n        if (this._barBackground === color) {\r\n            return;\r\n        }\r\n\r\n        this._barBackground = color;\r\n        const hb = <ScrollBar>this._horizontalBar;\r\n        const vb = <ScrollBar>this._verticalBar;\r\n        hb.background = color;\r\n        vb.background = color;\r\n        this._dragSpace.background = color;\r\n    }\r\n\r\n    /** Gets or sets the bar background image */\r\n    public get barImage(): Image {\r\n        return this._barBackgroundImage;\r\n    }\r\n\r\n    public set barImage(value: Image) {\r\n        this._barBackgroundImage = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        hb.backgroundImage = value;\r\n        vb.backgroundImage = value;\r\n    }\r\n\r\n    /** Gets or sets the horizontal bar background image */\r\n    public get horizontalBarImage(): Image {\r\n        return this._horizontalBarBackgroundImage;\r\n    }\r\n\r\n    public set horizontalBarImage(value: Image) {\r\n        this._horizontalBarBackgroundImage = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        hb.backgroundImage = value;\r\n    }\r\n\r\n    /** Gets or sets the vertical bar background image */\r\n    public get verticalBarImage(): Image {\r\n        return this._verticalBarBackgroundImage;\r\n    }\r\n\r\n    public set verticalBarImage(value: Image) {\r\n        this._verticalBarBackgroundImage = value;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        vb.backgroundImage = value;\r\n    }\r\n\r\n    private _setWindowPosition(force = true): void {\r\n        const ratio = this.host.idealRatio;\r\n        const windowContentsWidth = this._window._currentMeasure.width;\r\n        const windowContentsHeight = this._window._currentMeasure.height;\r\n\r\n        if (!force && this._oldWindowContentsWidth === windowContentsWidth && this._oldWindowContentsHeight === windowContentsHeight) {\r\n            return;\r\n        }\r\n\r\n        this._oldWindowContentsWidth = windowContentsWidth;\r\n        this._oldWindowContentsHeight = windowContentsHeight;\r\n\r\n        const _endLeft = this._clientWidth - windowContentsWidth;\r\n        const _endTop = this._clientHeight - windowContentsHeight;\r\n\r\n        const newLeft = (this._horizontalBar.value / ratio) * _endLeft + \"px\";\r\n        const newTop = (this._verticalBar.value / ratio) * _endTop + \"px\";\r\n\r\n        if (newLeft !== this._window.left) {\r\n            this._window.left = newLeft;\r\n            if (!this.freezeControls) {\r\n                this._rebuildLayout = true;\r\n            }\r\n        }\r\n\r\n        if (newTop !== this._window.top) {\r\n            this._window.top = newTop;\r\n            if (!this.freezeControls) {\r\n                this._rebuildLayout = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    private _updateScroller(): void {\r\n        const windowContentsWidth = this._window._currentMeasure.width;\r\n        const windowContentsHeight = this._window._currentMeasure.height;\r\n\r\n        if (this._horizontalBar.isVisible && windowContentsWidth <= this._clientWidth && !this.forceHorizontalBar) {\r\n            this._grid.setRowDefinition(1, 0, true);\r\n            this._horizontalBar.isVisible = false;\r\n            this._horizontalBar.value = 0;\r\n            this._rebuildLayout = true;\r\n        } else if (!this._horizontalBar.isVisible && (windowContentsWidth > this._clientWidth || this.forceHorizontalBar)) {\r\n            this._grid.setRowDefinition(1, this._barSize, true);\r\n            this._horizontalBar.isVisible = true;\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        if (this._verticalBar.isVisible && windowContentsHeight <= this._clientHeight && !this.forceVerticalBar) {\r\n            this._grid.setColumnDefinition(1, 0, true);\r\n            this._verticalBar.isVisible = false;\r\n            this._verticalBar.value = 0;\r\n            this._rebuildLayout = true;\r\n        } else if (!this._verticalBar.isVisible && (windowContentsHeight > this._clientHeight || this.forceVerticalBar)) {\r\n            this._grid.setColumnDefinition(1, this._barSize, true);\r\n            this._verticalBar.isVisible = true;\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        this._buildClientSizes();\r\n\r\n        const ratio = this.host.idealRatio;\r\n\r\n        this._horizontalBar.thumbWidth = this._thumbLength * 0.9 * (this._clientWidth / ratio) + \"px\";\r\n        this._verticalBar.thumbWidth = this._thumbLength * 0.9 * (this._clientHeight / ratio) + \"px\";\r\n    }\r\n\r\n    public _link(host: AdvancedDynamicTexture): void {\r\n        super._link(host);\r\n\r\n        this._attachWheel();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _addBar(barControl: ScrollBar | ImageScrollBar, barContainer: Rectangle, isVertical: boolean, rotation: number) {\r\n        barControl.paddingLeft = 0;\r\n        barControl.width = \"100%\";\r\n        barControl.height = \"100%\";\r\n        barControl.barOffset = 0;\r\n        barControl.value = 0;\r\n        barControl.maximum = 1;\r\n        barControl.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        barControl.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        barControl.isVertical = isVertical;\r\n        barControl.rotation = rotation;\r\n        barControl.isVisible = false;\r\n\r\n        barContainer.addControl(barControl);\r\n\r\n        barControl.onValueChangedObservable.add(() => {\r\n            this._setWindowPosition();\r\n        });\r\n    }\r\n\r\n    /** @internal */\r\n    private _attachWheel() {\r\n        if (!this._host || this._onWheelObserver) {\r\n            return;\r\n        }\r\n\r\n        this._onWheelObserver = this.onWheelObservable.add((pi) => {\r\n            if (!this._pointerIsOver || this.isReadOnly) {\r\n                return;\r\n            }\r\n            if (this._verticalBar.isVisible == true) {\r\n                if (pi.y < 0 && this._verticalBar.value > 0) {\r\n                    this._verticalBar.value -= this._wheelPrecision;\r\n                } else if (pi.y > 0 && this._verticalBar.value < this._verticalBar.maximum) {\r\n                    this._verticalBar.value += this._wheelPrecision;\r\n                }\r\n            }\r\n            if (this._horizontalBar.isVisible == true) {\r\n                if (pi.x < 0 && this._horizontalBar.value < this._horizontalBar.maximum) {\r\n                    this._horizontalBar.value += this._wheelPrecision;\r\n                } else if (pi.x > 0 && this._horizontalBar.value > 0) {\r\n                    this._horizontalBar.value -= this._wheelPrecision;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public _renderHighlightSpecific(context: ICanvasRenderingContext): void {\r\n        if (!this.isHighlighted) {\r\n            return;\r\n        }\r\n\r\n        super._renderHighlightSpecific(context);\r\n\r\n        this._grid._renderHighlightSpecific(context);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        this.onWheelObservable.remove(this._onWheelObserver);\r\n        this._onWheelObserver = null;\r\n        super.dispose();\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.ScrollViewer\", ScrollViewer);\r\n","import type { Nullable } from \"core/types\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Rectangle } from \"./rectangle\";\r\nimport type { Control } from \"./control\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\n\r\n/**\r\n * Class used to create toggle buttons\r\n * @since 5.0.0\r\n */\r\nexport class ToggleButton extends Rectangle {\r\n    /**\r\n     * Function called to generate the toActive animation\r\n     */\r\n    public toActiveAnimation: () => void;\r\n\r\n    /**\r\n     * Function called to generate the toInactive animation\r\n     */\r\n    public toInactiveAnimation: () => void;\r\n\r\n    /**\r\n     * Function called to generate a pointer enter animation when the toggle button is active.\r\n     */\r\n    public pointerEnterActiveAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation when the toggle button is active.\r\n     */\r\n    public pointerOutActiveAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation when the toggle button is active.\r\n     */\r\n    public pointerDownActiveAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation when the toggle button is active.\r\n     */\r\n    public pointerUpActiveAnimation: () => void;\r\n\r\n    /**\r\n     * Function called to generate a pointer enter animation when the toggle button is inactive.\r\n     */\r\n    public pointerEnterInactiveAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation when the toggle button is inactive.\r\n     */\r\n    public pointerOutInactiveAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation when the toggle button is inactive.\r\n     */\r\n    public pointerDownInactiveAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation when the toggle button is inactive.\r\n     */\r\n    public pointerUpInactiveAnimation: () => void;\r\n\r\n    /** Observable raised when isActive is changed */\r\n    public onIsActiveChangedObservable = new Observable<boolean>();\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the toggle button will let internal controls handle picking instead of doing it directly using its bounding info\r\n     */\r\n    public delegatePickingToChildren = false;\r\n\r\n    private _group: string;\r\n    /** Gets or sets group name this toggle button belongs to */\r\n    public get group(): string {\r\n        return this._group;\r\n    }\r\n    public set group(value: string) {\r\n        if (this._group === value) {\r\n            return;\r\n        }\r\n\r\n        this._group = value;\r\n    }\r\n\r\n    private _isActive = false;\r\n    /** Gets or sets a boolean indicating if the toggle button is active or not */\r\n    public get isActive(): boolean {\r\n        return this._isActive;\r\n    }\r\n    public set isActive(value: boolean) {\r\n        // Function modeled after radioButton.ts\r\n        if (this._isActive === value) {\r\n            return;\r\n        }\r\n\r\n        this._isActive = value;\r\n\r\n        // Update the visual state based on the new value\r\n        if (this._isActive) {\r\n            this.toActiveAnimation?.();\r\n        } else {\r\n            this.toInactiveAnimation?.();\r\n        }\r\n\r\n        this._markAsDirty();\r\n\r\n        this.onIsActiveChangedObservable.notifyObservers(value);\r\n\r\n        if (this._isActive && this._host && this._group) {\r\n            // A toggle button in a group can only have 1 active element at a given time.\r\n            // If this toggle button has a group, set other toggle buttons in the group to inactive.\r\n            this._host.executeOnAllControls((control) => {\r\n                // Check for control type ToggleButton\r\n                if (control.typeName === \"ToggleButton\") {\r\n                    // Don't do anything to this toggle button\r\n                    if (control === this) {\r\n                        return;\r\n                    }\r\n\r\n                    const childToggle = <ToggleButton>control;\r\n                    // If toggle button is in same group, set isActive to false\r\n                    if (childToggle.group === this.group) {\r\n                        childToggle.isActive = false;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new ToggleButton\r\n     * @param name defines the control name\r\n     * @param group defines the toggle group this toggle belongs to\r\n     */\r\n    constructor(public name?: string, group?: string) {\r\n        super(name);\r\n        this.group = group ?? \"\";\r\n\r\n        this.thickness = 0;\r\n        this.isPointerBlocker = true;\r\n\r\n        let alphaStore: Nullable<number> = null;\r\n\r\n        this.toActiveAnimation = () => {\r\n            this.thickness = 1;\r\n        };\r\n        this.toInactiveAnimation = () => {\r\n            this.thickness = 0;\r\n        };\r\n\r\n        this.pointerEnterActiveAnimation = () => {\r\n            alphaStore = this.alpha;\r\n            this.alpha -= 0.1;\r\n        };\r\n\r\n        this.pointerOutActiveAnimation = () => {\r\n            if (alphaStore !== null) {\r\n                this.alpha = alphaStore;\r\n            }\r\n        };\r\n\r\n        this.pointerDownActiveAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        };\r\n\r\n        this.pointerUpActiveAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        };\r\n\r\n        this.pointerEnterInactiveAnimation = () => {\r\n            alphaStore = this.alpha;\r\n            this.alpha -= 0.1;\r\n        };\r\n\r\n        this.pointerOutInactiveAnimation = () => {\r\n            if (alphaStore !== null) {\r\n                this.alpha = alphaStore;\r\n            }\r\n        };\r\n\r\n        this.pointerDownInactiveAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        };\r\n\r\n        this.pointerUpInactiveAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ToggleButton\";\r\n    }\r\n\r\n    // While being a container, the toggle button behaves like a control.\r\n    /**\r\n     * @internal\r\n     */\r\n    public _processPicking(x: number, y: number, pi: PointerInfoBase, type: number, pointerId: number, buttonIndex: number, deltaX?: number, deltaY?: number): boolean {\r\n        if (!this._isEnabled || !this.isHitTestVisible || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.delegatePickingToChildren) {\r\n            let contains = false;\r\n            for (let index = this._children.length - 1; index >= 0; index--) {\r\n                const child = this._children[index];\r\n                if (child.isEnabled && child.isHitTestVisible && child.isVisible && !child.notRenderable && child.contains(x, y)) {\r\n                    contains = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!contains) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerEnter(target: Control, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerEnter(target, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isReadOnly) {\r\n            return true;\r\n        }\r\n\r\n        if (this._isActive) {\r\n            if (this.pointerEnterActiveAnimation) {\r\n                this.pointerEnterActiveAnimation();\r\n            }\r\n        } else {\r\n            if (this.pointerEnterInactiveAnimation) {\r\n                this.pointerEnterInactiveAnimation();\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerOut(target: Control, pi: PointerInfoBase, force = false): void {\r\n        if (!this.isReadOnly) {\r\n            if (this._isActive) {\r\n                if (this.pointerOutActiveAnimation) {\r\n                    this.pointerOutActiveAnimation();\r\n                }\r\n            } else {\r\n                if (this.pointerOutInactiveAnimation) {\r\n                    this.pointerOutInactiveAnimation();\r\n                }\r\n            }\r\n        }\r\n\r\n        super._onPointerOut(target, pi, force);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isReadOnly) {\r\n            return true;\r\n        }\r\n\r\n        if (this._isActive) {\r\n            if (this.pointerDownActiveAnimation) {\r\n                this.pointerDownActiveAnimation();\r\n            }\r\n        } else {\r\n            if (this.pointerDownInactiveAnimation) {\r\n                this.pointerDownInactiveAnimation();\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean, pi: PointerInfoBase): void {\r\n        if (!this.isReadOnly) {\r\n            if (this._isActive) {\r\n                if (this.pointerUpActiveAnimation) {\r\n                    this.pointerUpActiveAnimation();\r\n                }\r\n            } else {\r\n                if (this.pointerUpInactiveAnimation) {\r\n                    this.pointerUpInactiveAnimation();\r\n                }\r\n            }\r\n        }\r\n\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick, pi);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.ToggleButton\", ToggleButton);\r\n","import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Observable } from \"core/Misc/observable\";\r\n\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { Button } from \"./button\";\r\nimport type { Container } from \"./container\";\r\nimport type { TextBlock } from \"./textBlock\";\r\nimport type { InputText } from \"./inputText\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { InputTextArea } from \"./inputTextArea\";\r\n\r\n/**\r\n * Class used to store key control properties\r\n */\r\nexport class KeyPropertySet {\r\n    /** Width */\r\n    width?: string;\r\n    /** Height */\r\n    height?: string;\r\n    /** Left padding */\r\n    paddingLeft?: string;\r\n    /** Right padding */\r\n    paddingRight?: string;\r\n    /** Top padding */\r\n    paddingTop?: string;\r\n    /** Bottom padding */\r\n    paddingBottom?: string;\r\n    /** Foreground color */\r\n    color?: string;\r\n    /** Background color */\r\n    background?: string;\r\n}\r\n\r\ntype ConnectedInputText = {\r\n    input: InputText;\r\n    onFocusObserver: Nullable<Observer<InputText>>;\r\n    onBlurObserver: Nullable<Observer<InputText>>;\r\n};\r\n\r\n/**\r\n * Class used to create virtual keyboard\r\n */\r\nexport class VirtualKeyboard extends StackPanel {\r\n    /** Observable raised when a key is pressed */\r\n    public onKeyPressObservable = new Observable<string>();\r\n\r\n    /** Gets or sets default key button width */\r\n    public defaultButtonWidth = \"40px\";\r\n    /** Gets or sets default key button height */\r\n    public defaultButtonHeight = \"40px\";\r\n\r\n    /** Gets or sets default key button left padding */\r\n    public defaultButtonPaddingLeft = \"2px\";\r\n    /** Gets or sets default key button right padding */\r\n    public defaultButtonPaddingRight = \"2px\";\r\n    /** Gets or sets default key button top padding */\r\n    public defaultButtonPaddingTop = \"2px\";\r\n    /** Gets or sets default key button bottom padding */\r\n    public defaultButtonPaddingBottom = \"2px\";\r\n\r\n    /** Gets or sets default key button foreground color */\r\n    public defaultButtonColor = \"#DDD\";\r\n    /** Gets or sets default key button background color */\r\n    public defaultButtonBackground = \"#070707\";\r\n\r\n    /** Gets or sets shift button foreground color */\r\n    public shiftButtonColor = \"#7799FF\";\r\n    /** Gets or sets shift button thickness*/\r\n    public selectedShiftThickness = 1;\r\n\r\n    /** Gets shift key state */\r\n    public shiftState = 0;\r\n\r\n    protected _getTypeName(): string {\r\n        return \"VirtualKeyboard\";\r\n    }\r\n\r\n    private _createKey(key: string, propertySet: Nullable<KeyPropertySet>) {\r\n        const button = Button.CreateSimpleButton(key, key);\r\n\r\n        button.width = propertySet && propertySet.width ? propertySet.width : this.defaultButtonWidth;\r\n        button.height = propertySet && propertySet.height ? propertySet.height : this.defaultButtonHeight;\r\n        button.color = propertySet && propertySet.color ? propertySet.color : this.defaultButtonColor;\r\n        button.background = propertySet && propertySet.background ? propertySet.background : this.defaultButtonBackground;\r\n        button.paddingLeft = propertySet && propertySet.paddingLeft ? propertySet.paddingLeft : this.defaultButtonPaddingLeft;\r\n        button.paddingRight = propertySet && propertySet.paddingRight ? propertySet.paddingRight : this.defaultButtonPaddingRight;\r\n        button.paddingTop = propertySet && propertySet.paddingTop ? propertySet.paddingTop : this.defaultButtonPaddingTop;\r\n        button.paddingBottom = propertySet && propertySet.paddingBottom ? propertySet.paddingBottom : this.defaultButtonPaddingBottom;\r\n\r\n        button.thickness = 0;\r\n        button.isFocusInvisible = true;\r\n\r\n        button.shadowColor = this.shadowColor;\r\n        button.shadowBlur = this.shadowBlur;\r\n        button.shadowOffsetX = this.shadowOffsetX;\r\n        button.shadowOffsetY = this.shadowOffsetY;\r\n\r\n        button.onPointerUpObservable.add(() => {\r\n            this.onKeyPressObservable.notifyObservers(key);\r\n        });\r\n\r\n        return button;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row of keys\r\n     * @param keys defines the list of keys to add\r\n     * @param propertySets defines the associated property sets\r\n     */\r\n    public addKeysRow(keys: Array<string>, propertySets?: Array<KeyPropertySet>): void {\r\n        const panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.isFocusInvisible = true;\r\n\r\n        let maxKey: Nullable<Button> = null;\r\n        for (let i = 0; i < keys.length; i++) {\r\n            let properties = null;\r\n\r\n            if (propertySets && propertySets.length === keys.length) {\r\n                properties = propertySets[i];\r\n            }\r\n\r\n            const key = this._createKey(keys[i], properties);\r\n            if (!maxKey || key.heightInPixels > maxKey.heightInPixels) {\r\n                maxKey = key;\r\n            }\r\n\r\n            panel.addControl(key);\r\n        }\r\n\r\n        panel.height = maxKey ? maxKey.height : this.defaultButtonHeight;\r\n\r\n        this.addControl(panel);\r\n    }\r\n\r\n    /**\r\n     * Set the shift key to a specific state\r\n     * @param shiftState defines the new shift state\r\n     */\r\n    public applyShiftState(shiftState: number): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (let i = 0; i < this.children.length; i++) {\r\n            const row = this.children[i];\r\n            if (!row || !(<Container>row).children) {\r\n                continue;\r\n            }\r\n\r\n            const rowContainer = <Container>row;\r\n            for (let j = 0; j < rowContainer.children.length; j++) {\r\n                const button = rowContainer.children[j] as Button;\r\n\r\n                if (!button || !button.children[0]) {\r\n                    continue;\r\n                }\r\n\r\n                const button_tblock = button.children[0] as TextBlock;\r\n\r\n                if (button_tblock.text === \"\\u21E7\") {\r\n                    button.color = shiftState ? this.shiftButtonColor : this.defaultButtonColor;\r\n                    button.thickness = shiftState > 1 ? this.selectedShiftThickness : 0;\r\n                }\r\n\r\n                button_tblock.text = shiftState > 0 ? button_tblock.text.toUpperCase() : button_tblock.text.toLowerCase();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _currentlyConnectedInputText: Nullable<InputText | InputTextArea> = null;\r\n    private _connectedInputTexts: ConnectedInputText[] = [];\r\n    private _onKeyPressObserver: Nullable<Observer<string>> = null;\r\n\r\n    /** Gets the input text control currently attached to the keyboard */\r\n    public get connectedInputText(): Nullable<InputText | InputTextArea> {\r\n        return this._currentlyConnectedInputText;\r\n    }\r\n\r\n    /**\r\n     * Connects the keyboard with an input text control\r\n     *\r\n     * @param input defines the target control\r\n     */\r\n    public connect(input: InputText): void {\r\n        const inputTextAlreadyConnected = this._connectedInputTexts.some((a) => a.input === input);\r\n        if (inputTextAlreadyConnected) {\r\n            return;\r\n        }\r\n\r\n        if (this._onKeyPressObserver === null) {\r\n            this._onKeyPressObserver = this.onKeyPressObservable.add((key) => {\r\n                if (!this._currentlyConnectedInputText) {\r\n                    return;\r\n                }\r\n\r\n                this._currentlyConnectedInputText._host.focusedControl = this._currentlyConnectedInputText;\r\n\r\n                switch (key) {\r\n                    case \"\\u21E7\":\r\n                        this.shiftState++;\r\n                        if (this.shiftState > 2) {\r\n                            this.shiftState = 0;\r\n                        }\r\n                        this.applyShiftState(this.shiftState);\r\n                        return;\r\n                    case \"\\u2190\":\r\n                        if (this._currentlyConnectedInputText instanceof InputTextArea) {\r\n                            this._currentlyConnectedInputText.alternativeProcessKey(\"Backspace\");\r\n                        } else {\r\n                            this._currentlyConnectedInputText.processKey(8);\r\n                        }\r\n                        return;\r\n                    case \"\\u21B5\":\r\n                        if (this._currentlyConnectedInputText instanceof InputTextArea) {\r\n                            this._currentlyConnectedInputText.alternativeProcessKey(\"Enter\");\r\n                        } else {\r\n                            this._currentlyConnectedInputText.processKey(13);\r\n                        }\r\n                        return;\r\n                }\r\n                if (this._currentlyConnectedInputText instanceof InputTextArea) {\r\n                    this._currentlyConnectedInputText.alternativeProcessKey(\"\", this.shiftState ? key.toUpperCase() : key);\r\n                } else {\r\n                    this._currentlyConnectedInputText.processKey(-1, this.shiftState ? key.toUpperCase() : key);\r\n                }\r\n\r\n                if (this.shiftState === 1) {\r\n                    this.shiftState = 0;\r\n                    this.applyShiftState(this.shiftState);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.isVisible = false;\r\n        this._currentlyConnectedInputText = input;\r\n        input._connectedVirtualKeyboard = this;\r\n\r\n        // Events hooking\r\n        const onFocusObserver: Nullable<Observer<InputText>> = input.onFocusObservable.add(() => {\r\n            this._currentlyConnectedInputText = input;\r\n            input._connectedVirtualKeyboard = this;\r\n            this.isVisible = true;\r\n        });\r\n\r\n        const onBlurObserver: Nullable<Observer<InputText>> = input.onBlurObservable.add(() => {\r\n            input._connectedVirtualKeyboard = null;\r\n            this._currentlyConnectedInputText = null;\r\n            this.isVisible = false;\r\n        });\r\n\r\n        this._connectedInputTexts.push({\r\n            input,\r\n            onBlurObserver,\r\n            onFocusObserver,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disconnects the keyboard from connected InputText controls\r\n     *\r\n     * @param input optionally defines a target control, otherwise all are disconnected\r\n     */\r\n    public disconnect(input?: InputText): void {\r\n        if (input) {\r\n            // .find not available on IE\r\n            const filtered = this._connectedInputTexts.filter((a) => a.input === input);\r\n            if (filtered.length === 1) {\r\n                this._removeConnectedInputObservables(filtered[0]);\r\n\r\n                this._connectedInputTexts = this._connectedInputTexts.filter((a) => a.input !== input);\r\n                if (this._currentlyConnectedInputText === input) {\r\n                    this._currentlyConnectedInputText = null;\r\n                }\r\n            }\r\n        } else {\r\n            this._connectedInputTexts.forEach((connectedInputText: ConnectedInputText) => {\r\n                this._removeConnectedInputObservables(connectedInputText);\r\n            });\r\n            this._connectedInputTexts.length = 0;\r\n        }\r\n\r\n        if (this._connectedInputTexts.length === 0) {\r\n            this._currentlyConnectedInputText = null;\r\n            this.onKeyPressObservable.remove(this._onKeyPressObserver);\r\n            this._onKeyPressObserver = null;\r\n        }\r\n    }\r\n\r\n    private _removeConnectedInputObservables(connectedInputText: ConnectedInputText): void {\r\n        connectedInputText.input._connectedVirtualKeyboard = null;\r\n        connectedInputText.input.onFocusObservable.remove(connectedInputText.onFocusObserver);\r\n        connectedInputText.input.onBlurObservable.remove(connectedInputText.onBlurObserver);\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n\r\n        this.disconnect();\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new keyboard using a default layout\r\n     *\r\n     * @param name defines control name\r\n     * @returns a new VirtualKeyboard\r\n     */\r\n    public static CreateDefaultLayout(name?: string): VirtualKeyboard {\r\n        const returnValue = new VirtualKeyboard(name);\r\n\r\n        returnValue.addKeysRow([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"\\u2190\"]);\r\n        returnValue.addKeysRow([\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"]);\r\n        returnValue.addKeysRow([\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \";\", \"'\", \"\\u21B5\"]);\r\n        returnValue.addKeysRow([\"\\u21E7\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\", \"/\"]);\r\n        returnValue.addKeysRow([\" \"], [{ width: \"200px\" }]);\r\n\r\n        return returnValue;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        super._parseFromContent(serializedObject, host);\r\n        for (const row of this.children) {\r\n            if (row.getClassName() === \"StackPanel\") {\r\n                const stackPanel = row as StackPanel;\r\n                for (const key of stackPanel.children) {\r\n                    if (key.getClassName() === \"Button\" && key.name) {\r\n                        key.onPointerUpObservable.add(() => {\r\n                            this.onKeyPressObservable.notifyObservers(key.name as string);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.VirtualKeyboard\", VirtualKeyboard);\r\n","import { Control } from \"./control\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/** Class used to render a grid  */\r\nexport class DisplayGrid extends Control {\r\n    private _cellWidth = 20;\r\n    private _cellHeight = 20;\r\n\r\n    private _minorLineTickness = 1;\r\n    private _minorLineColor = \"DarkGray\";\r\n\r\n    private _majorLineTickness = 2;\r\n    private _majorLineColor = \"White\";\r\n\r\n    private _majorLineFrequency = 5;\r\n\r\n    private _background = \"Black\";\r\n\r\n    private _displayMajorLines = true;\r\n    private _displayMinorLines = true;\r\n\r\n    /** Gets or sets a boolean indicating if minor lines must be rendered (true by default)) */\r\n    @serialize()\r\n    public get displayMinorLines(): boolean {\r\n        return this._displayMinorLines;\r\n    }\r\n\r\n    public set displayMinorLines(value: boolean) {\r\n        if (this._displayMinorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMinorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if major lines must be rendered (true by default)) */\r\n    @serialize()\r\n    public get displayMajorLines(): boolean {\r\n        return this._displayMajorLines;\r\n    }\r\n\r\n    public set displayMajorLines(value: boolean) {\r\n        if (this._displayMajorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMajorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color (Black by default) */\r\n    @serialize()\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the width of each cell (20 by default) */\r\n    @serialize()\r\n    public get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n\r\n    public set cellWidth(value: number) {\r\n        this._cellWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of each cell (20 by default) */\r\n    @serialize()\r\n    public get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n\r\n    public set cellHeight(value: number) {\r\n        this._cellHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of minor lines (1 by default) */\r\n    @serialize()\r\n    public get minorLineTickness(): number {\r\n        return this._minorLineTickness;\r\n    }\r\n\r\n    public set minorLineTickness(value: number) {\r\n        this._minorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of minor lines (DarkGray by default) */\r\n    @serialize()\r\n    public get minorLineColor(): string {\r\n        return this._minorLineColor;\r\n    }\r\n\r\n    public set minorLineColor(value: string) {\r\n        this._minorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of major lines (2 by default) */\r\n    @serialize()\r\n    public get majorLineTickness(): number {\r\n        return this._majorLineTickness;\r\n    }\r\n\r\n    public set majorLineTickness(value: number) {\r\n        this._majorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of major lines (White by default) */\r\n    @serialize()\r\n    public get majorLineColor(): string {\r\n        return this._majorLineColor;\r\n    }\r\n\r\n    public set majorLineColor(value: string) {\r\n        this._majorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the frequency of major lines (default is 1 every 5 minor lines)*/\r\n    @serialize()\r\n    public get majorLineFrequency(): number {\r\n        return this._majorLineFrequency;\r\n    }\r\n\r\n    public set majorLineFrequency(value: number) {\r\n        this._majorLineFrequency = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new GridDisplayRectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._isEnabled) {\r\n            if (this._background) {\r\n                context.fillStyle = this._background;\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n\r\n            const cellCountX = this._currentMeasure.width / this._cellWidth;\r\n            const cellCountY = this._currentMeasure.height / this._cellHeight;\r\n\r\n            // Minor lines\r\n            const left = this._currentMeasure.left + this._currentMeasure.width / 2;\r\n            const top = this._currentMeasure.top + this._currentMeasure.height / 2;\r\n\r\n            if (this._displayMinorLines) {\r\n                context.strokeStyle = this._minorLineColor;\r\n                context.lineWidth = this._minorLineTickness;\r\n\r\n                for (let x = -cellCountX / 2 + 1; x < cellCountX / 2; x++) {\r\n                    const cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n\r\n                    context.stroke();\r\n                }\r\n\r\n                for (let y = -cellCountY / 2 + 1; y < cellCountY / 2; y++) {\r\n                    const cellY = top + y * this.cellHeight;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.stroke();\r\n                }\r\n            }\r\n\r\n            // Major lines\r\n            if (this._displayMajorLines) {\r\n                context.strokeStyle = this._majorLineColor;\r\n                context.lineWidth = this._majorLineTickness;\r\n\r\n                for (let x = -cellCountX / 2 + this._majorLineFrequency; x < cellCountX / 2; x += this._majorLineFrequency) {\r\n                    const cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n                    context.stroke();\r\n                }\r\n\r\n                for (let y = -cellCountY / 2 + this._majorLineFrequency; y < cellCountY / 2; y += this._majorLineFrequency) {\r\n                    const cellY = top + y * this.cellHeight;\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.closePath();\r\n                    context.stroke();\r\n                }\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"DisplayGrid\";\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.DisplayGrid\", DisplayGrid);\r\n","import { BaseSlider } from \"./baseSlider\";\r\nimport { Measure } from \"../../measure\";\r\nimport { Image } from \"../image\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport type { AdvancedDynamicTexture } from \"../../advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to create slider controls based on images\r\n */\r\nexport class ImageBasedSlider extends BaseSlider {\r\n    private _backgroundImage: Image;\r\n    private _thumbImage: Image;\r\n    private _valueBarImage: Image;\r\n    private _tempMeasure = new Measure(0, 0, 0, 0);\r\n\r\n    @serialize()\r\n    public get displayThumb(): boolean {\r\n        return this._displayThumb && this.thumbImage != null;\r\n    }\r\n\r\n    public set displayThumb(value: boolean) {\r\n        if (this._displayThumb === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayThumb = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the background\r\n     */\r\n    public get backgroundImage(): Image {\r\n        return this._backgroundImage;\r\n    }\r\n\r\n    public set backgroundImage(value: Image) {\r\n        if (this._backgroundImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._backgroundImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the value bar\r\n     */\r\n    public get valueBarImage(): Image {\r\n        return this._valueBarImage;\r\n    }\r\n\r\n    public set valueBarImage(value: Image) {\r\n        if (this._valueBarImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._valueBarImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the thumb\r\n     */\r\n    public get thumbImage(): Image {\r\n        return this._thumbImage;\r\n    }\r\n\r\n    public set thumbImage(value: Image) {\r\n        if (this._thumbImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new ImageBasedSlider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ImageBasedSlider\";\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        this._prepareRenderingData(\"rectangle\");\r\n        const thumbPosition = this._getThumbPosition();\r\n        const left = this._renderLeft;\r\n        const top = this._renderTop;\r\n        const width = this._renderWidth;\r\n        const height = this._renderHeight;\r\n\r\n        // Background\r\n        if (this._backgroundImage) {\r\n            this._tempMeasure.copyFromFloats(left, top, width, height);\r\n            if (this.isThumbClamped && this.displayThumb) {\r\n                if (this.isVertical) {\r\n                    this._tempMeasure.height += this._effectiveThumbThickness;\r\n                } else {\r\n                    this._tempMeasure.width += this._effectiveThumbThickness;\r\n                }\r\n            }\r\n            this._backgroundImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._backgroundImage._draw(context);\r\n        }\r\n\r\n        // Bar\r\n        if (this._valueBarImage) {\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped && this.displayThumb) {\r\n                    this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                } else {\r\n                    this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            } else {\r\n                if (this.isThumbClamped && this.displayThumb) {\r\n                    this._tempMeasure.copyFromFloats(left, top, thumbPosition + this._effectiveThumbThickness / 2, height);\r\n                } else {\r\n                    this._tempMeasure.copyFromFloats(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n            this._valueBarImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._valueBarImage._draw(context);\r\n        }\r\n\r\n        // Thumb\r\n        if (this.displayThumb) {\r\n            if (this.isVertical) {\r\n                this._tempMeasure.copyFromFloats(\r\n                    left - this._effectiveBarOffset,\r\n                    this._currentMeasure.top + thumbPosition,\r\n                    this._currentMeasure.width,\r\n                    this._effectiveThumbThickness\r\n                );\r\n            } else {\r\n                this._tempMeasure.copyFromFloats(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n            }\r\n\r\n            this._thumbImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._thumbImage._draw(context);\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    /**\r\n     * Serializes the current control\r\n     * @param serializationObject defined the JSON serialized object\r\n     */\r\n    public serialize(serializationObject: any) {\r\n        super.serialize(serializationObject);\r\n        const backgroundImage = {};\r\n        const thumbImage = {};\r\n        const valueBarImage = {};\r\n        this.backgroundImage.serialize(backgroundImage);\r\n        this.thumbImage.serialize(thumbImage);\r\n        this.valueBarImage.serialize(valueBarImage);\r\n        serializationObject.backgroundImage = backgroundImage;\r\n        serializationObject.thumbImage = thumbImage;\r\n        serializationObject.valueBarImage = valueBarImage;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        super._parseFromContent(serializedObject, host);\r\n        this.backgroundImage = Image.Parse(serializedObject.backgroundImage, host) as Image;\r\n        this.thumbImage = Image.Parse(serializedObject.thumbImage, host) as Image;\r\n        this.valueBarImage = Image.Parse(serializedObject.valueBarImage, host) as Image;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.ImageBasedSlider\", ImageBasedSlider);\r\n","import { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Forcing an export so that this code will execute\r\n * @internal\r\n */\r\nconst name = \"Statics\";\r\n\r\nexport { name };\r\n\r\n/**\r\n * Creates a stack panel that can be used to render headers\r\n * @param control defines the control to associate with the header\r\n * @param text defines the text of the header\r\n * @param size defines the size of the header\r\n * @param options defines options used to configure the header\r\n * @param options.isHorizontal\r\n * @param options.controlFirst\r\n * @returns a new StackPanel\r\n */\r\nControl.AddHeader = function (control: Control, text: string, size: string | number, options: { isHorizontal: boolean; controlFirst: boolean }): StackPanel {\r\n    const panel = new StackPanel(\"panel\");\r\n    const isHorizontal = options ? options.isHorizontal : true;\r\n    const controlFirst = options ? options.controlFirst : true;\r\n\r\n    panel.isVertical = !isHorizontal;\r\n\r\n    const header = new TextBlock(\"header\");\r\n    header.text = text;\r\n    header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    if (isHorizontal) {\r\n        header.width = size;\r\n    } else {\r\n        header.height = size;\r\n    }\r\n\r\n    if (controlFirst) {\r\n        panel.addControl(control);\r\n        panel.addControl(header);\r\n        header.paddingLeft = \"5px\";\r\n    } else {\r\n        panel.addControl(header);\r\n        panel.addControl(control);\r\n        header.paddingRight = \"5px\";\r\n    }\r\n\r\n    header.shadowBlur = control.shadowBlur;\r\n    header.shadowColor = control.shadowColor;\r\n    header.shadowOffsetX = control.shadowOffsetX;\r\n    header.shadowOffsetY = control.shadowOffsetY;\r\n\r\n    return panel;\r\n};\r\n","/*\r\n * Base Gradient class. Should not be used directly.\r\n */\r\n\r\nimport type { ICanvasGradient, ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/**\r\n * Type that represents a single stop on the gradient.\r\n */\r\nexport type GradientColorStop = {\r\n    /**\r\n     * Offset from the start where the color will be applied.\r\n     */\r\n    offset: number;\r\n    /**\r\n     * Color to be applied.\r\n     */\r\n    color: string;\r\n};\r\n\r\n/**\r\n * Class that serves as a base for all the gradients created from context.\r\n */\r\nexport abstract class BaseGradient {\r\n    private _colorStops: GradientColorStop[] = [];\r\n\r\n    private _canvasGradient: CanvasGradient;\r\n    private _context: ICanvasRenderingContext;\r\n    private _gradientDirty: boolean = true;\r\n\r\n    /**\r\n     * Overwritten by child classes to create the canvas gradient.\r\n     * @param context\r\n     */\r\n    protected abstract _createCanvasGradient(context: ICanvasRenderingContext): ICanvasGradient;\r\n\r\n    private _addColorStopsToCanvasGradient() {\r\n        for (const stop of this._colorStops) {\r\n            this._canvasGradient.addColorStop(stop.offset, stop.color);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If there are any changes or the context changed, regenerate the canvas gradient object. Else,\r\n     * reuse the existing gradient.\r\n     **/\r\n    public getCanvasGradient(context: ICanvasRenderingContext) {\r\n        if (this._gradientDirty || this._context !== context) {\r\n            this._context = context;\r\n            this._canvasGradient = this._createCanvasGradient(context);\r\n            this._addColorStopsToCanvasGradient();\r\n            this._gradientDirty = false;\r\n        }\r\n        return this._canvasGradient;\r\n    }\r\n\r\n    /**\r\n     * Adds a new color stop to the gradient.\r\n     * @param offset the offset of the stop on the gradient. Should be between 0 and 1\r\n     * @param color the color of the stop\r\n     */\r\n    public addColorStop(offset: number, color: string) {\r\n        this._colorStops.push({ offset, color });\r\n        this._gradientDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Removes an existing color stop with the specified offset from the gradient\r\n     * @param offset the offset of the stop to be removed\r\n     */\r\n    public removeColorStop(offset: number) {\r\n        this._colorStops = this._colorStops.filter((colorStop) => colorStop.offset !== offset);\r\n        this._gradientDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Removes all color stops from the gradient\r\n     */\r\n    public clearColorStops() {\r\n        this._colorStops = [];\r\n        this._gradientDirty = true;\r\n    }\r\n\r\n    /** Color stops of the gradient */\r\n    public get colorStops() {\r\n        return this._colorStops;\r\n    }\r\n\r\n    /** Type of the gradient */\r\n    public getClassName() {\r\n        return \"BaseGradient\";\r\n    }\r\n\r\n    /** Serialize into a json object */\r\n    public serialize(serializationObject: any) {\r\n        serializationObject.colorStops = this._colorStops;\r\n        serializationObject.className = this.getClassName();\r\n    }\r\n\r\n    /** Parse from json object */\r\n    public parse(serializationObject: any) {\r\n        this._colorStops = serializationObject.colorStops;\r\n    }\r\n}\r\n","import type { ICanvasGradient, ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport { BaseGradient } from \"./BaseGradient\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\n\r\n/**\r\n * Gradient along a line that connects two coordinates.\r\n * These coordinates are relative to the canvas' space, not to any control's space.\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createLinearGradient\r\n */\r\nexport class LinearGradient extends BaseGradient {\r\n    private _x0: number;\r\n    private _y0: number;\r\n    private _x1: number;\r\n    private _y1: number;\r\n\r\n    /**\r\n     * Creates a new linear gradient\r\n     * @param x0\r\n     * @param y0\r\n     * @param x1\r\n     * @param y1\r\n     */\r\n    constructor(x0?: number, y0?: number, x1?: number, y1?: number) {\r\n        super();\r\n        this._x0 = x0 ?? 0;\r\n        this._y0 = y0 ?? 0;\r\n        this._x1 = x1 ?? 0;\r\n        this._y1 = y1 ?? 0;\r\n    }\r\n\r\n    protected _createCanvasGradient(context: ICanvasRenderingContext): ICanvasGradient {\r\n        return context.createLinearGradient(this._x0, this._y0, this._x1, this._y1);\r\n    }\r\n\r\n    /** X axis coordinate of the starting point in the line */\r\n    public get x0() {\r\n        return this._x0;\r\n    }\r\n\r\n    /** X axis coordinate of the ending point in the line */\r\n    public get x1() {\r\n        return this._x1;\r\n    }\r\n\r\n    /** Y axis coordinate of the starting point in the line */\r\n    public get y0() {\r\n        return this._y0;\r\n    }\r\n\r\n    /** Y axis coordinate of the ending point in the line */\r\n    public get y1() {\r\n        return this._y1;\r\n    }\r\n\r\n    /**\r\n     * Class name of the gradient\r\n     * @returns the class name of the gradient\r\n     */\r\n    public getClassName(): string {\r\n        return \"LinearGradient\";\r\n    }\r\n\r\n    /**\r\n     * Serializes this gradient\r\n     * @param serializationObject the object to serialize to\r\n     */\r\n    public serialize(serializationObject: any): void {\r\n        super.serialize(serializationObject);\r\n        serializationObject.x0 = this._x0;\r\n        serializationObject.y0 = this._y0;\r\n        serializationObject.x1 = this._x1;\r\n        serializationObject.y1 = this._y1;\r\n    }\r\n\r\n    /**\r\n     * Parses a gradient from a serialization object\r\n     * @param serializationObject the object to parse from\r\n     */\r\n    public parse(serializationObject: any): void {\r\n        super.parse(serializationObject);\r\n        this._x0 = serializationObject.x0;\r\n        this._y0 = serializationObject.y0;\r\n        this._x1 = serializationObject.x1;\r\n        this._y1 = serializationObject.y1;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.LinearGradient\", LinearGradient);\r\n","import type { ICanvasGradient, ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport { BaseGradient } from \"./BaseGradient\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\n\r\n/**\r\n * Gradient formed from two circles with their own centers and radius.\r\n * The coordinates of the circles centers are relative to the canvas' space, not to any control's space.\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createRadialGradient\r\n */\r\nexport class RadialGradient extends BaseGradient {\r\n    private _x0: number;\r\n    private _y0: number;\r\n    private _r0: number;\r\n    private _x1: number;\r\n    private _y1: number;\r\n    private _r1: number;\r\n\r\n    /**\r\n     * Creates a new radial gradient\r\n     * @param x0 x coordinate of the first circle's center\r\n     * @param y0 y coordinate of the first circle's center\r\n     * @param r0 radius of the first circle\r\n     * @param x1 x coordinate of the second circle's center\r\n     * @param y1 y coordinate of the second circle's center\r\n     * @param r1 radius of the second circle\r\n     */\r\n    constructor(x0?: number, y0?: number, r0?: number, x1?: number, y1?: number, r1?: number) {\r\n        super();\r\n        this._x0 = x0 ?? 0;\r\n        this._y0 = y0 ?? 0;\r\n        this._r0 = r0 ?? 0;\r\n        this._x1 = x1 ?? 0;\r\n        this._y1 = y1 ?? 0;\r\n        this._r1 = r1 ?? 0;\r\n    }\r\n\r\n    protected _createCanvasGradient(context: ICanvasRenderingContext): ICanvasGradient {\r\n        return context.createRadialGradient(this._x0, this._y0, this._r0, this._x1, this._y1, this._r1);\r\n    }\r\n\r\n    /** x coordinate of the first circle's center */\r\n    public get x0() {\r\n        return this._x0;\r\n    }\r\n\r\n    /** x coordinate of the second circle's center */\r\n    public get x1() {\r\n        return this._x1;\r\n    }\r\n\r\n    /** y coordinate of the first circle's center */\r\n    public get y0() {\r\n        return this._y0;\r\n    }\r\n\r\n    /** y coordinate of the second circle's center */\r\n    public get y1() {\r\n        return this._y1;\r\n    }\r\n\r\n    /** radius of the first circle */\r\n    public get r0() {\r\n        return this._r0;\r\n    }\r\n\r\n    /** radius of the second circle */\r\n    public get r1() {\r\n        return this._r1;\r\n    }\r\n\r\n    /**\r\n     * Class name of the gradient\r\n     * @returns the class name of the gradient\r\n     */\r\n    public getClassName() {\r\n        return \"RadialGradient\";\r\n    }\r\n\r\n    /**\r\n     * Serializes this gradient\r\n     * @param serializationObject the object to serialize to\r\n     */\r\n    public serialize(serializationObject: any): void {\r\n        super.serialize(serializationObject);\r\n        serializationObject.x0 = this._x0;\r\n        serializationObject.y0 = this._y0;\r\n        serializationObject.r0 = this._r0;\r\n        serializationObject.x1 = this._x1;\r\n        serializationObject.y1 = this._y1;\r\n        serializationObject.r1 = this._r1;\r\n    }\r\n\r\n    /**\r\n     * Parses a gradient from a serialization object\r\n     * @param serializationObject the object to parse from\r\n     */\r\n    public parse(serializationObject: any): void {\r\n        super.parse(serializationObject);\r\n        this._x0 = serializationObject.x0;\r\n        this._y0 = serializationObject.y0;\r\n        this._r0 = serializationObject.r0;\r\n        this._x1 = serializationObject.x1;\r\n        this._y1 = serializationObject.y1;\r\n        this._r1 = serializationObject.r1;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.RadialGradient\", RadialGradient);\r\n","import { Observable } from \"core/Misc/observable\";\r\nimport type { IDisposable } from \"core/scene\";\r\nimport type { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\n\r\n/**\r\n * Define a style used by control to automatically setup properties based on a template.\r\n * Only support font related properties so far\r\n */\r\nexport class Style implements IDisposable {\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    /** @internal */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** @internal */\r\n    public _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n\r\n    /**\r\n     * Observable raised when the style values are changed\r\n     */\r\n    public onChangedObservable = new Observable<Style>();\r\n\r\n    /**\r\n     * Creates a new style object\r\n     * @param host defines the AdvancedDynamicTexture which hosts this style\r\n     */\r\n    public constructor(host: AdvancedDynamicTexture) {\r\n        this._host = host;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font size\r\n     */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this.onChangedObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font family\r\n     */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font style\r\n     */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Dispose all associated resources */\r\n    public dispose() {\r\n        this.onChangedObservable.clear();\r\n    }\r\n}\r\n","import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Vector2, Vector3, TmpVectors } from \"core/Maths/math.vector\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport type { PointerInfoPre, PointerInfo, PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"core/Events/pointerEvents\";\r\nimport { ClipboardEventTypes, ClipboardInfo } from \"core/Events/clipboardEvents\";\r\nimport type { KeyboardInfoPre } from \"core/Events/keyboardEvents\";\r\nimport { KeyboardEventTypes } from \"core/Events/keyboardEvents\";\r\nimport type { Camera } from \"core/Cameras/camera\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { DynamicTexture } from \"core/Materials/Textures/dynamicTexture\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { Layer } from \"core/Layers/layer\";\r\nimport type { Engine } from \"core/Engines/engine\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport { Container } from \"./controls/container\";\r\nimport { Control } from \"./controls/control\";\r\nimport type { IFocusableControl } from \"./controls/focusableControl\";\r\nimport { Style } from \"./style\";\r\nimport { Measure } from \"./measure\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { Viewport } from \"core/Maths/math.viewport\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { WebRequest } from \"core/Misc/webRequest\";\r\nimport type { IPointerEvent, IWheelEvent } from \"core/Events/deviceInputEvents\";\r\nimport { RandomGUID } from \"core/Misc/guid\";\r\nimport { GetClass } from \"core/Misc/typeStore\";\r\nimport { DecodeBase64ToBinary } from \"core/Misc/stringTools\";\r\n\r\ndeclare type StandardMaterial = import(\"core/Materials/standardMaterial\").StandardMaterial;\r\n\r\n/**\r\n * Class used to create texture to support 2D GUI elements\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui\r\n */\r\nexport class AdvancedDynamicTexture extends DynamicTexture {\r\n    /** Define the Uurl to load snippets */\r\n    public static SnippetUrl = Constants.SnippetUrl;\r\n\r\n    /** Indicates if some optimizations can be performed in GUI GPU management (the downside is additional memory/GPU texture memory used) */\r\n    public static AllowGPUOptimizations = true;\r\n\r\n    /** Snippet ID if the content was created from the snippet server */\r\n    public snippetId: string;\r\n\r\n    /** Observable that fires when the GUI is ready */\r\n    public onGuiReadyObservable = new Observable<AdvancedDynamicTexture>();\r\n\r\n    private _isDirty = false;\r\n    private _renderObserver: Nullable<Observer<Camera>>;\r\n    private _resizeObserver: Nullable<Observer<Engine>>;\r\n    private _preKeyboardObserver: Nullable<Observer<KeyboardInfoPre>>;\r\n    private _prePointerObserver: Nullable<Observer<PointerInfoPre>>;\r\n    private _sceneRenderObserver: Nullable<Observer<Scene>>;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _canvasPointerOutObserver: Nullable<Observer<PointerEvent>>;\r\n    private _canvasBlurObserver: Nullable<Observer<Engine>>;\r\n    private _controlAddedObserver: Nullable<Observer<Nullable<Control>>>;\r\n    private _controlRemovedObserver: Nullable<Observer<Nullable<Control>>>;\r\n    private _background: string;\r\n    /** @internal */\r\n    public _rootContainer = new Container(\"root\");\r\n    /** @internal */\r\n    public _lastPickedControl: Control;\r\n    /** @internal */\r\n    public _lastControlOver: { [pointerId: number]: Control } = {};\r\n    /** @internal */\r\n    public _lastControlDown: { [pointerId: number]: Control } = {};\r\n    /** @internal */\r\n    public _capturingControl: { [pointerId: number]: Control } = {};\r\n    /** @internal */\r\n    public _shouldBlockPointer: boolean;\r\n    /** @internal */\r\n    public _layerToDispose: Nullable<Layer>;\r\n    /** @internal */\r\n    public _linkedControls = new Array<Control>();\r\n    private _isFullscreen = false;\r\n    private _fullscreenViewport = new Viewport(0, 0, 1, 1);\r\n    private _idealWidth = 0;\r\n    private _idealHeight = 0;\r\n    private _useSmallestIdeal: boolean = false;\r\n    private _renderAtIdealSize = false;\r\n    private _focusedControl: Nullable<IFocusableControl>;\r\n    private _blockNextFocusCheck = false;\r\n    private _renderScale = 1;\r\n    private _rootElement: Nullable<HTMLElement>;\r\n    private _cursorChanged = false;\r\n    private _defaultMousePointerId = 0;\r\n    private _rootChildrenHaveChanged: boolean = false;\r\n\r\n    /** @internal */\r\n    public _capturedPointerIds = new Set<number>();\r\n\r\n    /** @internal */\r\n    public _numLayoutCalls = 0;\r\n    /** Gets the number of layout calls made the last time the ADT has been rendered */\r\n    public get numLayoutCalls(): number {\r\n        return this._numLayoutCalls;\r\n    }\r\n\r\n    /** @internal */\r\n    public _numRenderCalls = 0;\r\n    /** Gets the number of render calls made the last time the ADT has been rendered */\r\n    public get numRenderCalls(): number {\r\n        return this._numRenderCalls;\r\n    }\r\n\r\n    /**\r\n     * Define type to string to ensure compatibility across browsers\r\n     * Safari doesn't support DataTransfer constructor\r\n     */\r\n    private _clipboardData: string = \"\";\r\n    /**\r\n     * Observable event triggered each time an clipboard event is received from the rendering canvas\r\n     */\r\n    public onClipboardObservable = new Observable<ClipboardInfo>();\r\n    /**\r\n     * Observable event triggered each time a pointer down is intercepted by a control\r\n     */\r\n    public onControlPickedObservable = new Observable<Control>();\r\n    /**\r\n     * Observable event triggered before layout is evaluated\r\n     */\r\n    public onBeginLayoutObservable = new Observable<AdvancedDynamicTexture>();\r\n    /**\r\n     * Observable event triggered after the layout was evaluated\r\n     */\r\n    public onEndLayoutObservable = new Observable<AdvancedDynamicTexture>();\r\n    /**\r\n     * Observable event triggered before the texture is rendered\r\n     */\r\n    public onBeginRenderObservable = new Observable<AdvancedDynamicTexture>();\r\n    /**\r\n     * Observable event triggered after the texture was rendered\r\n     */\r\n    public onEndRenderObservable = new Observable<AdvancedDynamicTexture>();\r\n    /**\r\n     * Gets or sets a boolean defining if alpha is stored as premultiplied\r\n     */\r\n    public premulAlpha = false;\r\n    /**\r\n     * Gets or sets a boolean indicating that the canvas must be reverted on Y when updating the texture\r\n     */\r\n    public applyYInversionOnUpdate = true;\r\n    /**\r\n     * Gets or sets a number used to scale rendering size (2 means that the texture will be twice bigger).\r\n     * Useful when you want more antialiasing\r\n     */\r\n    public get renderScale(): number {\r\n        return this._renderScale;\r\n    }\r\n    public set renderScale(value: number) {\r\n        if (value === this._renderScale) {\r\n            return;\r\n        }\r\n        this._renderScale = value;\r\n        this._onResize();\r\n    }\r\n    /** Gets or sets the background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n        this._background = value;\r\n        this.markAsDirty();\r\n    }\r\n    /**\r\n     * Gets or sets the ideal width used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\r\n     */\r\n    public get idealWidth(): number {\r\n        return this._idealWidth;\r\n    }\r\n    public set idealWidth(value: number) {\r\n        if (this._idealWidth === value) {\r\n            return;\r\n        }\r\n        this._idealWidth = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n    /**\r\n     * Gets or sets the ideal height used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\r\n     */\r\n    public get idealHeight(): number {\r\n        return this._idealHeight;\r\n    }\r\n    public set idealHeight(value: number) {\r\n        if (this._idealHeight === value) {\r\n            return;\r\n        }\r\n        this._idealHeight = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n    /**\r\n     * Gets or sets a boolean indicating if the smallest ideal value must be used if idealWidth and idealHeight are both set\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\r\n     */\r\n    public get useSmallestIdeal(): boolean {\r\n        return this._useSmallestIdeal;\r\n    }\r\n    public set useSmallestIdeal(value: boolean) {\r\n        if (this._useSmallestIdeal === value) {\r\n            return;\r\n        }\r\n        this._useSmallestIdeal = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n    /**\r\n     * Gets or sets a boolean indicating if adaptive scaling must be used\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\r\n     */\r\n    public get renderAtIdealSize(): boolean {\r\n        return this._renderAtIdealSize;\r\n    }\r\n    public set renderAtIdealSize(value: boolean) {\r\n        if (this._renderAtIdealSize === value) {\r\n            return;\r\n        }\r\n        this._renderAtIdealSize = value;\r\n        this._onResize();\r\n    }\r\n\r\n    /**\r\n     * Gets the ratio used when in \"ideal mode\"\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\r\n     * */\r\n    public get idealRatio(): number {\r\n        let rwidth: number = 0;\r\n        let rheight: number = 0;\r\n\r\n        if (this._idealWidth) {\r\n            rwidth = this.getSize().width / this._idealWidth;\r\n        }\r\n\r\n        if (this._idealHeight) {\r\n            rheight = this.getSize().height / this._idealHeight;\r\n        }\r\n\r\n        if (this._useSmallestIdeal && this._idealWidth && this._idealHeight) {\r\n            return window.innerWidth < window.innerHeight ? rwidth : rheight;\r\n        }\r\n\r\n        if (this._idealWidth) {\r\n            // horizontal\r\n            return rwidth;\r\n        }\r\n\r\n        if (this._idealHeight) {\r\n            // vertical\r\n            return rheight;\r\n        }\r\n\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * Gets the underlying layer used to render the texture when in fullscreen mode\r\n     */\r\n    public get layer(): Nullable<Layer> {\r\n        return this._layerToDispose;\r\n    }\r\n    /**\r\n     * Gets the root container control\r\n     */\r\n    public get rootContainer(): Container {\r\n        return this._rootContainer;\r\n    }\r\n    /**\r\n     * Returns an array containing the root container.\r\n     * This is mostly used to let the Inspector introspects the ADT\r\n     * @returns an array containing the rootContainer\r\n     */\r\n    public getChildren(): Array<Container> {\r\n        return [this._rootContainer];\r\n    }\r\n    /**\r\n     * Will return all controls that are inside this texture\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @returns all child controls\r\n     */\r\n    public getDescendants(directDescendantsOnly?: boolean, predicate?: (control: Control) => boolean): Control[] {\r\n        return this._rootContainer.getDescendants(directDescendantsOnly, predicate);\r\n    }\r\n\r\n    /**\r\n     * Will return all controls with the given type name\r\n     * @param typeName defines the type name to search for\r\n     * @returns an array of all controls found\r\n     */\r\n    public getControlsByType(typeName: string): Control[] {\r\n        return this._rootContainer.getDescendants(false, (control) => control.typeName === typeName);\r\n    }\r\n\r\n    /**\r\n     * Will return the first control with the given name\r\n     * @param name defines the name to search for\r\n     * @returns the first control found or null\r\n     */\r\n    public getControlByName(name: string): Nullable<Control> {\r\n        return this._getControlByKey(\"name\", name);\r\n    }\r\n\r\n    private _getControlByKey(key: string, value: any): Nullable<Control> {\r\n        return this._rootContainer.getDescendants().find((control) => control[key as keyof Control] === value) || null;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current focused control\r\n     */\r\n    public get focusedControl(): Nullable<IFocusableControl> {\r\n        return this._focusedControl;\r\n    }\r\n    public set focusedControl(control: Nullable<IFocusableControl>) {\r\n        if (this._focusedControl == control) {\r\n            return;\r\n        }\r\n        if (this._focusedControl) {\r\n            this._focusedControl.onBlur();\r\n        }\r\n        if (control) {\r\n            control.onFocus();\r\n        }\r\n        this._focusedControl = control;\r\n    }\r\n    /**\r\n     * Gets or sets a boolean indicating if the texture must be rendered in background or foreground when in fullscreen mode\r\n     */\r\n    public get isForeground(): boolean {\r\n        if (!this.layer) {\r\n            return true;\r\n        }\r\n        return !this.layer.isBackground;\r\n    }\r\n    public set isForeground(value: boolean) {\r\n        if (!this.layer) {\r\n            return;\r\n        }\r\n        if (this.layer.isBackground === !value) {\r\n            return;\r\n        }\r\n        this.layer.isBackground = !value;\r\n    }\r\n    /**\r\n     * Gets or set information about clipboardData\r\n     */\r\n    public get clipboardData(): string {\r\n        return this._clipboardData;\r\n    }\r\n    public set clipboardData(value: string) {\r\n        this._clipboardData = value;\r\n    }\r\n\r\n    /**\r\n     * If set to true, every scene render will trigger a pointer event for the GUI\r\n     * if it is linked to a mesh or has controls linked to a mesh. This will allow\r\n     * you to catch the pointer moving around the GUI due to camera or mesh movements,\r\n     * but it has a performance cost.\r\n     */\r\n    public checkPointerEveryFrame = false;\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture\r\n     * @param name defines the name of the texture\r\n     * @param width defines the width of the texture\r\n     * @param height defines the height of the texture\r\n     * @param scene defines the hosting scene\r\n     * @param generateMipMaps defines a boolean indicating if mipmaps must be generated (false by default)\r\n     * @param samplingMode defines the texture sampling mode (Texture.NEAREST_SAMPLINGMODE by default)\r\n     * @param invertY defines if the texture needs to be inverted on the y axis during loading (true by default)\r\n     */\r\n    constructor(name: string, width = 0, height = 0, scene?: Nullable<Scene>, generateMipMaps = false, samplingMode = Texture.NEAREST_SAMPLINGMODE, invertY = true) {\r\n        super(name, { width: width, height: height }, scene, generateMipMaps, samplingMode, Constants.TEXTUREFORMAT_RGBA, invertY);\r\n        scene = this.getScene();\r\n        if (!scene || !this._texture) {\r\n            return;\r\n        }\r\n        this.applyYInversionOnUpdate = invertY;\r\n        this._rootElement = scene.getEngine().getInputElement();\r\n        this._renderObserver = scene.onBeforeCameraRenderObservable.add((camera: Camera) => this._checkUpdate(camera));\r\n\r\n        /** Whenever a control is added or removed to the root, we have to recheck the camera projection as it can have changed  */\r\n        this._controlAddedObserver = this._rootContainer.onControlAddedObservable.add((control) => {\r\n            if (control) {\r\n                this._rootChildrenHaveChanged = true;\r\n            }\r\n        });\r\n        this._controlRemovedObserver = this._rootContainer.onControlRemovedObservable.add((control) => {\r\n            if (control) {\r\n                this._rootChildrenHaveChanged = true;\r\n            }\r\n        });\r\n        this._preKeyboardObserver = scene.onPreKeyboardObservable.add((info) => {\r\n            if (!this._focusedControl) {\r\n                return;\r\n            }\r\n            if (info.type === KeyboardEventTypes.KEYDOWN) {\r\n                this._focusedControl.processKeyboard(info.event);\r\n            }\r\n            info.skipOnPointerObservable = true;\r\n        });\r\n        this._rootContainer._link(this);\r\n        this.hasAlpha = true;\r\n        if (!width || !height) {\r\n            this._resizeObserver = scene.getEngine().onResizeObservable.add(() => this._onResize());\r\n            this._onResize();\r\n        }\r\n        this._texture.isReady = true;\r\n    }\r\n    /**\r\n     * Get the current class name of the texture useful for serialization or dynamic coding.\r\n     * @returns \"AdvancedDynamicTexture\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"AdvancedDynamicTexture\";\r\n    }\r\n    /**\r\n     * Function used to execute a function on all controls\r\n     * @param func defines the function to execute\r\n     * @param container defines the container where controls belong. If null the root container will be used\r\n     */\r\n    public executeOnAllControls(func: (control: Control) => void, container?: Container) {\r\n        if (!container) {\r\n            container = this._rootContainer;\r\n        }\r\n        func(container);\r\n        for (const child of container.children) {\r\n            if ((<any>child).children) {\r\n                this.executeOnAllControls(func, <Container>child);\r\n                continue;\r\n            }\r\n            func(child);\r\n        }\r\n    }\r\n\r\n    private _useInvalidateRectOptimization = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the InvalidateRect optimization should be turned on\r\n     */\r\n    public get useInvalidateRectOptimization(): boolean {\r\n        return this._useInvalidateRectOptimization;\r\n    }\r\n\r\n    public set useInvalidateRectOptimization(value: boolean) {\r\n        this._useInvalidateRectOptimization = value;\r\n    }\r\n\r\n    // Invalidated rectangle which is the combination of all invalidated controls after they have been rotated into absolute position\r\n    private _invalidatedRectangle: Nullable<Measure> = null;\r\n    /**\r\n     * Invalidates a rectangle area on the gui texture\r\n     * @param invalidMinX left most position of the rectangle to invalidate in the texture\r\n     * @param invalidMinY top most position of the rectangle to invalidate in the texture\r\n     * @param invalidMaxX right most position of the rectangle to invalidate in the texture\r\n     * @param invalidMaxY bottom most position of the rectangle to invalidate in the texture\r\n     */\r\n    public invalidateRect(invalidMinX: number, invalidMinY: number, invalidMaxX: number, invalidMaxY: number) {\r\n        if (!this._useInvalidateRectOptimization) {\r\n            return;\r\n        }\r\n        if (!this._invalidatedRectangle) {\r\n            this._invalidatedRectangle = new Measure(invalidMinX, invalidMinY, invalidMaxX - invalidMinX + 1, invalidMaxY - invalidMinY + 1);\r\n        } else {\r\n            // Compute intersection\r\n            const maxX = Math.ceil(Math.max(this._invalidatedRectangle.left + this._invalidatedRectangle.width - 1, invalidMaxX));\r\n            const maxY = Math.ceil(Math.max(this._invalidatedRectangle.top + this._invalidatedRectangle.height - 1, invalidMaxY));\r\n            this._invalidatedRectangle.left = Math.floor(Math.min(this._invalidatedRectangle.left, invalidMinX));\r\n            this._invalidatedRectangle.top = Math.floor(Math.min(this._invalidatedRectangle.top, invalidMinY));\r\n            this._invalidatedRectangle.width = maxX - this._invalidatedRectangle.left + 1;\r\n            this._invalidatedRectangle.height = maxY - this._invalidatedRectangle.top + 1;\r\n        }\r\n    }\r\n    /**\r\n     * Marks the texture as dirty forcing a complete update\r\n     */\r\n    public markAsDirty() {\r\n        this._isDirty = true;\r\n    }\r\n    /**\r\n     * Helper function used to create a new style\r\n     * @returns a new style\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#styles\r\n     */\r\n    public createStyle(): Style {\r\n        return new Style(this);\r\n    }\r\n    /**\r\n     * Adds a new control to the root container\r\n     * @param control defines the control to add\r\n     * @returns the current texture\r\n     */\r\n    public addControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.addControl(control);\r\n        return this;\r\n    }\r\n    /**\r\n     * Removes a control from the root container\r\n     * @param control defines the control to remove\r\n     * @returns the current texture\r\n     */\r\n    public removeControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n    /**\r\n     * Moves overlapped controls towards a position where it is not overlapping anymore.\r\n     * Please note that this method alters linkOffsetXInPixels and linkOffsetYInPixels.\r\n     * @param overlapGroup the overlap group which will be processed or undefined to process all overlap groups\r\n     * @param deltaStep the step size (speed) to reach the target non overlapping position (default 0.1)\r\n     * @param repelFactor how much is the control repelled by other controls\r\n     */\r\n    public moveToNonOverlappedPosition(overlapGroup?: number | Control[], deltaStep = 1, repelFactor = 1) {\r\n        let controlsForGroup: Control[];\r\n        if (Array.isArray(overlapGroup)) {\r\n            controlsForGroup = overlapGroup;\r\n        } else {\r\n            const descendants = this.getDescendants(true);\r\n            // get only the controls with an overlapGroup property set\r\n            // if the overlapGroup parameter is set, filter the controls and get only the controls belonging to that overlapGroup\r\n            controlsForGroup = overlapGroup === undefined ? descendants.filter((c) => c.overlapGroup !== undefined) : descendants.filter((c) => c.overlapGroup === overlapGroup);\r\n        }\r\n\r\n        controlsForGroup.forEach((control1) => {\r\n            let velocity = Vector2.Zero();\r\n            const center = new Vector2(control1.centerX, control1.centerY);\r\n\r\n            controlsForGroup.forEach((control2) => {\r\n                if (control1 !== control2 && AdvancedDynamicTexture._Overlaps(control1, control2)) {\r\n                    // if the two controls overlaps get a direction vector from one control's center to another control's center\r\n                    const diff = center.subtract(new Vector2(control2.centerX, control2.centerY));\r\n                    const diffLength = diff.length();\r\n\r\n                    if (diffLength > 0) {\r\n                        // calculate the velocity\r\n                        velocity = velocity.add(diff.normalize().scale(repelFactor / diffLength));\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (velocity.length() > 0) {\r\n                // move the control along the direction vector away from the overlapping control\r\n                velocity = velocity.normalize().scale(deltaStep * (control1.overlapDeltaMultiplier ?? 1));\r\n                control1.linkOffsetXInPixels += velocity.x;\r\n                control1.linkOffsetYInPixels += velocity.y;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        const scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this._rootElement = null;\r\n        scene.onBeforeCameraRenderObservable.remove(this._renderObserver);\r\n        if (this._resizeObserver) {\r\n            scene.getEngine().onResizeObservable.remove(this._resizeObserver);\r\n        }\r\n        if (this._prePointerObserver) {\r\n            scene.onPrePointerObservable.remove(this._prePointerObserver);\r\n        }\r\n        if (this._sceneRenderObserver) {\r\n            scene.onBeforeRenderObservable.remove(this._sceneRenderObserver);\r\n        }\r\n        if (this._pointerObserver) {\r\n            scene.onPointerObservable.remove(this._pointerObserver);\r\n        }\r\n        if (this._preKeyboardObserver) {\r\n            scene.onPreKeyboardObservable.remove(this._preKeyboardObserver);\r\n        }\r\n        if (this._canvasPointerOutObserver) {\r\n            scene.getEngine().onCanvasPointerOutObservable.remove(this._canvasPointerOutObserver);\r\n        }\r\n        if (this._canvasBlurObserver) {\r\n            scene.getEngine().onCanvasBlurObservable.remove(this._canvasBlurObserver);\r\n        }\r\n        if (this._controlAddedObserver) {\r\n            this._rootContainer.onControlAddedObservable.remove(this._controlAddedObserver);\r\n        }\r\n        if (this._controlRemovedObserver) {\r\n            this._rootContainer.onControlRemovedObservable.remove(this._controlRemovedObserver);\r\n        }\r\n        if (this._layerToDispose) {\r\n            this._layerToDispose.texture = null;\r\n            this._layerToDispose.dispose();\r\n            this._layerToDispose = null;\r\n        }\r\n        this._rootContainer.dispose();\r\n        this.onClipboardObservable.clear();\r\n        this.onControlPickedObservable.clear();\r\n        this.onBeginRenderObservable.clear();\r\n        this.onEndRenderObservable.clear();\r\n        this.onBeginLayoutObservable.clear();\r\n        this.onEndLayoutObservable.clear();\r\n        this.onGuiReadyObservable.clear();\r\n        super.dispose();\r\n    }\r\n    private _onResize(): void {\r\n        const scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        // Check size\r\n        const engine = scene.getEngine();\r\n        const textureSize = this.getSize();\r\n        let renderWidth = engine.getRenderWidth() * this._renderScale;\r\n        let renderHeight = engine.getRenderHeight() * this._renderScale;\r\n\r\n        if (this._renderAtIdealSize) {\r\n            if (this._idealWidth) {\r\n                renderHeight = (renderHeight * this._idealWidth) / renderWidth;\r\n                renderWidth = this._idealWidth;\r\n            } else if (this._idealHeight) {\r\n                renderWidth = (renderWidth * this._idealHeight) / renderHeight;\r\n                renderHeight = this._idealHeight;\r\n            }\r\n        }\r\n        if (textureSize.width !== renderWidth || textureSize.height !== renderHeight) {\r\n            this.scaleTo(renderWidth, renderHeight);\r\n            this.markAsDirty();\r\n            if (this._idealWidth || this._idealHeight) {\r\n                this._rootContainer._markAllAsDirty();\r\n            }\r\n        }\r\n        this.invalidateRect(0, 0, textureSize.width - 1, textureSize.height - 1);\r\n    }\r\n    /** @internal */\r\n    public _getGlobalViewport(): Viewport {\r\n        const size = this.getSize();\r\n        const globalViewPort = this._fullscreenViewport.toGlobal(size.width, size.height);\r\n\r\n        const targetX = Math.round(globalViewPort.width * (1 / this.rootContainer.scaleX));\r\n        const targetY = Math.round(globalViewPort.height * (1 / this.rootContainer.scaleY));\r\n\r\n        globalViewPort.x += (globalViewPort.width - targetX) / 2;\r\n        globalViewPort.y += (globalViewPort.height - targetY) / 2;\r\n\r\n        globalViewPort.width = targetX;\r\n        globalViewPort.height = targetY;\r\n\r\n        return globalViewPort;\r\n    }\r\n    /**\r\n     * Get screen coordinates for a vector3\r\n     * @param position defines the position to project\r\n     * @param worldMatrix defines the world matrix to use\r\n     * @returns the projected position\r\n     */\r\n    public getProjectedPosition(position: Vector3, worldMatrix: Matrix): Vector2 {\r\n        const result = this.getProjectedPositionWithZ(position, worldMatrix);\r\n        return new Vector2(result.x, result.y);\r\n    }\r\n\r\n    /**\r\n     * Get screen coordinates for a vector3\r\n     * @param position defines the position to project\r\n     * @param worldMatrix defines the world matrix to use\r\n     * @returns the projected position with Z\r\n     */\r\n    public getProjectedPositionWithZ(position: Vector3, worldMatrix: Matrix): Vector3 {\r\n        const scene = this.getScene();\r\n        if (!scene) {\r\n            return Vector3.Zero();\r\n        }\r\n        const globalViewport = this._getGlobalViewport();\r\n        const projectedPosition = Vector3.Project(position, worldMatrix, scene.getTransformMatrix(), globalViewport);\r\n        return new Vector3(projectedPosition.x, projectedPosition.y, projectedPosition.z);\r\n    }\r\n\r\n    private _checkUpdate(camera: Camera, skipUpdate?: boolean): void {\r\n        if (this._layerToDispose) {\r\n            if ((camera.layerMask & this._layerToDispose.layerMask) === 0) {\r\n                return;\r\n            }\r\n        }\r\n        if (this._isFullscreen && this._linkedControls.length) {\r\n            const scene = this.getScene();\r\n            if (!scene) {\r\n                return;\r\n            }\r\n            const globalViewport = this._getGlobalViewport();\r\n            for (const control of this._linkedControls) {\r\n                if (!control.isVisible) {\r\n                    continue;\r\n                }\r\n                const mesh = control._linkedMesh as AbstractMesh;\r\n                if (!mesh || mesh.isDisposed()) {\r\n                    Tools.SetImmediate(() => {\r\n                        control.linkWithMesh(null);\r\n                    });\r\n                    continue;\r\n                }\r\n                const position = mesh.getBoundingInfo ? mesh.getBoundingInfo().boundingSphere.center : (Vector3.ZeroReadOnly as Vector3);\r\n                const projectedPosition = Vector3.Project(position, mesh.getWorldMatrix(), scene.getTransformMatrix(), globalViewport);\r\n                if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n                    control.notRenderable = true;\r\n                    continue;\r\n                }\r\n                control.notRenderable = false;\r\n                if (this.useInvalidateRectOptimization) {\r\n                    control.invalidateRect();\r\n                }\r\n\r\n                control._moveToProjectedPosition(projectedPosition);\r\n            }\r\n        }\r\n        if (!this._isDirty && !this._rootContainer.isDirty) {\r\n            return;\r\n        }\r\n        this._isDirty = false;\r\n        this._render(skipUpdate);\r\n        if (!skipUpdate) {\r\n            this.update(this.applyYInversionOnUpdate, this.premulAlpha, AdvancedDynamicTexture.AllowGPUOptimizations);\r\n        }\r\n    }\r\n\r\n    private _clearMeasure = new Measure(0, 0, 0, 0);\r\n\r\n    private _render(skipRender?: boolean): void {\r\n        const textureSize = this.getSize();\r\n        const renderWidth = textureSize.width;\r\n        const renderHeight = textureSize.height;\r\n\r\n        const context = this.getContext();\r\n        context.font = \"18px Arial\";\r\n        context.strokeStyle = \"white\";\r\n\r\n        if (this.onGuiReadyObservable.hasObservers()) {\r\n            this._checkGuiIsReady();\r\n        }\r\n\r\n        /** We have to recheck the camera projection in the case the root control's children have changed  */\r\n        if (this._rootChildrenHaveChanged) {\r\n            const camera = this.getScene()?.activeCamera;\r\n            if (camera) {\r\n                this._rootChildrenHaveChanged = false;\r\n                this._checkUpdate(camera, true);\r\n            }\r\n        }\r\n\r\n        // Layout\r\n        this.onBeginLayoutObservable.notifyObservers(this);\r\n        const measure = new Measure(0, 0, renderWidth, renderHeight);\r\n        this._numLayoutCalls = 0;\r\n        this._rootContainer._layout(measure, context);\r\n        this.onEndLayoutObservable.notifyObservers(this);\r\n        this._isDirty = false; // Restoring the dirty state that could have been set by controls during layout processing\r\n\r\n        if (skipRender) {\r\n            return;\r\n        }\r\n\r\n        // Clear\r\n        if (this._invalidatedRectangle) {\r\n            this._clearMeasure.copyFrom(this._invalidatedRectangle);\r\n        } else {\r\n            this._clearMeasure.copyFromFloats(0, 0, renderWidth, renderHeight);\r\n        }\r\n        context.clearRect(this._clearMeasure.left, this._clearMeasure.top, this._clearMeasure.width, this._clearMeasure.height);\r\n        if (this._background) {\r\n            context.save();\r\n            context.fillStyle = this._background;\r\n            context.fillRect(this._clearMeasure.left, this._clearMeasure.top, this._clearMeasure.width, this._clearMeasure.height);\r\n            context.restore();\r\n        }\r\n\r\n        // Render\r\n        this.onBeginRenderObservable.notifyObservers(this);\r\n        this._numRenderCalls = 0;\r\n        this._rootContainer._render(context, this._invalidatedRectangle);\r\n        this.onEndRenderObservable.notifyObservers(this);\r\n        this._invalidatedRectangle = null;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public _changeCursor(cursor: string) {\r\n        if (this._rootElement) {\r\n            this._rootElement.style.cursor = cursor;\r\n            this._cursorChanged = true;\r\n        }\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public _registerLastControlDown(control: Control, pointerId: number) {\r\n        this._lastControlDown[pointerId] = control;\r\n        this.onControlPickedObservable.notifyObservers(control);\r\n    }\r\n    private _doPicking(x: number, y: number, pi: Nullable<PointerInfoBase>, type: number, pointerId: number, buttonIndex: number, deltaX?: number, deltaY?: number): void {\r\n        const scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        const engine = scene.getEngine();\r\n        const textureSize = this.getSize();\r\n        if (this._isFullscreen) {\r\n            const camera = scene.cameraToUseForPointers || scene.activeCamera;\r\n            if (!camera) {\r\n                return;\r\n            }\r\n            const viewport = camera.viewport;\r\n            x = x * (textureSize.width / (engine.getRenderWidth() * viewport.width));\r\n            y = y * (textureSize.height / (engine.getRenderHeight() * viewport.height));\r\n        }\r\n        if (this._capturingControl[pointerId]) {\r\n            if (this._capturingControl[pointerId].isPointerBlocker) {\r\n                this._shouldBlockPointer = true;\r\n            }\r\n            this._capturingControl[pointerId]._processObservables(type, x, y, pi, pointerId, buttonIndex);\r\n            return;\r\n        }\r\n\r\n        this._cursorChanged = false;\r\n        if (!this._rootContainer._processPicking(x, y, pi, type, pointerId, buttonIndex, deltaX, deltaY)) {\r\n            if (!scene.doNotHandleCursors) {\r\n                this._changeCursor(\"\");\r\n            }\r\n            if (type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId], pi);\r\n                    delete this._lastControlOver[pointerId];\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!this._cursorChanged && !scene.doNotHandleCursors) {\r\n            this._changeCursor(\"\");\r\n        }\r\n        this._manageFocus();\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public _cleanControlAfterRemovalFromList(list: { [pointerId: number]: Control }, control: Control) {\r\n        for (const pointerId in list) {\r\n            if (!Object.prototype.hasOwnProperty.call(list, pointerId)) {\r\n                continue;\r\n            }\r\n            const lastControlOver = list[pointerId];\r\n            if (lastControlOver === control) {\r\n                delete list[pointerId];\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public _cleanControlAfterRemoval(control: Control) {\r\n        this._cleanControlAfterRemovalFromList(this._lastControlDown, control);\r\n        this._cleanControlAfterRemovalFromList(this._lastControlOver, control);\r\n    }\r\n\r\n    /**\r\n     * This function will run a pointer event on this ADT and will trigger any pointer events on any controls\r\n     * This will work on a fullscreen ADT only. For mesh based ADT, simulate pointer events using the scene directly.\r\n     * @param x pointer X on the canvas for the picking\r\n     * @param y pointer Y on the canvas for the picking\r\n     * @param pi optional pointer information\r\n     */\r\n    public pick(x: number, y: number, pi: Nullable<PointerInfoPre> = null) {\r\n        if (this._isFullscreen && this._scene) {\r\n            this._translateToPicking(this._scene, new Viewport(0, 0, 0, 0), pi, x, y);\r\n        }\r\n    }\r\n\r\n    private _translateToPicking(scene: Scene, tempViewport: Viewport, pi: Nullable<PointerInfoPre>, x: number = scene.pointerX, y: number = scene.pointerY) {\r\n        const camera = scene.cameraToUseForPointers || scene.activeCamera;\r\n        const engine = scene.getEngine();\r\n        const originalCameraToUseForPointers = scene.cameraToUseForPointers;\r\n\r\n        if (!camera) {\r\n            tempViewport.x = 0;\r\n            tempViewport.y = 0;\r\n            tempViewport.width = engine.getRenderWidth();\r\n            tempViewport.height = engine.getRenderHeight();\r\n        } else {\r\n            if (camera.rigCameras.length) {\r\n                // rig camera - we need to find the camera to use for this event\r\n                const rigViewport = new Viewport(0, 0, 1, 1);\r\n                camera.rigCameras.forEach((rigCamera) => {\r\n                    // generate the viewport of this camera\r\n                    rigCamera.viewport.toGlobalToRef(engine.getRenderWidth(), engine.getRenderHeight(), rigViewport);\r\n                    const transformedX = x / engine.getHardwareScalingLevel() - rigViewport.x;\r\n                    const transformedY = y / engine.getHardwareScalingLevel() - (engine.getRenderHeight() - rigViewport.y - rigViewport.height);\r\n                    // check if the pointer is in the camera's viewport\r\n                    if (transformedX < 0 || transformedY < 0 || x > rigViewport.width || y > rigViewport.height) {\r\n                        // out of viewport - don't use this camera\r\n                        return;\r\n                    }\r\n                    // set the camera to use for pointers until this pointer loop is over\r\n                    scene.cameraToUseForPointers = rigCamera;\r\n                    // set the viewport\r\n                    tempViewport.x = rigViewport.x;\r\n                    tempViewport.y = rigViewport.y;\r\n                    tempViewport.width = rigViewport.width;\r\n                    tempViewport.height = rigViewport.height;\r\n                });\r\n            } else {\r\n                camera.viewport.toGlobalToRef(engine.getRenderWidth(), engine.getRenderHeight(), tempViewport);\r\n            }\r\n        }\r\n\r\n        const transformedX = x / engine.getHardwareScalingLevel() - tempViewport.x;\r\n        const transformedY = y / engine.getHardwareScalingLevel() - (engine.getRenderHeight() - tempViewport.y - tempViewport.height);\r\n        this._shouldBlockPointer = false;\r\n        // Do picking modifies _shouldBlockPointer\r\n        if (pi) {\r\n            const pointerId = (pi.event as IPointerEvent).pointerId || this._defaultMousePointerId;\r\n            this._doPicking(transformedX, transformedY, pi, pi.type, pointerId, pi.event.button, (<IWheelEvent>pi.event).deltaX, (<IWheelEvent>pi.event).deltaY);\r\n            // Avoid overwriting a true skipOnPointerObservable to false\r\n            if (this._shouldBlockPointer || this._capturingControl[pointerId]) {\r\n                pi.skipOnPointerObservable = true;\r\n            }\r\n        } else {\r\n            this._doPicking(transformedX, transformedY, null, PointerEventTypes.POINTERMOVE, this._defaultMousePointerId, 0);\r\n        }\r\n        // if overridden by a rig camera - reset back to the original value\r\n        scene.cameraToUseForPointers = originalCameraToUseForPointers;\r\n    }\r\n\r\n    /** Attach to all scene events required to support pointer events */\r\n    public attach(): void {\r\n        const scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        const tempViewport = new Viewport(0, 0, 0, 0);\r\n\r\n        this._prePointerObserver = scene.onPrePointerObservable.add((pi) => {\r\n            if (\r\n                scene.isPointerCaptured((<IPointerEvent>pi.event).pointerId) &&\r\n                pi.type === PointerEventTypes.POINTERUP &&\r\n                !this._capturedPointerIds.has((pi.event as IPointerEvent).pointerId)\r\n            ) {\r\n                return;\r\n            }\r\n            if (\r\n                pi.type !== PointerEventTypes.POINTERMOVE &&\r\n                pi.type !== PointerEventTypes.POINTERUP &&\r\n                pi.type !== PointerEventTypes.POINTERDOWN &&\r\n                pi.type !== PointerEventTypes.POINTERWHEEL\r\n            ) {\r\n                return;\r\n            }\r\n\r\n            if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                // Avoid pointerMove events firing while the pointer is captured by the scene\r\n                if (scene.isPointerCaptured((<IPointerEvent>pi.event).pointerId)) {\r\n                    return;\r\n                }\r\n                if ((pi.event as IPointerEvent).pointerId) {\r\n                    this._defaultMousePointerId = (pi.event as IPointerEvent).pointerId; // This is required to make sure we have the correct pointer ID for wheel\r\n                }\r\n            }\r\n            this._translateToPicking(scene, tempViewport, pi);\r\n        });\r\n        this._attachPickingToSceneRender(scene, () => this._translateToPicking(scene, tempViewport, null), false);\r\n        this._attachToOnPointerOut(scene);\r\n        this._attachToOnBlur(scene);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _onClipboardCopy = (rawEvt: Event) => {\r\n        const evt = rawEvt as ClipboardEvent;\r\n        const ev = new ClipboardInfo(ClipboardEventTypes.COPY, evt);\r\n        this.onClipboardObservable.notifyObservers(ev);\r\n        evt.preventDefault();\r\n    };\r\n    /**\r\n     * @internal\r\n     */\r\n    private _onClipboardCut = (rawEvt: Event) => {\r\n        const evt = rawEvt as ClipboardEvent;\r\n        const ev = new ClipboardInfo(ClipboardEventTypes.CUT, evt);\r\n        this.onClipboardObservable.notifyObservers(ev);\r\n        evt.preventDefault();\r\n    };\r\n    /**\r\n     * @internal\r\n     */\r\n    private _onClipboardPaste = (rawEvt: Event) => {\r\n        const evt = rawEvt as ClipboardEvent;\r\n        const ev = new ClipboardInfo(ClipboardEventTypes.PASTE, evt);\r\n        this.onClipboardObservable.notifyObservers(ev);\r\n        evt.preventDefault();\r\n    };\r\n    /**\r\n     * Register the clipboard Events onto the canvas\r\n     */\r\n    public registerClipboardEvents(): void {\r\n        self.addEventListener(\"copy\", this._onClipboardCopy, false);\r\n        self.addEventListener(\"cut\", this._onClipboardCut, false);\r\n        self.addEventListener(\"paste\", this._onClipboardPaste, false);\r\n    }\r\n    /**\r\n     * Unregister the clipboard Events from the canvas\r\n     */\r\n    public unRegisterClipboardEvents(): void {\r\n        self.removeEventListener(\"copy\", this._onClipboardCopy);\r\n        self.removeEventListener(\"cut\", this._onClipboardCut);\r\n        self.removeEventListener(\"paste\", this._onClipboardPaste);\r\n    }\r\n\r\n    /**\r\n     * Transform uvs from mesh space to texture space, taking the texture into account\r\n     * @param uv the uvs in mesh space\r\n     * @returns the uvs in texture space\r\n     */\r\n    private _transformUvs(uv: Vector2): Vector2 {\r\n        const textureMatrix = this.getTextureMatrix();\r\n        let result;\r\n        if (textureMatrix.isIdentityAs3x2()) {\r\n            result = uv;\r\n        } else {\r\n            const homogeneousTextureMatrix = TmpVectors.Matrix[0];\r\n\r\n            textureMatrix.getRowToRef(0, TmpVectors.Vector4[0]);\r\n            textureMatrix.getRowToRef(1, TmpVectors.Vector4[1]);\r\n            textureMatrix.getRowToRef(2, TmpVectors.Vector4[2]);\r\n\r\n            const r0 = TmpVectors.Vector4[0];\r\n            const r1 = TmpVectors.Vector4[1];\r\n            const r2 = TmpVectors.Vector4[2];\r\n\r\n            homogeneousTextureMatrix.setRowFromFloats(0, r0.x, r0.y, 0, 0);\r\n            homogeneousTextureMatrix.setRowFromFloats(1, r1.x, r1.y, 0, 0);\r\n            homogeneousTextureMatrix.setRowFromFloats(2, 0, 0, 1, 0);\r\n            homogeneousTextureMatrix.setRowFromFloats(3, r2.x, r2.y, 0, 1);\r\n\r\n            result = TmpVectors.Vector2[0];\r\n            Vector2.TransformToRef(uv, homogeneousTextureMatrix, result);\r\n        }\r\n\r\n        // In wrap and mirror mode, the texture coordinate for coordinates more than 1 is the fractional part of the coordinate\r\n        if (this.wrapU === Texture.WRAP_ADDRESSMODE || this.wrapU === Texture.MIRROR_ADDRESSMODE) {\r\n            if (result.x > 1) {\r\n                let fX = result.x - Math.trunc(result.x);\r\n                // In mirror mode, the sign of the texture coordinate depends on the integer part -\r\n                // odd integers means it is mirrored from the original coordinate\r\n                if (this.wrapU === Texture.MIRROR_ADDRESSMODE && Math.trunc(result.x) % 2 === 1) {\r\n                    fX = 1 - fX;\r\n                }\r\n                result.x = fX;\r\n            }\r\n        }\r\n        if (this.wrapV === Texture.WRAP_ADDRESSMODE || this.wrapV === Texture.MIRROR_ADDRESSMODE) {\r\n            if (result.y > 1) {\r\n                let fY = result.y - Math.trunc(result.y);\r\n                if (this.wrapV === Texture.MIRROR_ADDRESSMODE && Math.trunc(result.x) % 2 === 1) {\r\n                    fY = 1 - fY;\r\n                }\r\n                result.y = fY;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * Connect the texture to a hosting mesh to enable interactions\r\n     * @param mesh defines the mesh to attach to\r\n     * @param supportPointerMove defines a boolean indicating if pointer move events must be catched as well\r\n     */\r\n    public attachToMesh(mesh: AbstractMesh, supportPointerMove = true): void {\r\n        const scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        if (this._pointerObserver) {\r\n            scene.onPointerObservable.remove(this._pointerObserver);\r\n        }\r\n\r\n        this._pointerObserver = scene.onPointerObservable.add((pi) => {\r\n            if (\r\n                pi.type !== PointerEventTypes.POINTERMOVE &&\r\n                pi.type !== PointerEventTypes.POINTERUP &&\r\n                pi.type !== PointerEventTypes.POINTERDOWN &&\r\n                pi.type !== PointerEventTypes.POINTERWHEEL\r\n            ) {\r\n                return;\r\n            }\r\n\r\n            if (pi.type === PointerEventTypes.POINTERMOVE && (pi.event as IPointerEvent).pointerId) {\r\n                this._defaultMousePointerId = (pi.event as IPointerEvent).pointerId; // This is required to make sure we have the correct pointer ID for wheel\r\n            }\r\n\r\n            const pointerId = (pi.event as IPointerEvent).pointerId || this._defaultMousePointerId;\r\n            if (pi.pickInfo && pi.pickInfo.hit && pi.pickInfo.pickedMesh === mesh) {\r\n                let uv = pi.pickInfo.getTextureCoordinates();\r\n                if (uv) {\r\n                    uv = this._transformUvs(uv);\r\n                    const size = this.getSize();\r\n                    this._doPicking(\r\n                        uv.x * size.width,\r\n                        (this.applyYInversionOnUpdate ? 1.0 - uv.y : uv.y) * size.height,\r\n                        pi,\r\n                        pi.type,\r\n                        pointerId,\r\n                        pi.event.button,\r\n                        (<IWheelEvent>pi.event).deltaX,\r\n                        (<IWheelEvent>pi.event).deltaY\r\n                    );\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERUP) {\r\n                if (this._lastControlDown[pointerId]) {\r\n                    this._lastControlDown[pointerId]._forcePointerUp(pointerId);\r\n                }\r\n                delete this._lastControlDown[pointerId];\r\n                if (this.focusedControl) {\r\n                    const friendlyControls = this.focusedControl.keepsFocusWith();\r\n                    let canMoveFocus = true;\r\n                    if (friendlyControls) {\r\n                        for (const control of friendlyControls) {\r\n                            // Same host, no need to keep the focus\r\n                            if (this === control._host) {\r\n                                continue;\r\n                            }\r\n                            // Different hosts\r\n                            const otherHost = control._host;\r\n                            if (otherHost._lastControlOver[pointerId] && otherHost._lastControlOver[pointerId].isAscendant(control)) {\r\n                                canMoveFocus = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (canMoveFocus) {\r\n                        this.focusedControl = null;\r\n                    }\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId], pi, true);\r\n                }\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        });\r\n        mesh.enablePointerMoveEvents = supportPointerMove;\r\n        this._attachPickingToSceneRender(\r\n            scene,\r\n            () => {\r\n                const pointerId = this._defaultMousePointerId;\r\n                const pick = scene?.pick(scene.pointerX, scene.pointerY);\r\n                if (pick && pick.hit && pick.pickedMesh === mesh) {\r\n                    let uv = pick.getTextureCoordinates();\r\n                    if (uv) {\r\n                        uv = this._transformUvs(uv);\r\n                        const size = this.getSize();\r\n                        this._doPicking(uv.x * size.width, (this.applyYInversionOnUpdate ? 1.0 - uv.y : uv.y) * size.height, null, PointerEventTypes.POINTERMOVE, pointerId, 0);\r\n                    }\r\n                } else {\r\n                    if (this._lastControlOver[pointerId]) {\r\n                        this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId], null, true);\r\n                    }\r\n                    delete this._lastControlOver[pointerId];\r\n                }\r\n            },\r\n            true\r\n        );\r\n        this._attachToOnPointerOut(scene);\r\n        this._attachToOnBlur(scene);\r\n    }\r\n    /**\r\n     * Move the focus to a specific control\r\n     * @param control defines the control which will receive the focus\r\n     */\r\n    public moveFocusToControl(control: IFocusableControl): void {\r\n        this.focusedControl = control;\r\n        this._lastPickedControl = <any>control;\r\n        this._blockNextFocusCheck = true;\r\n    }\r\n    private _manageFocus(): void {\r\n        if (this._blockNextFocusCheck) {\r\n            this._blockNextFocusCheck = false;\r\n            this._lastPickedControl = <any>this._focusedControl;\r\n            return;\r\n        }\r\n        // Focus management\r\n        if (this._focusedControl) {\r\n            if (this._focusedControl !== <any>this._lastPickedControl) {\r\n                if (this._lastPickedControl.isFocusInvisible) {\r\n                    return;\r\n                }\r\n                this.focusedControl = null;\r\n            }\r\n        }\r\n    }\r\n    private _attachPickingToSceneRender(scene: Scene, pickFunction: () => void, forcePicking: boolean) {\r\n        this._sceneRenderObserver = scene.onBeforeRenderObservable.add(() => {\r\n            if (!this.checkPointerEveryFrame) {\r\n                return;\r\n            }\r\n            if (this._linkedControls.length > 0 || forcePicking) {\r\n                pickFunction();\r\n            }\r\n        });\r\n    }\r\n    private _attachToOnPointerOut(scene: Scene): void {\r\n        this._canvasPointerOutObserver = scene.getEngine().onCanvasPointerOutObservable.add((pointerEvent) => {\r\n            if (this._lastControlOver[pointerEvent.pointerId]) {\r\n                this._lastControlOver[pointerEvent.pointerId]._onPointerOut(this._lastControlOver[pointerEvent.pointerId], null);\r\n            }\r\n            delete this._lastControlOver[pointerEvent.pointerId];\r\n            if (this._lastControlDown[pointerEvent.pointerId] && this._lastControlDown[pointerEvent.pointerId] !== this._capturingControl[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId]._forcePointerUp(pointerEvent.pointerId);\r\n                delete this._lastControlDown[pointerEvent.pointerId];\r\n            }\r\n        });\r\n    }\r\n    private _attachToOnBlur(scene: Scene): void {\r\n        this._canvasBlurObserver = scene.getEngine().onCanvasBlurObservable.add(() => {\r\n            Object.entries(this._lastControlDown).forEach(([, value]) => {\r\n                value._onCanvasBlur();\r\n            });\r\n            this.focusedControl = null;\r\n            this._lastControlDown = {};\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Serializes the entire GUI system\r\n     * @returns an object with the JSON serialized data\r\n     */\r\n    public serializeContent(): any {\r\n        const size = this.getSize();\r\n        const serializationObject = {\r\n            root: {},\r\n            width: size.width,\r\n            height: size.height,\r\n        };\r\n\r\n        this._rootContainer.serialize(serializationObject.root);\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Recreate the content of the ADT from a JSON object\r\n     * @param serializedObject define the JSON serialized object to restore from\r\n     * @param scaleToSize defines whether to scale to texture to the saved size\r\n     */\r\n    public parseSerializedObject(serializedObject: any, scaleToSize?: boolean) {\r\n        this._rootContainer = Control.Parse(serializedObject.root, this) as Container;\r\n        if (scaleToSize) {\r\n            const width = serializedObject.width;\r\n            const height = serializedObject.height;\r\n            if (typeof width === \"number\" && typeof height === \"number\" && width >= 0 && height >= 0) {\r\n                this.scaleTo(width, height);\r\n            } else {\r\n                // scales the GUI to a default size if none was available in the serialized content\r\n                this.scaleTo(1920, 1080);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clones the ADT\r\n     * @param newName defines the name of the new ADT\r\n     * @returns the clone of the ADT\r\n     */\r\n    public clone(newName?: string): AdvancedDynamicTexture {\r\n        const scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return this;\r\n        }\r\n\r\n        const data = this.serializeContent();\r\n        const clone = AdvancedDynamicTexture.CreateFullscreenUI(newName || \"Clone of \" + this.name, this.isForeground, scene, this.samplingMode);\r\n        clone.parseSerializedObject(data);\r\n\r\n        return clone;\r\n    }\r\n\r\n    /**\r\n     * Recreate the content of the ADT from a JSON object\r\n     * @param serializedObject define the JSON serialized object to restore from\r\n     * @param scaleToSize defines whether to scale to texture to the saved size\r\n     * @deprecated Please use parseSerializedObject instead\r\n     */\r\n    public parseContent = this.parseSerializedObject;\r\n\r\n    /**\r\n     * Recreate the content of the ADT from a snippet saved by the GUI editor\r\n     * @param snippetId defines the snippet to load\r\n     * @param scaleToSize defines whether to scale to texture to the saved size\r\n     * @param appendToAdt if provided the snippet will be appended to the adt. Otherwise a fullscreen ADT will be created.\r\n     * @returns a promise that will resolve on success\r\n     */\r\n    public static async ParseFromSnippetAsync(snippetId: string, scaleToSize?: boolean, appendToAdt?: AdvancedDynamicTexture): Promise<AdvancedDynamicTexture> {\r\n        const adt = appendToAdt ?? AdvancedDynamicTexture.CreateFullscreenUI(\"ADT from snippet\");\r\n        if (snippetId === \"_BLANK\") {\r\n            return adt;\r\n        }\r\n\r\n        const serialized = await AdvancedDynamicTexture._LoadURLContentAsync(AdvancedDynamicTexture.SnippetUrl + \"/\" + snippetId.replace(/#/g, \"/\"), true);\r\n        adt.parseSerializedObject(serialized, scaleToSize);\r\n        return adt;\r\n    }\r\n\r\n    /**\r\n     * Recreate the content of the ADT from a snippet saved by the GUI editor\r\n     * @param snippetId defines the snippet to load\r\n     * @param scaleToSize defines whether to scale to texture to the saved size\r\n     * @returns a promise that will resolve on success\r\n     */\r\n    public parseFromSnippetAsync(snippetId: string, scaleToSize?: boolean): Promise<AdvancedDynamicTexture> {\r\n        return AdvancedDynamicTexture.ParseFromSnippetAsync(snippetId, scaleToSize, this);\r\n    }\r\n\r\n    /**\r\n     * Recreate the content of the ADT from a url json\r\n     * @param url defines the url to load\r\n     * @param scaleToSize defines whether to scale to texture to the saved size\r\n     * @param appendToAdt if provided the snippet will be appended to the adt. Otherwise a fullscreen ADT will be created.\r\n     * @returns a promise that will resolve on success\r\n     */\r\n    public static async ParseFromFileAsync(url: string, scaleToSize?: boolean, appendToAdt?: AdvancedDynamicTexture): Promise<AdvancedDynamicTexture> {\r\n        const adt = appendToAdt ?? AdvancedDynamicTexture.CreateFullscreenUI(\"ADT from URL\");\r\n        const serialized = await AdvancedDynamicTexture._LoadURLContentAsync(url);\r\n        adt.parseSerializedObject(serialized, scaleToSize);\r\n        return adt;\r\n    }\r\n\r\n    /**\r\n     * Recreate the content of the ADT from a url json\r\n     * @param url defines the url to load\r\n     * @param scaleToSize defines whether to scale to texture to the saved size\r\n     * @returns a promise that will resolve on success\r\n     */\r\n    public parseFromURLAsync(url: string, scaleToSize?: boolean): Promise<AdvancedDynamicTexture> {\r\n        return AdvancedDynamicTexture.ParseFromFileAsync(url, scaleToSize, this);\r\n    }\r\n\r\n    private static _LoadURLContentAsync(url: string, snippet: boolean = false): Promise<any> {\r\n        if (url === \"\") {\r\n            return Promise.reject(\"No URL provided\");\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            const request = new WebRequest();\r\n            request.addEventListener(\"readystatechange\", () => {\r\n                if (request.readyState == 4) {\r\n                    if (request.status == 200) {\r\n                        let gui;\r\n                        if (snippet) {\r\n                            const payload = JSON.parse(JSON.parse(request.responseText).jsonPayload);\r\n                            gui = payload.encodedGui ? new TextDecoder(\"utf-8\").decode(DecodeBase64ToBinary(payload.encodedGui)) : payload.gui;\r\n                        } else {\r\n                            gui = request.responseText;\r\n                        }\r\n                        const serializationObject = JSON.parse(gui);\r\n                        resolve(serializationObject);\r\n                    } else {\r\n                        reject(\"Unable to load\");\r\n                    }\r\n                }\r\n            });\r\n            request.open(\"GET\", url);\r\n            request.send();\r\n        });\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Compares two rectangle based controls for pixel overlap\r\n     * @param control1 The first control to compare\r\n     * @param control2 The second control to compare\r\n     * @returns true if overlaps, otherwise false\r\n     */\r\n    private static _Overlaps(control1: Control, control2: Control) {\r\n        return !(\r\n            control1.centerX > control2.centerX + control2.widthInPixels ||\r\n            control1.centerX + control1.widthInPixels < control2.centerX ||\r\n            control1.centerY + control1.heightInPixels < control2.centerY ||\r\n            control1.centerY > control2.centerY + control2.heightInPixels\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh)\r\n     * @param mesh defines the mesh which will receive the texture\r\n     * @param width defines the texture width (1024 by default)\r\n     * @param height defines the texture height (1024 by default)\r\n     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)\r\n     * @param onlyAlphaTesting defines a boolean indicating that alpha blending will not be used (only alpha testing) (false by default)\r\n     * @param invertY defines if the texture needs to be inverted on the y axis during loading (true by default)\r\n     * @param materialSetupCallback defines a custom way of creating and setting up the material on the mesh\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateForMesh(\r\n        mesh: AbstractMesh,\r\n        width = 1024,\r\n        height = 1024,\r\n        supportPointerMove = true,\r\n        onlyAlphaTesting = false,\r\n        invertY?: boolean,\r\n        materialSetupCallback: (mesh: AbstractMesh, uniqueId: string, texture: AdvancedDynamicTexture, onlyAlphaTesting: boolean) => void = this._CreateMaterial\r\n    ): AdvancedDynamicTexture {\r\n        // use a unique ID in name so serialization will work even if you create two ADTs for a single mesh\r\n        const uniqueId = RandomGUID();\r\n        const result = new AdvancedDynamicTexture(\r\n            `AdvancedDynamicTexture for ${mesh.name} [${uniqueId}]`,\r\n            width,\r\n            height,\r\n            mesh.getScene(),\r\n            true,\r\n            Texture.TRILINEAR_SAMPLINGMODE,\r\n            invertY\r\n        );\r\n\r\n        materialSetupCallback(mesh, uniqueId, result, onlyAlphaTesting);\r\n\r\n        result.attachToMesh(mesh, supportPointerMove);\r\n        return result;\r\n    }\r\n\r\n    private static _CreateMaterial(mesh: AbstractMesh, uniqueId: string, texture: AdvancedDynamicTexture, onlyAlphaTesting: boolean): void {\r\n        const internalClassType = GetClass(\"BABYLON.StandardMaterial\");\r\n        if (!internalClassType) {\r\n            throw \"StandardMaterial needs to be imported before as it contains a side-effect required by your code.\";\r\n        }\r\n\r\n        const material: StandardMaterial = new internalClassType(`AdvancedDynamicTextureMaterial for ${mesh.name} [${uniqueId}]`, mesh.getScene());\r\n        material.backFaceCulling = false;\r\n        material.diffuseColor = Color3.Black();\r\n        material.specularColor = Color3.Black();\r\n        if (onlyAlphaTesting) {\r\n            material.diffuseTexture = texture;\r\n            material.emissiveTexture = texture;\r\n            texture.hasAlpha = true;\r\n        } else {\r\n            material.emissiveTexture = texture;\r\n            material.opacityTexture = texture;\r\n        }\r\n        mesh.material = material;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh) BUT do not create a new material for the mesh. You will be responsible for connecting the texture\r\n     * @param mesh defines the mesh which will receive the texture\r\n     * @param width defines the texture width (1024 by default)\r\n     * @param height defines the texture height (1024 by default)\r\n     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)\r\n     * @param invertY defines if the texture needs to be inverted on the y axis during loading (true by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateForMeshTexture(mesh: AbstractMesh, width = 1024, height = 1024, supportPointerMove = true, invertY?: boolean): AdvancedDynamicTexture {\r\n        const result = new AdvancedDynamicTexture(mesh.name + \" AdvancedDynamicTexture\", width, height, mesh.getScene(), true, Texture.TRILINEAR_SAMPLINGMODE, invertY);\r\n        result.attachToMesh(mesh, supportPointerMove);\r\n        return result;\r\n    }\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in fullscreen mode.\r\n     * In this mode the texture will rely on a layer for its rendering.\r\n     * This allows it to be treated like any other layer.\r\n     * As such, if you have a multi camera setup, you can set the layerMask on the GUI as well.\r\n     * LayerMask is set through advancedTexture.layer.layerMask\r\n     * @param name defines name for the texture\r\n     * @param foreground defines a boolean indicating if the texture must be rendered in foreground (default is true)\r\n     * @param scene defines the hosting scene\r\n     * @param sampling defines the texture sampling mode (Texture.BILINEAR_SAMPLINGMODE by default)\r\n     * @param adaptiveScaling defines whether to automatically scale root to match hardwarescaling (false by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateFullscreenUI(\r\n        name: string,\r\n        foreground: boolean = true,\r\n        scene: Nullable<Scene> = null,\r\n        sampling = Texture.BILINEAR_SAMPLINGMODE,\r\n        adaptiveScaling: boolean = false\r\n    ): AdvancedDynamicTexture {\r\n        const result = new AdvancedDynamicTexture(name, 0, 0, scene, false, sampling);\r\n        // Display\r\n        const resultScene = result.getScene();\r\n        const layer = new Layer(name + \"_layer\", null, resultScene, !foreground);\r\n        layer.texture = result;\r\n        result._layerToDispose = layer;\r\n        result._isFullscreen = true;\r\n\r\n        if (adaptiveScaling && resultScene) {\r\n            const newScale = 1 / resultScene.getEngine().getHardwareScalingLevel();\r\n            result._rootContainer.scaleX = newScale;\r\n            result._rootContainer.scaleY = newScale;\r\n        }\r\n\r\n        // Attach\r\n        result.attach();\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Scales the texture\r\n     * @param ratio the scale factor to apply to both width and height\r\n     */\r\n    public scale(ratio: number): void {\r\n        super.scale(ratio);\r\n        this.markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Resizes the texture\r\n     * @param width the new width\r\n     * @param height the new height\r\n     */\r\n    public scaleTo(width: number, height: number): void {\r\n        super.scaleTo(width, height);\r\n        this.markAsDirty();\r\n    }\r\n\r\n    private _checkGuiIsReady() {\r\n        if (this.guiIsReady()) {\r\n            this.onGuiReadyObservable.notifyObservers(this);\r\n\r\n            this.onGuiReadyObservable.clear();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if all the GUI components are ready to render\r\n     */\r\n    public guiIsReady(): boolean {\r\n        return this._rootContainer.isReady();\r\n    }\r\n}\r\n","import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { PerfCounter } from \"core/Misc/perfCounter\";\r\nimport type { IDisposable } from \"core/scene\";\r\n\r\nimport type { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * This class can be used to get instrumentation data from a AdvancedDynamicTexture object\r\n */\r\nexport class AdvancedDynamicTextureInstrumentation implements IDisposable {\r\n    private _captureRenderTime = false;\r\n    private _renderTime = new PerfCounter();\r\n\r\n    private _captureLayoutTime = false;\r\n    private _layoutTime = new PerfCounter();\r\n\r\n    // Observers\r\n    private _onBeginRenderObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n    private _onEndRenderObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n    private _onBeginLayoutObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n    private _onEndLayoutObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n\r\n    // Properties\r\n\r\n    /**\r\n     * Gets the perf counter used to capture render time\r\n     */\r\n    public get renderTimeCounter(): PerfCounter {\r\n        return this._renderTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used to capture layout time\r\n     */\r\n    public get layoutTimeCounter(): PerfCounter {\r\n        return this._layoutTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the render time capture\r\n     */\r\n    public get captureRenderTime(): boolean {\r\n        return this._captureRenderTime;\r\n    }\r\n\r\n    public set captureRenderTime(value: boolean) {\r\n        if (value === this._captureRenderTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureRenderTime = value;\r\n\r\n        if (value) {\r\n            this._onBeginRenderObserver = this.texture.onBeginRenderObservable.add(() => {\r\n                this._renderTime.beginMonitoring();\r\n            });\r\n\r\n            this._onEndRenderObserver = this.texture.onEndRenderObservable.add(() => {\r\n                this._renderTime.endMonitoring(true);\r\n            });\r\n        } else {\r\n            this.texture.onBeginRenderObservable.remove(this._onBeginRenderObserver);\r\n            this._onBeginRenderObserver = null;\r\n            this.texture.onEndRenderObservable.remove(this._onEndRenderObserver);\r\n            this._onEndRenderObserver = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the layout time capture\r\n     */\r\n    public get captureLayoutTime(): boolean {\r\n        return this._captureLayoutTime;\r\n    }\r\n\r\n    public set captureLayoutTime(value: boolean) {\r\n        if (value === this._captureLayoutTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureLayoutTime = value;\r\n\r\n        if (value) {\r\n            this._onBeginLayoutObserver = this.texture.onBeginLayoutObservable.add(() => {\r\n                this._layoutTime.beginMonitoring();\r\n            });\r\n\r\n            this._onEndLayoutObserver = this.texture.onEndLayoutObservable.add(() => {\r\n                this._layoutTime.endMonitoring(true);\r\n            });\r\n        } else {\r\n            this.texture.onBeginLayoutObservable.remove(this._onBeginLayoutObserver);\r\n            this._onBeginLayoutObserver = null;\r\n            this.texture.onEndLayoutObservable.remove(this._onEndLayoutObserver);\r\n            this._onEndLayoutObserver = null;\r\n        }\r\n    }\r\n    /**\r\n     * Instantiates a new advanced dynamic texture instrumentation.\r\n     * This class can be used to get instrumentation data from an AdvancedDynamicTexture object\r\n     * @param texture Defines the AdvancedDynamicTexture to instrument\r\n     */\r\n    public constructor(\r\n        /**\r\n         * Define the instrumented AdvancedDynamicTexture.\r\n         */\r\n        public texture: AdvancedDynamicTexture\r\n    ) {}\r\n\r\n    /**\r\n     * Dispose and release associated resources.\r\n     */\r\n    public dispose() {\r\n        this.texture.onBeginRenderObservable.remove(this._onBeginRenderObserver);\r\n        this._onBeginRenderObserver = null;\r\n        this.texture.onEndRenderObservable.remove(this._onEndRenderObserver);\r\n        this._onEndRenderObserver = null;\r\n        this.texture.onBeginLayoutObservable.remove(this._onBeginLayoutObserver);\r\n        this._onBeginLayoutObserver = null;\r\n        this.texture.onEndLayoutObservable.remove(this._onEndLayoutObserver);\r\n        this._onEndLayoutObserver = null;\r\n\r\n        (<any>this.texture) = null;\r\n    }\r\n}\r\n","import { GetClass } from \"core/Misc/typeStore\";\r\nimport type { Nullable } from \"core/types\";\r\n\r\nconst XmlLoaderError = \"XmlLoader Exception : XML file is malformed or corrupted.\";\r\n\r\n/**\r\n * Class used to load GUI via XML.\r\n */\r\nexport class XmlLoader {\r\n    private _nodes: any = {};\r\n\r\n    private _nodeTypes: any = {\r\n        element: 1,\r\n        attribute: 2,\r\n        text: 3,\r\n    };\r\n\r\n    private _isLoaded: boolean = false;\r\n\r\n    private _objectAttributes: any = {\r\n        textHorizontalAlignment: 1,\r\n        textVerticalAlignment: 2,\r\n        horizontalAlignment: 3,\r\n        verticalAlignment: 4,\r\n        stretch: 5,\r\n    };\r\n\r\n    private _rootNode: any;\r\n\r\n    private _parentClass: any;\r\n\r\n    /**\r\n     * Create a new xml loader\r\n     * @param parentClass Sets the class context. Used when the loader is instanced inside a class and not in a global context\r\n     */\r\n    constructor(parentClass: any = null) {\r\n        if (parentClass) {\r\n            this._parentClass = parentClass;\r\n        }\r\n    }\r\n\r\n    private _getChainElement(attributeValue: any): any {\r\n        let element: any = window;\r\n\r\n        if (this._parentClass) {\r\n            element = this._parentClass;\r\n        }\r\n        let value = attributeValue;\r\n        value = value.split(\".\");\r\n\r\n        for (let i = 0; i < value.length; i++) {\r\n            element = element[value[i]];\r\n        }\r\n        return element;\r\n    }\r\n\r\n    private _getClassAttribute(attributeName: string): any {\r\n        const attribute = attributeName.split(\".\");\r\n        const className = GetClass(\"BABYLON.GUI.\" + attribute[0]);\r\n        return className[attribute[1]];\r\n    }\r\n\r\n    private _createGuiElement(node: any, parent: any, linkParent: boolean = true): void {\r\n        try {\r\n            const className = GetClass(\"BABYLON.GUI.\" + node.nodeName);\r\n            const guiNode = new className();\r\n\r\n            if (parent && linkParent) {\r\n                parent.addControl(guiNode);\r\n            }\r\n\r\n            for (let i = 0; i < node.attributes.length; i++) {\r\n                if (node.attributes[i].name.toLowerCase().includes(\"datasource\")) {\r\n                    continue;\r\n                }\r\n\r\n                if (node.attributes[i].name.toLowerCase().includes(\"observable\")) {\r\n                    const element = this._getChainElement(node.attributes[i].value);\r\n                    guiNode[node.attributes[i].name].add(element);\r\n\r\n                    continue;\r\n                } else if (node.attributes[i].name == \"linkWithMesh\") {\r\n                    if (this._parentClass) {\r\n                        guiNode.linkWithMesh(this._parentClass[node.attributes[i].value]);\r\n                    } else {\r\n                        guiNode.linkWithMesh(window[node.attributes[i].value]);\r\n                    }\r\n                } else if (node.attributes[i].value.startsWith(\"{{\") && node.attributes[i].value.endsWith(\"}}\")) {\r\n                    const element = this._getChainElement(node.attributes[i].value.substring(2, node.attributes[i].value.length - 2));\r\n                    guiNode[node.attributes[i].name] = element;\r\n                } else if (!this._objectAttributes[node.attributes[i].name]) {\r\n                    if (node.attributes[i].value == \"true\" || node.attributes[i].value == \"false\") {\r\n                        guiNode[node.attributes[i].name] = node.attributes[i].value == \"true\";\r\n                    } else {\r\n                        guiNode[node.attributes[i].name] = !isNaN(Number(node.attributes[i].value)) ? Number(node.attributes[i].value) : node.attributes[i].value;\r\n                    }\r\n                } else {\r\n                    guiNode[node.attributes[i].name] = this._getClassAttribute(node.attributes[i].value);\r\n                }\r\n            }\r\n\r\n            if (!node.attributes.getNamedItem(\"id\")) {\r\n                this._nodes[node.nodeName + Object.keys(this._nodes).length + \"_gen\"] = guiNode;\r\n                return guiNode;\r\n            }\r\n\r\n            let id = node.attributes.getNamedItem(\"id\").value;\r\n            if (id.startsWith(\"{{\") && id.endsWith(\"}}\")) {\r\n                id = this._getChainElement(id.substring(2, id.length - 2));\r\n            }\r\n\r\n            if (!this._nodes[id]) {\r\n                this._nodes[id] = guiNode;\r\n            } else {\r\n                throw \"XmlLoader Exception : Duplicate ID, every element should have an unique ID attribute\";\r\n            }\r\n            return guiNode;\r\n        } catch (exception) {\r\n            throw \"XmlLoader Exception : Error parsing Control \" + node.nodeName + \",\" + exception + \".\";\r\n        }\r\n    }\r\n\r\n    private _parseGrid(node: any, guiNode: any, parent: any): void {\r\n        let width;\r\n        let height;\r\n        let columns;\r\n        const rows = node.children;\r\n        let cells;\r\n        let isPixel = false;\r\n        let cellNode;\r\n        let rowNumber = -1;\r\n        let columnNumber = -1;\r\n        let totalColumnsNumber = 0;\r\n\r\n        for (let i = 0; i < rows.length; i++) {\r\n            if (rows[i].nodeType != this._nodeTypes.element) {\r\n                continue;\r\n            }\r\n            if (rows[i].nodeName != \"Row\") {\r\n                throw \"XmlLoader Exception : Expecting Row node, received \" + rows[i].nodeName;\r\n            }\r\n            rowNumber += 1;\r\n            columns = rows[i].children;\r\n\r\n            if (!rows[i].attributes.getNamedItem(\"height\")) {\r\n                throw \"XmlLoader Exception : Height must be defined for grid rows\";\r\n            }\r\n            height = Number(rows[i].attributes.getNamedItem(\"height\").nodeValue);\r\n            isPixel = rows[i].attributes.getNamedItem(\"isPixel\") ? JSON.parse(rows[i].attributes.getNamedItem(\"isPixel\").nodeValue) : false;\r\n            guiNode.addRowDefinition(height, isPixel);\r\n\r\n            for (let j = 0; j < columns.length; j++) {\r\n                if (columns[j].nodeType != this._nodeTypes.element) {\r\n                    continue;\r\n                }\r\n                if (columns[j].nodeName != \"Column\") {\r\n                    throw \"XmlLoader Exception : Expecting Column node, received \" + columns[j].nodeName;\r\n                }\r\n                columnNumber += 1;\r\n                if (rowNumber > 0 && columnNumber > totalColumnsNumber) {\r\n                    throw \"XmlLoader Exception : In the Grid element, the number of columns is defined in the first row, do not add more columns in the subsequent rows.\";\r\n                }\r\n\r\n                if (rowNumber == 0) {\r\n                    if (!columns[j].attributes.getNamedItem(\"width\")) {\r\n                        throw \"XmlLoader Exception : Width must be defined for all the grid columns in the first row\";\r\n                    }\r\n                    width = Number(columns[j].attributes.getNamedItem(\"width\").nodeValue);\r\n                    isPixel = columns[j].attributes.getNamedItem(\"isPixel\") ? JSON.parse(columns[j].attributes.getNamedItem(\"isPixel\").nodeValue) : false;\r\n                    guiNode.addColumnDefinition(width, isPixel);\r\n                }\r\n\r\n                cells = columns[j].children;\r\n\r\n                for (let k = 0; k < cells.length; k++) {\r\n                    if (cells[k].nodeType != this._nodeTypes.element) {\r\n                        continue;\r\n                    }\r\n                    cellNode = this._createGuiElement(cells[k], guiNode, false);\r\n                    guiNode.addControl(cellNode, rowNumber, columnNumber);\r\n                    if (cells[k].firstChild) {\r\n                        this._parseXml(cells[k].firstChild, cellNode);\r\n                    }\r\n                }\r\n            }\r\n            if (rowNumber == 0) {\r\n                totalColumnsNumber = columnNumber;\r\n            }\r\n            columnNumber = -1;\r\n        }\r\n\r\n        if (node.nextSibling) {\r\n            this._parseXml(node.nextSibling, parent);\r\n        }\r\n    }\r\n\r\n    private _parseElement(node: any, guiNode: any, parent: any): void {\r\n        if (node.firstChild) {\r\n            this._parseXml(node.firstChild, guiNode);\r\n        }\r\n\r\n        if (node.nextSibling) {\r\n            this._parseXml(node.nextSibling, parent);\r\n        }\r\n    }\r\n\r\n    private _prepareSourceElement(node: any, guiNode: any, variable: any, source: any, iterator: any): void {\r\n        if (this._parentClass) {\r\n            this._parentClass[variable] = source[iterator];\r\n        } else {\r\n            window[variable] = source[iterator];\r\n        }\r\n\r\n        if (node.firstChild) {\r\n            this._parseXml(node.firstChild, guiNode, true);\r\n        }\r\n    }\r\n\r\n    private _parseElementsFromSource(node: any, guiNode: any, parent: any): void {\r\n        const dataSource = node.attributes.getNamedItem(\"dataSource\").value;\r\n\r\n        if (!dataSource.includes(\" in \")) {\r\n            throw \"XmlLoader Exception : Malformed XML, Data Source must include an in\";\r\n        } else {\r\n            let isArray = true;\r\n            const splittedSource = dataSource.split(\" in \");\r\n            if (splittedSource.length < 2) {\r\n                throw \"XmlLoader Exception : Malformed XML, Data Source must have an iterator and a source\";\r\n            }\r\n            let source = splittedSource[1];\r\n            if (source.startsWith(\"{\") && source.endsWith(\"}\")) {\r\n                isArray = false;\r\n            }\r\n\r\n            if (!isArray || (source.startsWith(\"[\") && source.endsWith(\"]\"))) {\r\n                source = source.substring(1, source.length - 1);\r\n            }\r\n\r\n            if (this._parentClass) {\r\n                source = this._parentClass[source];\r\n            } else {\r\n                source = window[source];\r\n            }\r\n\r\n            if (isArray) {\r\n                for (let i = 0; i < source.length; i++) {\r\n                    this._prepareSourceElement(node, guiNode, splittedSource[0], source, i);\r\n                }\r\n            } else {\r\n                for (const i in source) {\r\n                    this._prepareSourceElement(node, guiNode, splittedSource[0], source, i);\r\n                }\r\n            }\r\n\r\n            if (node.nextSibling) {\r\n                this._parseXml(node.nextSibling, parent);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _parseXml(node: any, parent: any, generated: boolean = false): void {\r\n        if (node.nodeType != this._nodeTypes.element) {\r\n            if (node.nextSibling) {\r\n                this._parseXml(node.nextSibling, parent, generated);\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (generated) {\r\n            node.setAttribute(\"id\", parent.id + (parent._children.length + 1));\r\n        }\r\n\r\n        const guiNode = this._createGuiElement(node, parent);\r\n\r\n        if (!this._rootNode) {\r\n            this._rootNode = guiNode;\r\n        }\r\n\r\n        if (node.nodeName == \"Grid\") {\r\n            this._parseGrid(node, guiNode, parent);\r\n        } else if (!node.attributes.getNamedItem(\"dataSource\")) {\r\n            this._parseElement(node, guiNode, parent);\r\n        } else {\r\n            this._parseElementsFromSource(node, guiNode, parent);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets if the loading has finished.\r\n     * @returns whether the loading has finished or not\r\n     */\r\n    public isLoaded(): boolean {\r\n        return this._isLoaded;\r\n    }\r\n\r\n    /**\r\n     * Gets a loaded node / control by id.\r\n     * @param id the Controls id set in the xml\r\n     * @returns element of type Control\r\n     */\r\n    public getNodeById(id: string): any {\r\n        return this._nodes[id];\r\n    }\r\n\r\n    /**\r\n     * Gets all loaded nodes / controls\r\n     * @returns Array of controls\r\n     */\r\n    public getNodes(): any {\r\n        return this._nodes;\r\n    }\r\n    /**\r\n     * Disposes the loaded layout\r\n     */\r\n    public dispose(): void {\r\n        if (this._rootNode) {\r\n            this._rootNode.dispose();\r\n            this._rootNode = null;\r\n            this._nodes = {};\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initiates the xml layout loading\r\n     * @param xmlFile defines the xml layout to load\r\n     * @param rootNode defines the node / control to use as a parent for the loaded layout controls.\r\n     * @param onSuccess defines the callback called on layout load successfully.\r\n     * @param onError defines the callback called on layout load failure.\r\n     */\r\n    public loadLayout(xmlFile: any, rootNode: any, onSuccess: Nullable<() => void> = null, onError: Nullable<(error: string) => void> = null): void {\r\n        const xhttp = new XMLHttpRequest();\r\n        xhttp.onload = () => {\r\n            if (xhttp.readyState === 4 && xhttp.status === 200) {\r\n                if (!xhttp.responseXML) {\r\n                    if (onError) {\r\n                        onError(XmlLoaderError);\r\n                        return;\r\n                    } else {\r\n                        throw XmlLoaderError;\r\n                    }\r\n                }\r\n\r\n                const xmlDoc = xhttp.responseXML.documentElement;\r\n                this._parseXml(xmlDoc.firstChild, rootNode);\r\n                this._isLoaded = true;\r\n\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            }\r\n        };\r\n\r\n        xhttp.onerror = function () {\r\n            if (onError) {\r\n                onError(\"an error occurred during loading the layout\");\r\n            }\r\n        };\r\n\r\n        xhttp.open(\"GET\", xmlFile, true);\r\n        xhttp.send();\r\n    }\r\n    /**\r\n     * Initiates the xml layout loading asynchronously\r\n     * @param xmlFile defines the xml layout to load\r\n     * @param rootNode defines the node / control to use as a parent for the loaded layout controls.\r\n     * @returns Promise\r\n     */\r\n    public async loadLayoutAsync(xmlFile: any, rootNode: any): Promise<any> {\r\n        return new Promise((resolve: any, reject: any) => {\r\n            this.loadLayout(xmlFile, rootNode, resolve, reject);\r\n        });\r\n    }\r\n}\r\n","import { Vector3 } from \"core/Maths/math.vector\";\r\n\r\n/**\r\n * Class used to transport Vector3 information for pointer events\r\n */\r\nexport class Vector3WithInfo extends Vector3 {\r\n    /**\r\n     * Creates a new Vector3WithInfo\r\n     * @param source defines the vector3 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(\r\n        source: Vector3,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0\r\n    ) {\r\n        super(source.x, source.y, source.z);\r\n    }\r\n}\r\n","import type { Nullable } from \"core/types\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport { PointerEventTypes } from \"core/Events/pointerEvents\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { IBehaviorAware, Behavior } from \"core/Behaviors/behavior\";\r\nimport type { IDisposable, Scene } from \"core/scene\";\r\n\r\nimport type { GUI3DManager } from \"../gui3DManager\";\r\nimport { Vector3WithInfo } from \"../vector3WithInfo\";\r\nimport type { Container3D } from \"./container3D\";\r\n\r\ndeclare type TouchButton3D = import(\"./touchButton3D\").TouchButton3D;\r\n\r\n/**\r\n * Class used as base class for controls\r\n */\r\nexport class Control3D implements IDisposable, IBehaviorAware<Control3D> {\r\n    private _node: Nullable<TransformNode>;\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _downPointerIds: { [id: number]: number } = {}; // Store number of pointer downs per ID, from near and far interactions\r\n\r\n    protected _isVisible = true;\r\n\r\n    /** @internal */\r\n    public _host: GUI3DManager;\r\n    /** @internal */\r\n    public _isScaledByManager = false;\r\n\r\n    /** Gets or sets the control position in world space */\r\n    public get position(): Vector3 {\r\n        if (!this._node) {\r\n            return Vector3.Zero();\r\n        }\r\n\r\n        return this._node.position;\r\n    }\r\n\r\n    public set position(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.position = value;\r\n    }\r\n\r\n    /** Gets or sets the control scaling in world space */\r\n    public get scaling(): Vector3 {\r\n        if (!this._node) {\r\n            return new Vector3(1, 1, 1);\r\n        }\r\n\r\n        return this._node.scaling;\r\n    }\r\n\r\n    public set scaling(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._isScaledByManager = false;\r\n        this._node.scaling = value;\r\n    }\r\n\r\n    /** Callback used to start pointer enter animation */\r\n    public pointerEnterAnimation: () => void;\r\n    /** Callback used to start pointer out animation */\r\n    public pointerOutAnimation: () => void;\r\n    /** Callback used to start pointer down animation */\r\n    public pointerDownAnimation: () => void;\r\n    /** Callback used to start pointer up animation */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n     * An event triggered when the pointer moves over the control\r\n     */\r\n    public onPointerMoveObservable = new Observable<Vector3>();\r\n\r\n    /**\r\n     * An event triggered when the pointer moves out of the control\r\n     */\r\n    public onPointerOutObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * An event triggered when the pointer taps the control\r\n     */\r\n    public onPointerDownObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer is up\r\n     */\r\n    public onPointerUpObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when a control is clicked on (with a mouse)\r\n     */\r\n    public onPointerClickObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer enters the control\r\n     */\r\n    public onPointerEnterObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * Gets or sets the parent container\r\n     */\r\n    public parent: Nullable<Container3D>;\r\n\r\n    // Behaviors\r\n    private _behaviors = new Array<Behavior<Control3D>>();\r\n\r\n    /**\r\n     * Gets the list of attached behaviors\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors\r\n     */\r\n    public get behaviors(): Behavior<Control3D>[] {\r\n        return this._behaviors;\r\n    }\r\n\r\n    /**\r\n     * Attach a behavior to the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public addBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        const index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n\r\n        behavior.init();\r\n        const scene = this._host.scene;\r\n        if (scene.isLoading) {\r\n            // We defer the attach when the scene will be loaded\r\n            scene.onDataLoadedObservable.addOnce(() => {\r\n                behavior.attach(this);\r\n            });\r\n        } else {\r\n            behavior.attach(this);\r\n        }\r\n        this._behaviors.push(behavior);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove an attached behavior\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public removeBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        const index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index === -1) {\r\n            return this;\r\n        }\r\n\r\n        this._behaviors[index].detach();\r\n        this._behaviors.splice(index, 1);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets an attached behavior by name\r\n     * @param name defines the name of the behavior to look for\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors\r\n     * @returns null if behavior was not found else the requested behavior\r\n     */\r\n    public getBehaviorByName(name: string): Nullable<Behavior<Control3D>> {\r\n        for (const behavior of this._behaviors) {\r\n            if (behavior.name === name) {\r\n                return behavior;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n\r\n        const mesh = this.mesh;\r\n        if (mesh) {\r\n            mesh.setEnabled(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the control name\r\n     */\r\n    constructor(\r\n        /** Defines the control name */\r\n        public name?: string\r\n    ) {}\r\n\r\n    /**\r\n     * Gets a string representing the class name\r\n     */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the control.\r\n     * @returns current class name\r\n     */\r\n    public getClassName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Control3D\";\r\n    }\r\n\r\n    /**\r\n     * Gets the transform node used by this control\r\n     */\r\n    public get node(): Nullable<TransformNode> {\r\n        return this._node;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        if (this._node instanceof AbstractMesh) {\r\n            return this._node as AbstractMesh;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Link the control as child of the given node\r\n     * @param node defines the node to link to. Use null to unlink the control\r\n     * @returns the current control\r\n     */\r\n    public linkToTransformNode(node: Nullable<TransformNode>): Control3D {\r\n        if (this._node) {\r\n            this._node.parent = node;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal*\r\n     */\r\n    public _prepareNode(scene: Scene): void {\r\n        if (!this._node) {\r\n            this._node = this._createNode(scene);\r\n\r\n            if (!this.node) {\r\n                return;\r\n            }\r\n            this._injectGUI3DReservedDataStore(this.node).control = this; // Store the control on the reservedDataStore field in order to get it when picking\r\n\r\n            const mesh = this.mesh;\r\n            if (mesh) {\r\n                mesh.isPickable = true;\r\n\r\n                this._affectMaterial(mesh);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _injectGUI3DReservedDataStore(node: TransformNode): any {\r\n        node.reservedDataStore = node.reservedDataStore ?? {};\r\n        node.reservedDataStore.GUI3D = node.reservedDataStore.GUI3D ?? {};\r\n        return node.reservedDataStore.GUI3D;\r\n    }\r\n\r\n    /**\r\n     * Node creation.\r\n     * Can be overriden by children\r\n     * @param scene defines the scene where the node must be attached\r\n     * @returns the attached node or null if none. Must return a Mesh or AbstractMesh if there is an attached visible object\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        // Do nothing by default\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Affect a material to the given mesh\r\n     * @param mesh defines the mesh which will represent the control\r\n     */\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        mesh.material = null;\r\n    }\r\n\r\n    private _isTouchButton3D(control: Control3D): control is TouchButton3D {\r\n        return (control as TouchButton3D)._generatePointerEventType !== undefined;\r\n    }\r\n\r\n    // Pointers\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerMove(target: Control3D, coordinates: Vector3): void {\r\n        this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerEnter(target: Control3D): boolean {\r\n        if (this._enterCount === -1) {\r\n            // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n\r\n        this._enterCount++;\r\n\r\n        if (this._enterCount > 1) {\r\n            return false;\r\n        }\r\n\r\n        this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerOut(target: Control3D): void {\r\n        this._enterCount--;\r\n\r\n        if (this._enterCount > 0) {\r\n            return;\r\n        }\r\n\r\n        this._enterCount = 0;\r\n\r\n        this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerDown(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        this._downCount++;\r\n        this._downPointerIds[pointerId] = this._downPointerIds[pointerId] + 1 || 1;\r\n\r\n        if (this._downCount !== 1) {\r\n            return false;\r\n        }\r\n\r\n        this.onPointerDownObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerUp(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._downCount--;\r\n        this._downPointerIds[pointerId]--;\r\n\r\n        if (this._downPointerIds[pointerId] <= 0) {\r\n            delete this._downPointerIds[pointerId];\r\n        }\r\n\r\n        if (this._downCount < 0) {\r\n            // Handle if forcePointerUp was called prior to this\r\n            this._downCount = 0;\r\n            return;\r\n        }\r\n\r\n        if (this._downCount == 0) {\r\n            if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n                this.onPointerClickObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n            }\r\n            this.onPointerUpObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n            if (this.pointerUpAnimation) {\r\n                this.pointerUpAnimation();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector3.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (const key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector3.Zero(), +key as number, 0, true);\r\n            }\r\n            if (this._downCount > 0) {\r\n                this._downCount = 1;\r\n                this._onPointerUp(this, Vector3.Zero(), 0, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _processObservables(type: number, pickedPoint: Vector3, originMeshPosition: Nullable<Vector3>, pointerId: number, buttonIndex: number): boolean {\r\n        if (this._isTouchButton3D(this) && originMeshPosition) {\r\n            type = this._generatePointerEventType(type, originMeshPosition, this._downCount);\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, pickedPoint);\r\n\r\n            const previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, pickedPoint, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP || type === PointerEventTypes.POINTERDOUBLETAP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, pickedPoint, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** @internal */\r\n    public _disposeNode(): void {\r\n        if (this._node) {\r\n            this._node.dispose();\r\n            this._node = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        this._disposeNode();\r\n\r\n        // Behaviors\r\n        for (const behavior of this._behaviors) {\r\n            behavior.detach();\r\n        }\r\n    }\r\n}\r\n","import type { Control } from \"../../2D/controls/control\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\n\r\n/**\r\n * The base class for controls that display content\r\n */\r\nexport class ContentDisplay3D extends Control3D {\r\n    private _content: Control;\r\n    private _facadeTexture: Nullable<AdvancedDynamicTexture>;\r\n    protected _contentResolution = 512;\r\n    protected _contentScaleRatio = 2;\r\n\r\n    /**\r\n     * Gets or sets the GUI 2D content used to display the button's facade\r\n     */\r\n    public get content(): Control {\r\n        return this._content;\r\n    }\r\n\r\n    public set content(value: Control) {\r\n        this._content = value;\r\n\r\n        if (!value || !this._host || !this._host.utilityLayer) {\r\n            return;\r\n        }\r\n\r\n        if (!this._facadeTexture) {\r\n            this._facadeTexture = new AdvancedDynamicTexture(\r\n                \"Facade\",\r\n                this._contentResolution,\r\n                this._contentResolution,\r\n                this._host.utilityLayer.utilityLayerScene,\r\n                true,\r\n                Texture.TRILINEAR_SAMPLINGMODE\r\n            );\r\n            this._facadeTexture.rootContainer.scaleX = this._contentScaleRatio;\r\n            this._facadeTexture.rootContainer.scaleY = this._contentScaleRatio;\r\n            this._facadeTexture.premulAlpha = true;\r\n        } else {\r\n            this._facadeTexture.rootContainer.clearControls();\r\n        }\r\n\r\n        this._facadeTexture.addControl(value);\r\n\r\n        this._applyFacade(this._facadeTexture);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the texture resolution used to render content (512 by default)\r\n     */\r\n    public get contentResolution(): number {\r\n        return this._contentResolution;\r\n    }\r\n\r\n    public set contentResolution(value: number) {\r\n        if (this._contentResolution === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentResolution = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    protected _disposeFacadeTexture() {\r\n        if (this._facadeTexture) {\r\n            this._facadeTexture.dispose();\r\n            this._facadeTexture = null;\r\n        }\r\n    }\r\n\r\n    protected _resetContent() {\r\n        this._disposeFacadeTexture();\r\n        this.content = this._content;\r\n    }\r\n\r\n    /**\r\n     * Apply the facade texture (created from the content property).\r\n     * This function can be overloaded by child classes\r\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {}\r\n}\r\n","import { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { ContentDisplay3D } from \"./contentDisplay3D\";\r\n\r\n/**\r\n * Class used as a root to all buttons\r\n */\r\nexport class AbstractButton3D extends ContentDisplay3D {\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"AbstractButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        return new TransformNode(\"button\" + this.name, scene);\r\n    }\r\n}\r\n","import { Vector4 } from \"core/Maths/math.vector\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport { AbstractButton3D } from \"./abstractButton3D\";\r\nimport type { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\n\r\n/**\r\n * Class used to create a button in 3D\r\n */\r\nexport class Button3D extends AbstractButton3D {\r\n    /** @internal */\r\n    protected _currentMaterial: Material;\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        // Default animations\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Red();\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Black();\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Apply the facade texture (created from the content property).\r\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\r\n     */\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        (<any>this._currentMaterial).emissiveTexture = facadeTexture;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        const faceUV = new Array(6);\r\n\r\n        for (let i = 0; i < 6; i++) {\r\n            faceUV[i] = new Vector4(0, 0, 0, 0);\r\n        }\r\n        if (scene.useRightHandedSystem) {\r\n            // Flip the u on the texture\r\n            faceUV[0].copyFromFloats(1, 0, 0, 1);\r\n        } else {\r\n            faceUV[1].copyFromFloats(0, 0, 1, 1);\r\n        }\r\n\r\n        const mesh = CreateBox(\r\n            this.name + \"_rootMesh\",\r\n            {\r\n                width: 1.0,\r\n                height: 1.0,\r\n                depth: 0.08,\r\n                faceUV: faceUV,\r\n                wrap: true,\r\n            },\r\n            scene\r\n        );\r\n\r\n        return mesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        const material = new StandardMaterial(this.name + \"Material\", mesh.getScene());\r\n        material.specularColor = Color3.Black();\r\n\r\n        mesh.material = material;\r\n        this._currentMaterial = material;\r\n\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._disposeFacadeTexture();\r\n\r\n        if (this._currentMaterial) {\r\n            this._currentMaterial.dispose();\r\n        }\r\n    }\r\n}\r\n","import type { Nullable } from \"core/types\";\r\nimport { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Class used to create containers for controls\r\n */\r\nexport class Container3D extends Control3D {\r\n    private _blockLayout = false;\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    protected _children = new Array<Control3D>();\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    public get children(): Array<Control3D> {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the layout must be blocked (default is false).\r\n     * This is helpful to optimize layout operation when adding multiple children in a row\r\n     */\r\n    public get blockLayout(): boolean {\r\n        return this._blockLayout;\r\n    }\r\n\r\n    public set blockLayout(value: boolean) {\r\n        if (this._blockLayout === value) {\r\n            return;\r\n        }\r\n\r\n        this._blockLayout = value;\r\n\r\n        if (!this._blockLayout) {\r\n            this._arrangeChildren();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new container\r\n     * @param name defines the container name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Force the container to update the layout. Please note that it will not take blockLayout property in account\r\n     * @returns the current container\r\n     */\r\n    public updateLayout(): Container3D {\r\n        this._arrangeChildren();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the children of this control\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the children of this control\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Control3D): Container3D {\r\n        const index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control.parent = this;\r\n        control._host = this._host;\r\n\r\n        this._children.push(control);\r\n\r\n        if (this._host.utilityLayer) {\r\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\r\n\r\n            if (control.node) {\r\n                control.node.parent = this.node;\r\n            }\r\n\r\n            if (!this.blockLayout) {\r\n                this._arrangeChildren();\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This function will be called everytime a new control is added\r\n     */\r\n    protected _arrangeChildren() {}\r\n\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        return new TransformNode(\"ContainerNode\", scene);\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the children of this control\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): Container3D {\r\n        const index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n            control._disposeNode();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container3D\";\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        for (const control of this._children) {\r\n            control.dispose();\r\n        }\r\n\r\n        this._children.length = 0;\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    /** Control rotation will remain unchanged  */\r\n    public static readonly UNSET_ORIENTATION = 0;\r\n\r\n    /** Control will rotate to make it look at sphere central axis */\r\n    public static readonly FACEORIGIN_ORIENTATION = 1;\r\n\r\n    /** Control will rotate to make it look back at sphere central axis */\r\n    public static readonly FACEORIGINREVERSED_ORIENTATION = 2;\r\n\r\n    /** Control will rotate to look at z axis (0, 0, 1) */\r\n    public static readonly FACEFORWARD_ORIENTATION = 3;\r\n\r\n    /** Control will rotate to look at negative z axis (0, 0, -1) */\r\n    public static readonly FACEFORWARDREVERSED_ORIENTATION = 4;\r\n}\r\n","import { Tools } from \"core/Misc/tools\";\r\nimport { Matrix, Vector3, TmpVectors } from \"core/Maths/math.vector\";\r\nimport type { int } from \"core/types\";\r\n\r\nimport { Container3D } from \"./container3D\";\r\nimport type { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Abstract class used to create a container panel deployed on the surface of a volume\r\n */\r\nexport abstract class VolumeBasedPanel extends Container3D {\r\n    private _columns = 10;\r\n    private _rows = 0;\r\n    private _rowThenColum = true;\r\n\r\n    private _orientation = Container3D.FACEORIGIN_ORIENTATION;\r\n\r\n    protected _cellWidth: number;\r\n    protected _cellHeight: number;\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0;\r\n\r\n    /**\r\n     * Gets or sets the orientation to apply to all controls (BABYLON.Container3D.FaceOriginReversedOrientation by default)\r\n     * | Value | Type                                | Description |\r\n     * | ----- | ----------------------------------- | ----------- |\r\n     * | 0     | UNSET_ORIENTATION                   |  Control rotation will remain unchanged |\r\n     * | 1     | FACEORIGIN_ORIENTATION              |  Control will rotate to make it look at sphere central axis |\r\n     * | 2     | FACEORIGINREVERSED_ORIENTATION      |  Control will rotate to make it look back at sphere central axis |\r\n     * | 3     | FACEFORWARD_ORIENTATION             |  Control will rotate to look at z axis (0, 0, 1) |\r\n     * | 4     | FACEFORWARDREVERSED_ORIENTATION     |  Control will rotate to look at negative z axis (0, 0, -1) |\r\n     */\r\n    public get orientation(): number {\r\n        return this._orientation;\r\n    }\r\n\r\n    public set orientation(value: number) {\r\n        if (this._orientation === value) {\r\n            return;\r\n        }\r\n\r\n        this._orientation = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the number of columns requested (10 by default).\r\n     * The panel will automatically compute the number of rows based on number of child controls.\r\n     */\r\n    public get columns(): int {\r\n        return this._columns;\r\n    }\r\n\r\n    public set columns(value: int) {\r\n        if (this._columns === value) {\r\n            return;\r\n        }\r\n\r\n        this._columns = value;\r\n        this._rowThenColum = true;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a the number of rows requested.\r\n     * The panel will automatically compute the number of columns based on number of child controls.\r\n     */\r\n    public get rows(): int {\r\n        return this._rows;\r\n    }\r\n\r\n    public set rows(value: int) {\r\n        if (this._rows === value) {\r\n            return;\r\n        }\r\n\r\n        this._rows = value;\r\n        this._rowThenColum = false;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates new VolumeBasedPanel\r\n     * @param name\r\n     */\r\n    public constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        this._cellWidth = 0;\r\n        this._cellHeight = 0;\r\n        let rows = 0;\r\n        let columns = 0;\r\n        let controlCount = 0;\r\n\r\n        const currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (const child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            //   child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            const boundingBox = child.mesh.getHierarchyBoundingVectors();\r\n            const extendSize = TmpVectors.Vector3[0];\r\n            const diff = TmpVectors.Vector3[1];\r\n\r\n            boundingBox.max.subtractToRef(boundingBox.min, diff);\r\n\r\n            diff.scaleInPlace(0.5);\r\n\r\n            Vector3.TransformNormalToRef(diff, currentInverseWorld, extendSize);\r\n\r\n            this._cellWidth = Math.max(this._cellWidth, extendSize.x * 2);\r\n            this._cellHeight = Math.max(this._cellHeight, extendSize.y * 2);\r\n        }\r\n\r\n        this._cellWidth += this.margin * 2;\r\n        this._cellHeight += this.margin * 2;\r\n\r\n        // Arrange\r\n        if (this._rowThenColum) {\r\n            columns = this._columns;\r\n            rows = Math.ceil(controlCount / this._columns);\r\n        } else {\r\n            rows = this._rows;\r\n            columns = Math.ceil(controlCount / this._rows);\r\n        }\r\n\r\n        const startOffsetX = columns * 0.5 * this._cellWidth;\r\n        const startOffsetY = rows * 0.5 * this._cellHeight;\r\n        const nodeGrid = [];\r\n        let cellCounter = 0;\r\n\r\n        if (this._rowThenColum) {\r\n            for (let r = 0; r < rows; r++) {\r\n                for (let c = 0; c < columns; c++) {\r\n                    nodeGrid.push(new Vector3(c * this._cellWidth - startOffsetX + this._cellWidth / 2, r * this._cellHeight - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (let c = 0; c < columns; c++) {\r\n                for (let r = 0; r < rows; r++) {\r\n                    nodeGrid.push(new Vector3(c * this._cellWidth - startOffsetX + this._cellWidth / 2, r * this._cellHeight - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        cellCounter = 0;\r\n        for (const child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            this._mapGridNode(child, nodeGrid[cellCounter]);\r\n\r\n            cellCounter++;\r\n        }\r\n\r\n        this._finalProcessing();\r\n    }\r\n\r\n    /** Child classes must implement this function to provide correct control positioning */\r\n    protected abstract _mapGridNode(control: Control3D, nodePosition: Vector3): void;\r\n\r\n    /** Child classes can implement this function to provide additional processing */\r\n    protected _finalProcessing() {}\r\n}\r\n","import { Tools } from \"core/Misc/tools\";\r\nimport { Matrix, TmpVectors, Vector3 } from \"core/Maths/math.vector\";\r\nimport type { float } from \"core/types\";\r\n\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport type { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\nimport { Axis, Space } from \"core/Maths/math.axis\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a cylinder\r\n */\r\nexport class CylinderPanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the cylinder where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        const mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n        const newPos = this._cylindricalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new Vector3(2 * newPos.x, newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(-newPos.x, newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(Axis.Y, Math.PI, Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _cylindricalMapping(source: Vector3) {\r\n        const newPos = new Vector3(0, source.y, this._radius);\r\n\r\n        const yAngle = source.x / this._radius;\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, 0, 0, TmpVectors.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, TmpVectors.Matrix[0]);\r\n    }\r\n}\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"fluentVertexShader\";\nconst shader = `precision highp float;\rattribute vec3 position;\rattribute vec3 normal;\rattribute vec2 uv;\runiform mat4 world;\runiform mat4 viewProjection;\rvarying vec2 vUV;\r#ifdef BORDER\nvarying vec2 scaleInfo;\runiform float borderWidth;\runiform vec3 scaleFactor;\r#endif\n#ifdef HOVERLIGHT\nvarying vec3 worldPosition;\r#endif\nvoid main(void) {\rvUV=uv;\r#ifdef BORDER\nvec3 scale=scaleFactor;\rfloat minScale=min(min(scale.x,scale.y),scale.z);\rfloat maxScale=max(max(scale.x,scale.y),scale.z);\rfloat minOverMiddleScale=minScale/(scale.x+scale.y+scale.z-minScale-maxScale);\rfloat areaYZ=scale.y*scale.z;\rfloat areaXZ=scale.x*scale.z;\rfloat areaXY=scale.x*scale.y;\rfloat scaledBorderWidth=borderWidth; \rif (abs(normal.x)==1.0) \r{\rscale.x=scale.y;\rscale.y=scale.z;\rif (areaYZ>areaXZ && areaYZ>areaXY)\r{\rscaledBorderWidth*=minOverMiddleScale;\r}\r}\relse if (abs(normal.y)==1.0) \r{\rscale.x=scale.z;\rif (areaXZ>areaXY && areaXZ>areaYZ)\r{\rscaledBorderWidth*=minOverMiddleScale;\r}\r}\relse \r{\rif (areaXY>areaYZ && areaXY>areaXZ)\r{\rscaledBorderWidth*=minOverMiddleScale;\r}\r}\rfloat scaleRatio=min(scale.x,scale.y)/max(scale.x,scale.y);\rif (scale.x>scale.y)\r{\rscaleInfo.x=1.0-(scaledBorderWidth*scaleRatio);\rscaleInfo.y=1.0-scaledBorderWidth;\r}\relse\r{\rscaleInfo.x=1.0-scaledBorderWidth;\rscaleInfo.y=1.0-(scaledBorderWidth*scaleRatio);\r} \r#endif \nvec4 worldPos=world*vec4(position,1.0);\r#ifdef HOVERLIGHT\nworldPosition=worldPos.xyz;\r#endif\ngl_Position=viewProjection*worldPos;\r}\r`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const fluentVertexShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"fluentPixelShader\";\nconst shader = `precision highp float;\rvarying vec2 vUV;\runiform vec4 albedoColor;\r#ifdef INNERGLOW\nuniform vec4 innerGlowColor;\r#endif\n#ifdef BORDER\nvarying vec2 scaleInfo;\runiform float edgeSmoothingValue;\runiform float borderMinValue;\r#endif\n#ifdef HOVERLIGHT\nvarying vec3 worldPosition;\runiform vec3 hoverPosition;\runiform vec4 hoverColor;\runiform float hoverRadius;\r#endif\n#ifdef TEXTURE\nuniform sampler2D albedoSampler;\runiform mat4 textureMatrix;\rvec2 finalUV;\r#endif\nvoid main(void) {\rvec3 albedo=albedoColor.rgb;\rfloat alpha=albedoColor.a;\r#ifdef TEXTURE\nfinalUV=vec2(textureMatrix*vec4(vUV,1.0,0.0));\ralbedo=texture2D(albedoSampler,finalUV).rgb;\r#endif\n#ifdef HOVERLIGHT\nfloat pointToHover=(1.0-clamp(length(hoverPosition-worldPosition)/hoverRadius,0.,1.))*hoverColor.a;\ralbedo=clamp(albedo+hoverColor.rgb*pointToHover,0.,1.);\r#else\nfloat pointToHover=1.0;\r#endif\n#ifdef BORDER \nfloat borderPower=10.0;\rfloat inverseBorderPower=1.0/borderPower;\rvec3 borderColor=albedo*borderPower;\rvec2 distanceToEdge;\rdistanceToEdge.x=abs(vUV.x-0.5)*2.0;\rdistanceToEdge.y=abs(vUV.y-0.5)*2.0;\rfloat borderValue=max(smoothstep(scaleInfo.x-edgeSmoothingValue,scaleInfo.x+edgeSmoothingValue,distanceToEdge.x),\rsmoothstep(scaleInfo.y-edgeSmoothingValue,scaleInfo.y+edgeSmoothingValue,distanceToEdge.y));\rborderColor=borderColor*borderValue*max(borderMinValue*inverseBorderPower,pointToHover); \ralbedo+=borderColor;\ralpha=max(alpha,borderValue);\r#endif\n#ifdef INNERGLOW\nvec2 uvGlow=(vUV-vec2(0.5,0.5))*(innerGlowColor.a*2.0);\ruvGlow=uvGlow*uvGlow;\ruvGlow=uvGlow*uvGlow;\ralbedo+=mix(vec3(0.0,0.0,0.0),innerGlowColor.rgb,uvGlow.x+uvGlow.y); \r#endif\ngl_FragColor=vec4(albedo,alpha);\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const fluentPixelShader = { name, shader };\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { serializeAsColor4, serializeAsVector3, serializeAsTexture, serialize, expandToProperty, serializeAsColor3, SerializationHelper } from \"core/Misc/decorators\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Vector3, TmpVectors } from \"core/Maths/math.vector\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { Color3, Color4 } from \"core/Maths/math.color\";\r\n\r\nimport \"./shaders/fluent.vertex\";\r\nimport \"./shaders/fluent.fragment\";\r\n\r\n/** @internal */\r\nexport class FluentMaterialDefines extends MaterialDefines {\r\n    public INNERGLOW = false;\r\n    public BORDER = false;\r\n    public HOVERLIGHT = false;\r\n    public TEXTURE = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render controls with fluent design\r\n */\r\nexport class FluentMaterial extends PushMaterial {\r\n    /**\r\n     * Gets or sets inner glow intensity. A value of 0 means no glow (default is 0.5)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public innerGlowColorIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the inner glow color (white by default)\r\n     */\r\n    @serializeAsColor3()\r\n    public innerGlowColor = new Color3(1.0, 1.0, 1.0);\r\n\r\n    /**\r\n     * Gets or sets the albedo color (Default is Color3(0.3, 0.35, 0.4))\r\n     */\r\n    @serializeAsColor3()\r\n    public albedoColor = new Color3(0.3, 0.35, 0.4);\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if borders must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderBorders = false;\r\n\r\n    /**\r\n     * Gets or sets border width (default is 0.5)\r\n     */\r\n    @serialize()\r\n    public borderWidth = 0.5;\r\n\r\n    /**\r\n     * Gets or sets a value indicating the smoothing value applied to border edges (0.02 by default)\r\n     */\r\n    @serialize()\r\n    public edgeSmoothingValue = 0.02;\r\n\r\n    /**\r\n     * Gets or sets the minimum value that can be applied to border width (default is 0.1)\r\n     */\r\n    @serialize()\r\n    public borderMinValue = 0.1;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if hover light must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderHoverLight = false;\r\n\r\n    /**\r\n     * Gets or sets the radius used to render the hover light (default is 0.01)\r\n     */\r\n    @serialize()\r\n    public hoverRadius = 0.01;\r\n\r\n    /**\r\n     * Gets or sets the color used to render the hover light (default is Color4(0.3, 0.3, 0.3, 1.0))\r\n     */\r\n    @serializeAsColor4()\r\n    public hoverColor = new Color4(0.3, 0.3, 0.3, 1.0);\r\n\r\n    /**\r\n     * Gets or sets the hover light position in world space (default is Vector3.Zero())\r\n     */\r\n    @serializeAsVector3()\r\n    public hoverPosition = Vector3.Zero();\r\n\r\n    @serializeAsTexture(\"albedoTexture\")\r\n    private _albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /** Gets or sets the texture to use for albedo color */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Creates a new Fluent material\r\n     * @param name defines the name of the material\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return this.alpha !== 1.0;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new FluentMaterialDefines();\r\n        }\r\n\r\n        const scene = this.getScene();\r\n        const defines = <FluentMaterialDefines>subMesh.materialDefines;\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (defines._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (defines._areTexturesDirty) {\r\n            defines.INNERGLOW = this.innerGlowColorIntensity > 0;\r\n            defines.BORDER = this.renderBorders;\r\n            defines.HOVERLIGHT = this.renderHoverLight;\r\n\r\n            if (this._albedoTexture) {\r\n                if (!this._albedoTexture.isReadyOrNotBlocking()) {\r\n                    return false;\r\n                } else {\r\n                    defines.TEXTURE = true;\r\n                }\r\n            } else {\r\n                defines.TEXTURE = false;\r\n            }\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n            attribs.push(VertexBuffer.NormalKind);\r\n            attribs.push(VertexBuffer.UVKind);\r\n\r\n            const shaderName = \"fluent\";\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"viewProjection\",\r\n                \"innerGlowColor\",\r\n                \"albedoColor\",\r\n                \"borderWidth\",\r\n                \"edgeSmoothingValue\",\r\n                \"scaleFactor\",\r\n                \"borderMinValue\",\r\n                \"hoverColor\",\r\n                \"hoverPosition\",\r\n                \"hoverRadius\",\r\n                \"textureMatrix\",\r\n            ];\r\n\r\n            const samplers = [\"albedoSampler\"];\r\n            const uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4,\r\n            });\r\n\r\n            const join = defines.toString();\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: null,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: 4 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines,\r\n                this._materialContext\r\n            );\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <FluentMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            this._activeEffect.setColor4(\"albedoColor\", this.albedoColor, this.alpha);\r\n\r\n            if (defines.INNERGLOW) {\r\n                this._activeEffect.setColor4(\"innerGlowColor\", this.innerGlowColor, this.innerGlowColorIntensity);\r\n            }\r\n\r\n            if (defines.BORDER) {\r\n                this._activeEffect.setFloat(\"borderWidth\", this.borderWidth);\r\n                this._activeEffect.setFloat(\"edgeSmoothingValue\", this.edgeSmoothingValue);\r\n                this._activeEffect.setFloat(\"borderMinValue\", this.borderMinValue);\r\n\r\n                mesh.getBoundingInfo().boundingBox.extendSize.multiplyToRef(mesh.scaling, TmpVectors.Vector3[0]);\r\n                this._activeEffect.setVector3(\"scaleFactor\", TmpVectors.Vector3[0]);\r\n            }\r\n\r\n            if (defines.HOVERLIGHT) {\r\n                this._activeEffect.setDirectColor4(\"hoverColor\", this.hoverColor);\r\n                this._activeEffect.setFloat(\"hoverRadius\", this.hoverRadius);\r\n                this._activeEffect.setVector3(\"hoverPosition\", this.hoverPosition);\r\n            }\r\n\r\n            if (defines.TEXTURE && this._albedoTexture) {\r\n                this._activeEffect.setTexture(\"albedoSampler\", this._albedoTexture);\r\n                const matrix = this._albedoTexture.getTextureMatrix();\r\n                this._activeEffect.setMatrix(\"textureMatrix\", matrix);\r\n            }\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        const activeTextures = super.getActiveTextures();\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): FluentMaterial {\r\n        return SerializationHelper.Clone(() => new FluentMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.GUI.FluentMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FluentMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FluentMaterial {\r\n        return SerializationHelper.Parse(() => new FluentMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.FluentMaterial\", FluentMaterial);\r\n","import type { Scene } from \"core/scene\";\r\nimport type { Vector3 } from \"core/Maths/math.vector\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Control3D } from \"./control3D\";\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { FluentMaterial } from \"../materials/fluent/fluentMaterial\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Logger } from \"core/Misc/logger\";\r\nimport type { Container3D } from \"./container3D\";\r\nimport type { TouchHolographicButton } from \"./touchHolographicButton\";\r\n\r\n/**\r\n * Simple menu that can contain holographic buttons\r\n */\r\nexport class TouchHolographicMenu extends VolumeBasedPanel {\r\n    protected _backPlate: Mesh;\r\n    private _backPlateMaterial: FluentMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n\r\n    private _currentMin: Nullable<Vector3>;\r\n    private _currentMax: Nullable<Vector3>;\r\n\r\n    private _backPlateMargin = 1.25;\r\n\r\n    /**\r\n     * Scale for the buttons added to the menu\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    protected static MENU_BUTTON_SCALE: number = 1;\r\n\r\n    /**\r\n     * Gets or sets the margin size of the backplate in button size units.\r\n     * Setting this to 1, will make the backPlate margin the size of 1 button\r\n     */\r\n    public get backPlateMargin(): number {\r\n        return this._backPlateMargin;\r\n    }\r\n\r\n    public set backPlateMargin(value: number) {\r\n        this._backPlateMargin = value;\r\n\r\n        if (this._children.length >= 1) {\r\n            this.children.forEach((control) => {\r\n                this._updateCurrentMinMax(control.position);\r\n            });\r\n\r\n            this._updateMargins();\r\n        }\r\n    }\r\n\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        const node = new Mesh(`menu_${this.name}`, scene);\r\n\r\n        this._backPlate = CreateBox(\"backPlate\" + this.name, { size: 1 }, scene);\r\n        this._backPlate.parent = node;\r\n\r\n        return node;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        this._backPlateMaterial = new FluentMaterial(this.name + \"backPlateMaterial\", mesh.getScene());\r\n        this._backPlateMaterial.albedoColor = new Color3(0.08, 0.15, 0.55);\r\n        this._backPlateMaterial.renderBorders = true;\r\n        this._backPlateMaterial.renderHoverLight = true;\r\n\r\n        this._pickedPointObserver = this._host.onPickedPointChangedObservable.add((pickedPoint) => {\r\n            if (pickedPoint) {\r\n                this._backPlateMaterial.hoverPosition = pickedPoint;\r\n                this._backPlateMaterial.hoverColor.a = 1.0;\r\n            } else {\r\n                this._backPlateMaterial.hoverColor.a = 0;\r\n            }\r\n        });\r\n\r\n        this._backPlate.material = this._backPlateMaterial;\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        // Simple plane mapping for the menu\r\n        const mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        control.position = nodePosition.clone();\r\n\r\n        this._updateCurrentMinMax(nodePosition);\r\n    }\r\n\r\n    protected _finalProcessing() {\r\n        this._updateMargins();\r\n    }\r\n\r\n    private _updateCurrentMinMax(nodePosition: Vector3) {\r\n        if (!this._currentMin) {\r\n            this._currentMin = nodePosition.clone();\r\n            this._currentMax = nodePosition.clone();\r\n        }\r\n\r\n        this._currentMin.minimizeInPlace(nodePosition);\r\n        this._currentMax!.maximizeInPlace(nodePosition);\r\n    }\r\n\r\n    private _updateMargins() {\r\n        if (this._children.length > 0) {\r\n            this._currentMin!.addInPlaceFromFloats(-this._cellWidth / 2, -this._cellHeight / 2, 0);\r\n            this._currentMax!.addInPlaceFromFloats(this._cellWidth / 2, this._cellHeight / 2, 0);\r\n            const extendSize = this._currentMax!.subtract(this._currentMin!);\r\n\r\n            // Also add a % margin\r\n            this._backPlate.scaling.x = extendSize.x + this._cellWidth * this.backPlateMargin;\r\n            this._backPlate.scaling.y = extendSize.y + this._cellHeight * this.backPlateMargin;\r\n            this._backPlate.scaling.z = 0.001;\r\n\r\n            for (let i = 0; i < this._children.length; i++) {\r\n                this._children[i].position.subtractInPlace(this._currentMin!).subtractInPlace(extendSize.scale(0.5));\r\n                this._children[i].position.z -= 0.01;\r\n            }\r\n        }\r\n\r\n        this._currentMin = null;\r\n        this._currentMax = null;\r\n    }\r\n\r\n    /**\r\n     * Creates a holographic menu GUI 3D control\r\n     * @param name name of the menu\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Adds a button to the menu.\r\n     * Please note that the back material of the button will be set to transparent as it is attached to the menu.\r\n     *\r\n     * @param button Button to add\r\n     * @returns This menu\r\n     */\r\n    public addButton(button: TouchHolographicButton): TouchHolographicMenu {\r\n        // Block updating the layout until the button is resized (which has to happen after node creation)\r\n        const wasLayoutBlocked = this.blockLayout;\r\n        if (!wasLayoutBlocked) {\r\n            this.blockLayout = true;\r\n        }\r\n\r\n        super.addControl(button);\r\n\r\n        button.isBackplateVisible = false;\r\n        button.scaling.scaleInPlace(TouchHolographicMenu.MENU_BUTTON_SCALE);\r\n\r\n        // Unblocking the layout triggers the pending layout update that uses the size of the buttons to determine the size of the backing mesh\r\n        if (!wasLayoutBlocked) {\r\n            this.blockLayout = false;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This method should not be used directly. It is inherited from `Container3D`.\r\n     * Please use `addButton` instead.\r\n     * @param _control\r\n     * @returns\r\n     */\r\n    public addControl(_control: Control3D): Container3D {\r\n        Logger.Warn(\"TouchHolographicMenu can only contain buttons. Please use the method `addButton` instead.\");\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Disposes the menu\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n    }\r\n}\r\n","import type { Scene } from \"core/scene\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport { TouchHolographicMenu } from \"./touchHolographicMenu\";\r\nimport { HandConstraintBehavior } from \"core/Behaviors/Meshes/handConstraintBehavior\";\r\nimport type { WebXRExperienceHelper } from \"core/XR/webXRExperienceHelper\";\r\n\r\n/**\r\n * Hand menu that displays buttons and floats around the hand.\r\n * @since 5.0.0\r\n */\r\nexport class HandMenu extends TouchHolographicMenu {\r\n    private _handConstraintBehavior: HandConstraintBehavior;\r\n\r\n    /**\r\n     * The hand constraint behavior setting the transformation of this node\r\n     */\r\n    public get handConstraintBehavior() {\r\n        return this._handConstraintBehavior;\r\n    }\r\n\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        const node = super._createNode(scene)! as Mesh;\r\n\r\n        this._handConstraintBehavior.attach(node);\r\n\r\n        return node;\r\n    }\r\n\r\n    /**\r\n     * Creates a hand menu GUI 3D control\r\n     * @param xr the WebXRExperienceHelper used to link this control to the enabled WebXRHandTracking feature\r\n     * @param name name of the hand menu\r\n     */\r\n    constructor(xr: WebXRExperienceHelper, name?: string) {\r\n        super(name);\r\n\r\n        this._handConstraintBehavior = new HandConstraintBehavior();\r\n        this._handConstraintBehavior.linkToXRExperience(xr);\r\n        this.backPlateMargin = 0.15;\r\n        this.rows = 3;\r\n    }\r\n\r\n    /**\r\n     * Disposes the hand menu\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._handConstraintBehavior.detach();\r\n    }\r\n}\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"fluentBackplatePixelShader\";\nconst shader = `uniform vec3 cameraPosition;\rvarying vec3 vPosition;\rvarying vec3 vNormal;\rvarying vec2 vUV;\rvarying vec3 vTangent;\rvarying vec3 vBinormal;\rvarying vec4 vColor;\rvarying vec4 vExtra1;\rvarying vec4 vExtra2;\rvarying vec4 vExtra3;\runiform float _Radius_;\runiform float _Line_Width_;\runiform bool _Absolute_Sizes_;\runiform float _Filter_Width_;\runiform vec4 _Base_Color_;\runiform vec4 _Line_Color_;\runiform float _Radius_Top_Left_;\runiform float _Radius_Top_Right_;\runiform float _Radius_Bottom_Left_;\runiform float _Radius_Bottom_Right_;\runiform vec3 _Blob_Position_;\runiform float _Blob_Intensity_;\runiform float _Blob_Near_Size_;\runiform float _Blob_Far_Size_;\runiform float _Blob_Near_Distance_;\runiform float _Blob_Far_Distance_;\runiform float _Blob_Fade_Length_;\runiform float _Blob_Pulse_;\runiform float _Blob_Fade_;\runiform sampler2D _Blob_Texture_;\runiform vec3 _Blob_Position_2_;\runiform float _Blob_Near_Size_2_;\runiform float _Blob_Pulse_2_;\runiform float _Blob_Fade_2_;\runiform float _Rate_;\runiform vec4 _Highlight_Color_;\runiform float _Highlight_Width_;\runiform vec4 _Highlight_Transform_;\runiform float _Highlight_;\runiform float _Iridescence_Intensity_;\runiform float _Iridescence_Edge_Intensity_;\runiform float _Angle_;\runiform float _Fade_Out_;\runiform bool _Reflected_;\runiform float _Frequency_;\runiform float _Vertical_Offset_;\runiform sampler2D _Iridescent_Map_;\runiform bool _Use_Global_Left_Index_;\runiform bool _Use_Global_Right_Index_;\runiform vec4 Global_Left_Index_Tip_Position;\runiform vec4 Global_Right_Index_Tip_Position;\rvoid Round_Rect_Fragment_B31(\rfloat Radius,\rfloat Line_Width,\rvec4 Line_Color,\rfloat Filter_Width,\rvec2 UV,\rfloat Line_Visibility,\rvec4 Rect_Parms,\rvec4 Fill_Color,\rout vec4 Color)\r{\rfloat d=length(max(abs(UV)-Rect_Parms.xy,0.0));\rfloat dx=max(fwidth(d)*Filter_Width,0.00001);\rfloat g=min(Rect_Parms.z,Rect_Parms.w);\rfloat dgrad=max(fwidth(g)*Filter_Width,0.00001);\rfloat Inside_Rect=clamp(g/dgrad,0.0,1.0);\rfloat inner=clamp((d+dx*0.5-max(Radius-Line_Width,d-dx*0.5))/dx,0.0,1.0);\rColor=clamp(mix(Fill_Color,Line_Color,inner),0.0,1.0)*Inside_Rect;\r}\rvoid Blob_Fragment_B71(\rsampler2D Blob_Texture,\rvec4 Blob_Info1,\rvec4 Blob_Info2,\rout vec4 Blob_Color)\r{\rfloat k1=dot(Blob_Info1.xy,Blob_Info1.xy);\rfloat k2=dot(Blob_Info2.xy,Blob_Info2.xy);\rvec3 closer=k1<k2 ? vec3(k1,Blob_Info1.z,Blob_Info1.w) : vec3(k2,Blob_Info2.z,Blob_Info2.w);\rBlob_Color=closer.z*texture(Blob_Texture,vec2(vec2(sqrt(closer.x),closer.y).x,1.0-vec2(sqrt(closer.x),closer.y).y))*clamp(1.0-closer.x,0.0,1.0);\r}\rvoid Line_Fragment_B48(\rvec4 Base_Color,\rvec4 Highlight_Color,\rfloat Highlight_Width,\rvec3 Line_Vertex,\rfloat Highlight,\rout vec4 Line_Color)\r{\rfloat k2=1.0-clamp(abs(Line_Vertex.y/Highlight_Width),0.0,1.0);\rLine_Color=mix(Base_Color,Highlight_Color,Highlight*k2);\r}\rvoid Scale_RGB_B54(\rvec4 Color,\rfloat Scalar,\rout vec4 Result)\r{\rResult=vec4(Scalar,Scalar,Scalar,1)*Color;\r}\rvoid Conditional_Float_B38(\rbool Which,\rfloat If_True,\rfloat If_False,\rout float Result)\r{\rResult=Which ? If_True : If_False;\r}\rvoid main()\r{\rfloat R_Q72;\rfloat G_Q72;\rfloat B_Q72;\rfloat A_Q72;\rR_Q72=vColor.r; G_Q72=vColor.g; B_Q72=vColor.b; A_Q72=vColor.a;\rvec4 Blob_Color_Q71;\r#if BLOB_ENABLE\nfloat k1=dot(vExtra2.xy,vExtra2.xy);\rfloat k2=dot(vExtra3.xy,vExtra3.xy);\rvec3 closer=k1<k2 ? vec3(k1,vExtra2.z,vExtra2.w) : vec3(k2,vExtra3.z,vExtra3.w);\rBlob_Color_Q71=closer.z*texture(_Blob_Texture_,vec2(vec2(sqrt(closer.x),closer.y).x,1.0-vec2(sqrt(closer.x),closer.y).y))*clamp(1.0-closer.x,0.0,1.0);\r#else\nBlob_Color_Q71=vec4(0,0,0,0);\r#endif\nvec4 Line_Color_Q48;\rLine_Fragment_B48(_Line_Color_,_Highlight_Color_,_Highlight_Width_,vTangent,_Highlight_,Line_Color_Q48);\rfloat X_Q67;\rfloat Y_Q67;\rX_Q67=vUV.x;\rY_Q67=vUV.y;\rvec3 Incident_Q66=normalize(vPosition-cameraPosition);\rvec3 Reflected_Q60=reflect(Incident_Q66,vBinormal);\rfloat Product_Q63=Y_Q67*_Vertical_Offset_;\rfloat Dot_Q68=dot(Incident_Q66, Reflected_Q60);\rfloat Dot_Q57=dot(vNormal, Incident_Q66);\rfloat Result_Q38;\rConditional_Float_B38(_Reflected_,Dot_Q68,Dot_Q57,Result_Q38);\rfloat Product_Q64=Result_Q38*_Frequency_;\rfloat Sum_Q69=Product_Q64+1.0;\rfloat Product_Q70=Sum_Q69*0.5;\rfloat Sum_Q62=Product_Q63+Product_Q70;\rfloat FractF_Q59=fract(Sum_Q62);\rvec2 Vec2_Q65=vec2(FractF_Q59,0.5);\rvec4 Color_Q58;\r#if IRIDESCENT_MAP_ENABLE\nColor_Q58=texture(_Iridescent_Map_,Vec2_Q65);\r#else\nColor_Q58=vec4(0,0,0,0);\r#endif\nvec4 Result_Q54;\rScale_RGB_B54(Color_Q58,_Iridescence_Edge_Intensity_,Result_Q54);\rvec4 Result_Q55;\rScale_RGB_B54(Color_Q58,_Iridescence_Intensity_,Result_Q55);\rvec4 Base_And_Iridescent_Q53;\rBase_And_Iridescent_Q53=Line_Color_Q48+vec4(Result_Q54.rgb,0.0);\rvec4 Base_And_Iridescent_Q56;\rBase_And_Iridescent_Q56=_Base_Color_+vec4(Result_Q55.rgb,0.0);\rvec4 Result_Q52=Base_And_Iridescent_Q53; Result_Q52.a=1.0;\rvec4 Result_Q35=Blob_Color_Q71+(1.0-Blob_Color_Q71.a)*Base_And_Iridescent_Q56;\rvec4 Color_Q31;\rRound_Rect_Fragment_B31(R_Q72,G_Q72,Result_Q52,_Filter_Width_,vUV,1.0,vExtra1,Result_Q35,Color_Q31);\rvec4 Result_Q47=_Fade_Out_*Color_Q31;\rvec4 Out_Color=Result_Q47;\rfloat Clip_Threshold=0.001;\rbool To_sRGB=false;\rgl_FragColor=Out_Color;\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const fluentBackplatePixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"fluentBackplateVertexShader\";\nconst shader = `uniform mat4 world;\runiform mat4 viewProjection;\runiform vec3 cameraPosition;\rattribute vec3 position;\rattribute vec3 normal;\r#ifdef TANGENT\nattribute vec3 tangent;\r#else\nconst vec3 tangent=vec3(0.);\r#endif\nuniform float _Radius_;\runiform float _Line_Width_;\runiform bool _Absolute_Sizes_;\runiform float _Filter_Width_;\runiform vec4 _Base_Color_;\runiform vec4 _Line_Color_;\runiform float _Radius_Top_Left_;\runiform float _Radius_Top_Right_;\runiform float _Radius_Bottom_Left_;\runiform float _Radius_Bottom_Right_;\runiform vec3 _Blob_Position_;\runiform float _Blob_Intensity_;\runiform float _Blob_Near_Size_;\runiform float _Blob_Far_Size_;\runiform float _Blob_Near_Distance_;\runiform float _Blob_Far_Distance_;\runiform float _Blob_Fade_Length_;\runiform float _Blob_Pulse_;\runiform float _Blob_Fade_;\runiform sampler2D _Blob_Texture_;\runiform vec3 _Blob_Position_2_;\runiform float _Blob_Near_Size_2_;\runiform float _Blob_Pulse_2_;\runiform float _Blob_Fade_2_;\runiform float _Rate_;\runiform vec4 _Highlight_Color_;\runiform float _Highlight_Width_;\runiform vec4 _Highlight_Transform_;\runiform float _Highlight_;\runiform float _Iridescence_Intensity_;\runiform float _Iridescence_Edge_Intensity_;\runiform float _Angle_;\runiform float _Fade_Out_;\runiform bool _Reflected_;\runiform float _Frequency_;\runiform float _Vertical_Offset_;\runiform sampler2D _Iridescent_Map_;\runiform bool _Use_Global_Left_Index_;\runiform bool _Use_Global_Right_Index_;\runiform vec4 Global_Left_Index_Tip_Position;\runiform vec4 Global_Right_Index_Tip_Position;\rvarying vec3 vPosition;\rvarying vec3 vNormal;\rvarying vec2 vUV;\rvarying vec3 vTangent;\rvarying vec3 vBinormal;\rvarying vec4 vColor;\rvarying vec4 vExtra1;\rvarying vec4 vExtra2;\rvarying vec4 vExtra3;\rvoid Object_To_World_Pos_B115(\rvec3 Pos_Object,\rout vec3 Pos_World)\r{\rPos_World=(world*vec4(Pos_Object,1.0)).xyz;\r}\rvoid PickDir_B140(\rfloat Degrees,\rvec3 DirX,\rvec3 DirY,\rout vec3 Dir)\r{\rfloat a=Degrees*3.14159/180.0;\rDir=cos(a)*DirX+sin(a)*DirY;\r}\rvoid Round_Rect_Vertex_B139(\rvec2 UV,\rfloat Radius,\rfloat Margin,\rfloat Anisotropy,\rfloat Gradient1,\rfloat Gradient2,\rout vec2 Rect_UV,\rout vec4 Rect_Parms,\rout vec2 Scale_XY,\rout vec2 Line_UV)\r{\rScale_XY=vec2(Anisotropy,1.0);\rLine_UV=(UV-vec2(0.5,0.5));\rRect_UV=Line_UV*Scale_XY;\rRect_Parms.xy=Scale_XY*0.5-vec2(Radius,Radius)-vec2(Margin,Margin);\rRect_Parms.z=Gradient1; \rRect_Parms.w=Gradient2;\r}\rvoid Line_Vertex_B135(\rvec2 Scale_XY,\rvec2 UV,\rfloat Time,\rfloat Rate,\rvec4 Highlight_Transform,\rout vec3 Line_Vertex)\r{\rfloat angle2=(Rate*Time)*2.0*3.1416;\rfloat sinAngle2=sin(angle2);\rfloat cosAngle2=cos(angle2);\rvec2 xformUV=UV*Highlight_Transform.xy+Highlight_Transform.zw;\rLine_Vertex.x=0.0;\rLine_Vertex.y=cosAngle2*xformUV.x-sinAngle2*xformUV.y;\rLine_Vertex.z=0.0; \r}\rvoid Blob_Vertex_B180(\rvec3 Position,\rvec3 Normal,\rvec3 Tangent,\rvec3 Bitangent,\rvec3 Blob_Position,\rfloat Intensity,\rfloat Blob_Near_Size,\rfloat Blob_Far_Size,\rfloat Blob_Near_Distance,\rfloat Blob_Far_Distance,\rfloat Blob_Fade_Length,\rfloat Blob_Pulse,\rfloat Blob_Fade,\rout vec4 Blob_Info)\r{\rvec3 blob=Blob_Position;\rvec3 delta=blob-Position;\rfloat dist=dot(Normal,delta);\rfloat lerpValue=clamp((abs(dist)-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);\rfloat fadeValue=1.0-clamp((abs(dist)-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);\rfloat size=Blob_Near_Size+(Blob_Far_Size-Blob_Near_Size)*lerpValue;\rvec2 blobXY=vec2(dot(delta,Tangent),dot(delta,Bitangent))/(0.0001+size);\rfloat Fade=fadeValue*Intensity*Blob_Fade;\rfloat Distance=(lerpValue*0.5+0.5)*(1.0-Blob_Pulse);\rBlob_Info=vec4(blobXY.x,blobXY.y,Distance,Fade);\r}\rvoid Move_Verts_B129(\rfloat Anisotropy,\rvec3 P,\rfloat Radius,\rout vec3 New_P,\rout vec2 New_UV,\rout float Radial_Gradient,\rout vec3 Radial_Dir)\r{\rvec2 UV=P.xy*2.0+0.5;\rvec2 center=clamp(UV,0.0,1.0);\rvec2 delta=UV-center;\rvec2 r2=2.0*vec2(Radius/Anisotropy,Radius);\rNew_UV=center+r2*(UV-2.0*center+0.5);\rNew_P=vec3(New_UV-0.5,P.z);\rRadial_Gradient=1.0-length(delta)*2.0;\rRadial_Dir=vec3(delta*r2,0.0);\r}\rvoid Object_To_World_Dir_B132(\rvec3 Dir_Object,\rout vec3 Binormal_World,\rout vec3 Binormal_World_N,\rout float Binormal_Length)\r{\rBinormal_World=(world*vec4(Dir_Object,0.0)).xyz;\rBinormal_Length=length(Binormal_World);\rBinormal_World_N=Binormal_World/Binormal_Length;\r}\rvoid RelativeOrAbsoluteDetail_B147(\rfloat Nominal_Radius,\rfloat Nominal_LineWidth,\rbool Absolute_Measurements,\rfloat Height,\rout float Radius,\rout float Line_Width)\r{\rfloat scale=Absolute_Measurements ? 1.0/Height : 1.0;\rRadius=Nominal_Radius*scale;\rLine_Width=Nominal_LineWidth*scale;\r}\rvoid Edge_AA_Vertex_B130(\rvec3 Position_World,\rvec3 Position_Object,\rvec3 Normal_Object,\rvec3 Eye,\rfloat Radial_Gradient,\rvec3 Radial_Dir,\rvec3 Tangent,\rout float Gradient1,\rout float Gradient2)\r{\rvec3 I=(Eye-Position_World);\rvec3 T=(world* vec4(Tangent,0.0)).xyz;\rfloat g=(dot(T,I)<0.0) ? 0.0 : 1.0;\rif (Normal_Object.z==0.0) { \rGradient1=Position_Object.z>0.0 ? g : 1.0;\rGradient2=Position_Object.z>0.0 ? 1.0 : g;\r} else {\rGradient1=g+(1.0-g)*(Radial_Gradient);\rGradient2=1.0;\r}\r}\rvoid Pick_Radius_B144(\rfloat Radius,\rfloat Radius_Top_Left,\rfloat Radius_Top_Right,\rfloat Radius_Bottom_Left,\rfloat Radius_Bottom_Right,\rvec3 Position,\rout float Result)\r{\rbool whichY=Position.y>0.0;\rResult=Position.x<0.0 ? (whichY ? Radius_Top_Left : Radius_Bottom_Left) : (whichY ? Radius_Top_Right : Radius_Bottom_Right);\rResult*=Radius;\r}\rvoid main()\r{\rvec3 Nrm_World_Q128;\rNrm_World_Q128=normalize((world*vec4(normal,0.0)).xyz);\rvec3 Tangent_World_Q131;\rvec3 Tangent_World_N_Q131;\rfloat Tangent_Length_Q131;\rTangent_World_Q131=(world*vec4(vec3(1,0,0),0.0)).xyz;\rTangent_Length_Q131=length(Tangent_World_Q131);\rTangent_World_N_Q131=Tangent_World_Q131/Tangent_Length_Q131;\rvec3 Binormal_World_Q132;\rvec3 Binormal_World_N_Q132;\rfloat Binormal_Length_Q132;\rObject_To_World_Dir_B132(vec3(0,1,0),Binormal_World_Q132,Binormal_World_N_Q132,Binormal_Length_Q132);\rfloat Anisotropy_Q133=Tangent_Length_Q131/Binormal_Length_Q132;\rvec3 Result_Q177;\rResult_Q177=mix(_Blob_Position_,Global_Left_Index_Tip_Position.xyz,float(_Use_Global_Left_Index_));\rvec3 Result_Q178;\rResult_Q178=mix(_Blob_Position_2_,Global_Right_Index_Tip_Position.xyz,float(_Use_Global_Right_Index_));\rfloat Result_Q144;\rPick_Radius_B144(_Radius_,_Radius_Top_Left_,_Radius_Top_Right_,_Radius_Bottom_Left_,_Radius_Bottom_Right_,position,Result_Q144);\rvec3 Dir_Q140;\rPickDir_B140(_Angle_,Tangent_World_N_Q131,Binormal_World_N_Q132,Dir_Q140);\rfloat Radius_Q147;\rfloat Line_Width_Q147;\rRelativeOrAbsoluteDetail_B147(Result_Q144,_Line_Width_,_Absolute_Sizes_,Binormal_Length_Q132,Radius_Q147,Line_Width_Q147);\rvec4 Out_Color_Q145=vec4(Radius_Q147,Line_Width_Q147,0,1);\rvec3 New_P_Q129;\rvec2 New_UV_Q129;\rfloat Radial_Gradient_Q129;\rvec3 Radial_Dir_Q129;\rMove_Verts_B129(Anisotropy_Q133,position,Radius_Q147,New_P_Q129,New_UV_Q129,Radial_Gradient_Q129,Radial_Dir_Q129);\rvec3 Pos_World_Q115;\rObject_To_World_Pos_B115(New_P_Q129,Pos_World_Q115);\rvec4 Blob_Info_Q180;\r#if BLOB_ENABLE\nBlob_Vertex_B180(Pos_World_Q115,Nrm_World_Q128,Tangent_World_N_Q131,Binormal_World_N_Q132,Result_Q177,_Blob_Intensity_,_Blob_Near_Size_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_,_Blob_Fade_,Blob_Info_Q180);\r#else\nBlob_Info_Q180=vec4(0,0,0,0);\r#endif\nvec4 Blob_Info_Q181;\r#if BLOB_ENABLE_2\nBlob_Vertex_B180(Pos_World_Q115,Nrm_World_Q128,Tangent_World_N_Q131,Binormal_World_N_Q132,Result_Q178,_Blob_Intensity_,_Blob_Near_Size_2_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_2_,_Blob_Fade_2_,Blob_Info_Q181);\r#else\nBlob_Info_Q181=vec4(0,0,0,0);\r#endif\nfloat Gradient1_Q130;\rfloat Gradient2_Q130;\r#if SMOOTH_EDGES\nEdge_AA_Vertex_B130(Pos_World_Q115,position,normal,cameraPosition,Radial_Gradient_Q129,Radial_Dir_Q129,tangent,Gradient1_Q130,Gradient2_Q130);\r#else\nGradient1_Q130=1.0;\rGradient2_Q130=1.0;\r#endif\nvec2 Rect_UV_Q139;\rvec4 Rect_Parms_Q139;\rvec2 Scale_XY_Q139;\rvec2 Line_UV_Q139;\rRound_Rect_Vertex_B139(New_UV_Q129,Radius_Q147,0.0,Anisotropy_Q133,Gradient1_Q130,Gradient2_Q130,Rect_UV_Q139,Rect_Parms_Q139,Scale_XY_Q139,Line_UV_Q139);\rvec3 Line_Vertex_Q135;\rLine_Vertex_B135(Scale_XY_Q139,Line_UV_Q139,0.0,_Rate_,_Highlight_Transform_,Line_Vertex_Q135);\rvec3 Position=Pos_World_Q115;\rvec3 Normal=Dir_Q140;\rvec2 UV=Rect_UV_Q139;\rvec3 Tangent=Line_Vertex_Q135;\rvec3 Binormal=Nrm_World_Q128;\rvec4 Color=Out_Color_Q145;\rvec4 Extra1=Rect_Parms_Q139;\rvec4 Extra2=Blob_Info_Q180;\rvec4 Extra3=Blob_Info_Q181;\rgl_Position=viewProjection*vec4(Position,1);\rvPosition=Position;\rvNormal=Normal;\rvUV=UV;\rvTangent=Tangent;\rvBinormal=Binormal;\rvColor=Color;\rvExtra1=Extra1;\rvExtra2=Extra2;\rvExtra3=Extra3;\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const fluentBackplateVertexShader = { name, shader };\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { SerializationHelper, serialize, serializeAsVector3 } from \"core/Misc/decorators\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Vector3, Vector4 } from \"core/Maths/math.vector\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { Color4 } from \"core/Maths/math.color\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { Constants } from \"core/Engines/constants\";\r\n\r\nimport \"./shaders/fluentBackplate.fragment\";\r\nimport \"./shaders/fluentBackplate.vertex\";\r\n\r\n/** @internal */\r\nclass FluentBackplateMaterialDefines extends MaterialDefines {\r\n    public BLOB_ENABLE = true;\r\n    public BLOB_ENABLE_2 = true;\r\n    public SMOOTH_EDGES = true;\r\n    public IRIDESCENT_MAP_ENABLE = true;\r\n\r\n    constructor() {\r\n        super();\r\n        this._needNormals = true;\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render square buttons with fluent design\r\n */\r\nexport class FluentBackplateMaterial extends PushMaterial {\r\n    /**\r\n     * URL pointing to the texture used to define the coloring for the fluent blob effect.\r\n     */\r\n    public static BLOB_TEXTURE_URL = \"https://assets.babylonjs.com/meshes/MRTK/mrtk-fluent-backplate-blob.png\";\r\n\r\n    /**\r\n     * URL pointing to the texture used to define iridescent map.\r\n     */\r\n    public static IM_TEXTURE_URL = \"https://assets.babylonjs.com/meshes/MRTK/mrtk-fluent-backplate-iridescence.png\";\r\n\r\n    private _blobTexture: Texture;\r\n    private _iridescentMap: Texture;\r\n\r\n    /**\r\n     * Gets or sets the corner radius on the backplate. Best to keep this value between 0.01 and 0.5. Default is 0.03.\r\n     */\r\n    @serialize()\r\n    public radius = 0.03;\r\n\r\n    /**\r\n     * Gets or sets the line width of the backplate.\r\n     */\r\n    @serialize()\r\n    public lineWidth = 0.01;\r\n\r\n    /**\r\n     * Gets or sets whether to use absolute sizes when calculating effects on the backplate.\r\n     * Since desktop and VR/AR have different relative sizes, it's usually best to keep this false.\r\n     */\r\n    @serialize()\r\n    public absoluteSizes = false;\r\n\r\n    /** @internal */\r\n    public _filterWidth = 1;\r\n\r\n    /**\r\n     * Gets or sets the base color of the backplate.\r\n     */\r\n    @serialize()\r\n    public baseColor = new Color4(0.0392157, 0.0666667, 0.207843, 1);\r\n\r\n    /**\r\n     * Gets or sets the line color of the backplate.\r\n     */\r\n    @serialize()\r\n    public lineColor = new Color4(0.14902, 0.133333, 0.384314, 1);\r\n\r\n    /**\r\n     * Gets or sets the intensity of the fluent hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobIntensity = 0.98;\r\n\r\n    /**\r\n     * Gets or sets the far size of the fluent hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobFarSize = 0.04;\r\n\r\n    /**\r\n     * Gets or sets the distance considered \"near\" to the backplate, which controls the size of the fluent hover glow effect (see blobNearSize).\r\n     */\r\n    @serialize()\r\n    public blobNearDistance = 0;\r\n\r\n    /**\r\n     * Gets or sets the distance considered \"far\" from the backplate, which controls the size of the fluent hover glow effect (see blobFarSize).\r\n     */\r\n    @serialize()\r\n    public blobFarDistance = 0.08;\r\n\r\n    /**\r\n     * Gets or sets the length of the fluent hover glow effect fade.\r\n     */\r\n    @serialize()\r\n    public blobFadeLength = 0.08;\r\n\r\n    /**\r\n     * Gets or sets the size of the fluent hover glow effect when the left pointer is considered \"near\" to the backplate (see blobNearDistance).\r\n     */\r\n    @serialize()\r\n    public blobNearSize = 0.22;\r\n\r\n    /**\r\n     * Gets or sets the progress of the fluent hover glow effect selection animation corresponding to the left pointer (0.0 - 1.0).\r\n     */\r\n    @serialize()\r\n    public blobPulse = 0;\r\n\r\n    /**\r\n     * Gets or sets the opacity of the fluent hover glow effect corresponding to the left pointer (0.0 - 1.0). Default is 0.\r\n     */\r\n    @serialize()\r\n    public blobFade = 0;\r\n\r\n    /**\r\n     * Gets or sets the size of the fluent hover glow effect when the right pointer is considered \"near\" to the backplate (see blobNearDistance).\r\n     */\r\n    @serialize()\r\n    public blobNearSize2 = 0.22;\r\n\r\n    /**\r\n     * Gets or sets the progress of the fluent hover glow effect selection animation corresponding to the right pointer (0.0 - 1.0).\r\n     */\r\n    @serialize()\r\n    public blobPulse2 = 0;\r\n\r\n    /**\r\n     * Gets or sets the opacity of the fluent hover glow effect corresponding to the right pointer (0.0 - 1.0). Default is 0.\r\n     */\r\n    @serialize()\r\n    public blobFade2 = 0;\r\n\r\n    /** @internal */\r\n    public _rate = 0.135;\r\n\r\n    /**\r\n     * Gets or sets the color of the highlights on the backplate line.\r\n     */\r\n    @serialize()\r\n    public highlightColor = new Color4(0.98, 0.98, 0.98, 1);\r\n\r\n    /**\r\n     * Gets or sets the width of the highlights on the backplate line.\r\n     */\r\n    @serialize()\r\n    public highlightWidth = 0.25;\r\n\r\n    /** @internal */\r\n    public _highlightTransform = new Vector4(1, 1, 0, 0);\r\n\r\n    /** @internal */\r\n    public _highlight = 1;\r\n\r\n    /**\r\n     * Gets or sets the intensity of the iridescence effect.\r\n     */\r\n    @serialize()\r\n    public iridescenceIntensity = 0;\r\n\r\n    /**\r\n     * Gets or sets the intensity of the iridescence effect on the backplate edges.\r\n     */\r\n    @serialize()\r\n    public iridescenceEdgeIntensity = 1;\r\n\r\n    /** @internal */\r\n    public _angle = -45;\r\n\r\n    /**\r\n     * Gets or sets the opacity of the backplate (0.0 - 1.0).\r\n     */\r\n    @serialize()\r\n    public fadeOut = 1;\r\n\r\n    /** @internal */\r\n    public _reflected = true;\r\n\r\n    /** @internal */\r\n    public _frequency = 1;\r\n\r\n    /** @internal */\r\n    public _verticalOffset = 0;\r\n\r\n    /**\r\n     * Gets or sets the world-space position of the tip of the left index finger.\r\n     */\r\n    @serializeAsVector3()\r\n    public globalLeftIndexTipPosition = Vector3.Zero();\r\n    private _globalLeftIndexTipPosition4 = Vector4.Zero();\r\n\r\n    /**\r\n     * Gets or sets the world-space position of the tip of the right index finger.\r\n     */\r\n    @serializeAsVector3()\r\n    public globalRightIndexTipPosition = Vector3.Zero();\r\n    private _globalRightIndexTipPosition4 = Vector4.Zero();\r\n\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n        this.alphaMode = Constants.ALPHA_DISABLE;\r\n        this.backFaceCulling = false;\r\n\r\n        this._blobTexture = new Texture(FluentBackplateMaterial.BLOB_TEXTURE_URL, this.getScene(), true, false, Texture.NEAREST_SAMPLINGMODE);\r\n        this._iridescentMap = new Texture(FluentBackplateMaterial.IM_TEXTURE_URL, this.getScene(), true, false, Texture.NEAREST_SAMPLINGMODE);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new FluentBackplateMaterialDefines();\r\n        }\r\n\r\n        const defines = <FluentBackplateMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, false);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (defines.TANGENT) {\r\n                attribs.push(VertexBuffer.TangentKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"fluentBackplate\";\r\n            const join = defines.toString();\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"viewProjection\",\r\n                \"cameraPosition\",\r\n                \"_Radius_\",\r\n                \"_Line_Width_\",\r\n                \"_Absolute_Sizes_\",\r\n                \"_Filter_Width_\",\r\n                \"_Base_Color_\",\r\n                \"_Line_Color_\",\r\n                \"_Radius_Top_Left_\",\r\n                \"_Radius_Top_Right_\",\r\n                \"_Radius_Bottom_Left_\",\r\n                \"_Radius_Bottom_Right_\",\r\n                \"_Blob_Position_\",\r\n                \"_Blob_Intensity_\",\r\n                \"_Blob_Near_Size_\",\r\n                \"_Blob_Far_Size_\",\r\n                \"_Blob_Near_Distance_\",\r\n                \"_Blob_Far_Distance_\",\r\n                \"_Blob_Fade_Length_\",\r\n                \"_Blob_Pulse_\",\r\n                \"_Blob_Fade_\",\r\n                \"_Blob_Texture_\",\r\n                \"_Blob_Position_2_\",\r\n                \"_Blob_Near_Size_2_\",\r\n                \"_Blob_Pulse_2_\",\r\n                \"_Blob_Fade_2_\",\r\n                \"_Rate_\",\r\n                \"_Highlight_Color_\",\r\n                \"_Highlight_Width_\",\r\n                \"_Highlight_Transform_\",\r\n                \"_Highlight_\",\r\n                \"_Iridescence_Intensity_\",\r\n                \"_Iridescence_Edge_Intensity_\",\r\n                \"_Angle_\",\r\n                \"_Fade_Out_\",\r\n                \"_Reflected_\",\r\n                \"_Frequency_\",\r\n                \"_Vertical_Offset_\",\r\n                \"_Iridescent_Map_\",\r\n                \"_Use_Global_Left_Index_\",\r\n                \"_Use_Global_Right_Index_\",\r\n                \"Global_Left_Index_Tip_Position\",\r\n                \"Global_Right_Index_Tip_Position\",\r\n            ];\r\n            const samplers: string[] = [\"_Blob_Texture_\", \"_Iridescent_Map_\"];\r\n            const uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: 4 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines,\r\n                this._materialContext\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const defines = <FluentBackplateMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", this.getScene().getTransformMatrix());\r\n        this._activeEffect.setVector3(\"cameraPosition\", this.getScene().activeCamera?.position ?? Vector3.ZeroReadOnly);\r\n\r\n        // \"Round Rect\"\r\n        this._activeEffect.setFloat(\"_Radius_\", this.radius);\r\n        this._activeEffect.setFloat(\"_Line_Width_\", this.lineWidth);\r\n        this._activeEffect.setFloat(\"_Absolute_Sizes_\", this.absoluteSizes ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Filter_Width_\", this._filterWidth);\r\n        this._activeEffect.setDirectColor4(\"_Base_Color_\", this.baseColor);\r\n        this._activeEffect.setDirectColor4(\"_Line_Color_\", this.lineColor);\r\n\r\n        // \"Radii Multipliers\"\r\n        this._activeEffect.setFloat(\"_Radius_Top_Left_\", 1);\r\n        this._activeEffect.setFloat(\"_Radius_Top_Right_\", 1.0);\r\n        this._activeEffect.setFloat(\"_Radius_Bottom_Left_\", 1.0);\r\n        this._activeEffect.setFloat(\"_Radius_Bottom_Right_\", 1.0);\r\n\r\n        // \"Blob\"\r\n        //define BLOB_ENABLE true;\r\n        this._activeEffect.setFloat(\"_Blob_Intensity_\", this.blobIntensity);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_\", this.blobNearSize);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Size_\", this.blobFarSize);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Distance_\", this.blobNearDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Distance_\", this.blobFarDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_Length_\", this.blobFadeLength);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_\", this.blobPulse);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_\", this.blobFade);\r\n\r\n        // \"Blob Texture\"\r\n        this._activeEffect.setTexture(\"_Blob_Texture_\", this._blobTexture);\r\n\r\n        // \"Blob 2\"\r\n        //define BLOB_ENABLE_2 true;\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_2_\", this.blobNearSize2);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_2_\", this.blobPulse2);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_2_\", this.blobFade2);\r\n\r\n        // \"Line Highlight\"\r\n        this._activeEffect.setFloat(\"_Rate_\", this._rate);\r\n        this._activeEffect.setDirectColor4(\"_Highlight_Color_\", this.highlightColor);\r\n        this._activeEffect.setFloat(\"_Highlight_Width_\", this.highlightWidth);\r\n        this._activeEffect.setVector4(\"_Highlight_Transform_\", this._highlightTransform);\r\n        this._activeEffect.setFloat(\"_Highlight_\", this._highlight);\r\n\r\n        // \"Iridescence\"\r\n        this._activeEffect.setFloat(\"_Iridescence_Intensity_\", this.iridescenceIntensity);\r\n        this._activeEffect.setFloat(\"_Iridescence_Edge_Intensity_\", this.iridescenceEdgeIntensity);\r\n        this._activeEffect.setFloat(\"_Angle_\", this._angle);\r\n\r\n        // \"Fade\"\r\n        this._activeEffect.setFloat(\"_Fade_Out_\", this.fadeOut);\r\n\r\n        // \"Antialiasing\"\r\n        //define SMOOTH_EDGES true;\r\n\r\n        // \"ChooseAngle\"\r\n        this._activeEffect.setFloat(\"_Reflected_\", this._reflected ? 1.0 : 0.0);\r\n\r\n        // \"Multiply\"\r\n        this._activeEffect.setFloat(\"_Frequency_\", this._frequency);\r\n        this._activeEffect.setFloat(\"_Vertical_Offset_\", this._verticalOffset);\r\n\r\n        // \"Color Texture\"\r\n        //define IRIDESCENT_MAP_ENABLE true;\r\n        this._activeEffect.setTexture(\"_Iridescent_Map_\", this._iridescentMap);\r\n\r\n        // \"Global\"\r\n        this._activeEffect.setFloat(\"_Use_Global_Left_Index_\", 1.0);\r\n        this._activeEffect.setFloat(\"_Use_Global_Right_Index_\", 1.0);\r\n\r\n        this._globalLeftIndexTipPosition4.set(this.globalLeftIndexTipPosition.x, this.globalLeftIndexTipPosition.y, this.globalLeftIndexTipPosition.z, 1.0);\r\n        this._activeEffect.setVector4(\"Global_Left_Index_Tip_Position\", this._globalLeftIndexTipPosition4);\r\n\r\n        this._globalRightIndexTipPosition4.set(this.globalRightIndexTipPosition.x, this.globalRightIndexTipPosition.y, this.globalRightIndexTipPosition.z, 1.0);\r\n        this._activeEffect.setVector4(\"Global_Right_Index_Tip_Position\", this._globalRightIndexTipPosition4);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    /**\r\n     * Get the list of animatables in the material.\r\n     * @returns the list of animatables object used in the material\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n\r\n        this._blobTexture.dispose();\r\n        this._iridescentMap.dispose();\r\n    }\r\n\r\n    public clone(name: string): FluentBackplateMaterial {\r\n        return SerializationHelper.Clone(() => new FluentBackplateMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.FluentBackplateMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FluentBackplateMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FluentBackplateMaterial {\r\n        return SerializationHelper.Parse(() => new FluentBackplateMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.FluentBackplateMaterial\", FluentBackplateMaterial);\r\n","import type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { FluentBackplateMaterial } from \"../materials/fluentBackplate/fluentBackplateMaterial\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { SceneLoader } from \"core/Loading/sceneLoader\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\n\r\n/**\r\n * Class used to create a holographic backplate in 3D\r\n * @since 5.0.0\r\n */\r\nexport class HolographicBackplate extends Control3D {\r\n    /**\r\n     * Base Url for the button model.\r\n     */\r\n    public static MODEL_BASE_URL: string = \"https://assets.babylonjs.com/meshes/MRTK/\";\r\n    /**\r\n     * File name for the button model.\r\n     */\r\n    public static MODEL_FILENAME: string = \"mrtk-fluent-backplate.glb\";\r\n\r\n    private _model: AbstractMesh;\r\n    private _material: FluentBackplateMaterial;\r\n\r\n    /**\r\n     * Rendering ground id of the backplate mesh.\r\n     */\r\n    public set renderingGroupId(id: number) {\r\n        this._model.renderingGroupId = id;\r\n    }\r\n    public get renderingGroupId(): number {\r\n        return this._model.renderingGroupId;\r\n    }\r\n\r\n    /**\r\n     * Gets the material used by the backplate\r\n     */\r\n    public get material(): FluentBackplateMaterial {\r\n        return this._material;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this backplate shares its material with other HolographicBackplates\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Creates a new holographic backplate\r\n     * @param name defines the control name\r\n     * @param _shareMaterials\r\n     */\r\n    constructor(name?: string, private _shareMaterials = true) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"HolographicBackplate\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        const collisionMesh = CreateBox(\r\n            (this.name ?? \"HolographicBackplate\") + \"_CollisionMesh\",\r\n            {\r\n                width: 1.0,\r\n                height: 1.0,\r\n                depth: 1.0,\r\n            },\r\n            scene\r\n        );\r\n        collisionMesh.isPickable = true;\r\n        collisionMesh.visibility = 0;\r\n\r\n        SceneLoader.ImportMeshAsync(undefined, HolographicBackplate.MODEL_BASE_URL, HolographicBackplate.MODEL_FILENAME, scene).then((result) => {\r\n            const importedModel = result.meshes[1];\r\n            importedModel.name = `${this.name}_frontPlate`;\r\n            importedModel.isPickable = false;\r\n            importedModel.parent = collisionMesh;\r\n            if (this._material) {\r\n                importedModel.material = this._material;\r\n            }\r\n            this._model = importedModel;\r\n        });\r\n\r\n        return collisionMesh;\r\n    }\r\n\r\n    private _createMaterial(mesh: Mesh) {\r\n        this._material = new FluentBackplateMaterial(this.name + \" Material\", mesh.getScene());\r\n    }\r\n\r\n    protected _affectMaterial(mesh: Mesh) {\r\n        // Back\r\n        if (this._shareMaterials) {\r\n            if (!this._host._touchSharedMaterials[\"fluentBackplateMaterial\"]) {\r\n                this._createMaterial(mesh);\r\n                this._host._touchSharedMaterials[\"fluentBackplateMaterial\"] = this._material;\r\n            } else {\r\n                this._material = this._host._touchSharedMaterials[\"fluentBackplateMaterial\"] as FluentBackplateMaterial;\r\n            }\r\n        } else {\r\n            this._createMaterial(mesh);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        if (!this.shareMaterials) {\r\n            this._material.dispose();\r\n        }\r\n\r\n        this._model.dispose();\r\n    }\r\n}\r\n","import { Button3D } from \"./button3D\";\r\n\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\nimport { CreatePlane } from \"core/Meshes/Builders/planeBuilder\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport { FadeInOutBehavior } from \"core/Behaviors/Meshes/fadeInOutBehavior\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport { FluentMaterial } from \"../materials/fluent/fluentMaterial\";\r\nimport { StackPanel } from \"../../2D/controls/stackPanel\";\r\nimport { Image } from \"../../2D/controls/image\";\r\nimport { TextBlock } from \"../../2D/controls/textBlock\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport type { Control3D } from \"./control3D\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { DomManagement } from \"core/Misc/domManagement\";\r\n\r\n/**\r\n * Class used to create a holographic button in 3D\r\n */\r\nexport class HolographicButton extends Button3D {\r\n    private _backPlate: Mesh;\r\n    private _textPlate: Mesh;\r\n    private _frontPlate: Mesh;\r\n    private _text: string;\r\n    private _imageUrl: string;\r\n    private _shareMaterials = true;\r\n    private _frontMaterial: FluentMaterial;\r\n    private _backMaterial: FluentMaterial;\r\n    private _plateMaterial: StandardMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n\r\n    // Tooltip\r\n    private _tooltipFade: Nullable<FadeInOutBehavior>;\r\n    private _tooltipTextBlock: Nullable<TextBlock>;\r\n    private _tooltipTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _tooltipMesh: Nullable<Mesh>;\r\n    private _tooltipHoverObserver: Nullable<Observer<Control3D>>;\r\n    private _tooltipOutObserver: Nullable<Observer<Control3D>>;\r\n\r\n    private _disposeTooltip() {\r\n        this._tooltipFade = null;\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.dispose();\r\n        }\r\n        if (this._tooltipTexture) {\r\n            this._tooltipTexture.dispose();\r\n        }\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.dispose();\r\n        }\r\n        this.onPointerEnterObservable.remove(this._tooltipHoverObserver);\r\n        this.onPointerOutObservable.remove(this._tooltipOutObserver);\r\n    }\r\n\r\n    /**\r\n     * Rendering ground id of all the mesh in the button\r\n     */\r\n    public set renderingGroupId(id: number) {\r\n        this._backPlate.renderingGroupId = id;\r\n        this._textPlate.renderingGroupId = id;\r\n        this._frontPlate.renderingGroupId = id;\r\n\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.renderingGroupId = id;\r\n        }\r\n    }\r\n    public get renderingGroupId(): number {\r\n        return this._backPlate.renderingGroupId;\r\n    }\r\n\r\n    /**\r\n     * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)\r\n     */\r\n    public set tooltipText(text: Nullable<string>) {\r\n        if (!text) {\r\n            this._disposeTooltip();\r\n            return;\r\n        }\r\n        if (!this._tooltipFade) {\r\n            const rightHandedScene = this._backPlate._scene.useRightHandedSystem;\r\n            // Create tooltip with mesh and text\r\n            this._tooltipMesh = CreatePlane(\"\", { size: 1 }, this._backPlate._scene);\r\n            const tooltipBackground = CreatePlane(\"\", { size: 1, sideOrientation: Mesh.DOUBLESIDE }, this._backPlate._scene);\r\n            const mat = new StandardMaterial(\"\", this._backPlate._scene);\r\n            mat.diffuseColor = Color3.FromHexString(\"#212121\");\r\n            tooltipBackground.material = mat;\r\n            tooltipBackground.isPickable = false;\r\n            this._tooltipMesh.addChild(tooltipBackground);\r\n            tooltipBackground.position = Vector3.Forward(rightHandedScene).scale(0.05);\r\n            this._tooltipMesh.scaling.y = 1 / 3;\r\n            this._tooltipMesh.position = Vector3.Up().scale(0.7).add(Vector3.Forward(rightHandedScene).scale(-0.15));\r\n            this._tooltipMesh.isPickable = false;\r\n            this._tooltipMesh.parent = this._backPlate;\r\n\r\n            // Create text texture for the tooltip\r\n            this._tooltipTexture = AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);\r\n            this._tooltipTextBlock = new TextBlock();\r\n            this._tooltipTextBlock.scaleY = 3;\r\n            this._tooltipTextBlock.color = \"white\";\r\n            this._tooltipTextBlock.fontSize = 130;\r\n            this._tooltipTexture.addControl(this._tooltipTextBlock);\r\n\r\n            // Add hover action to tooltip\r\n            this._tooltipFade = new FadeInOutBehavior();\r\n            this._tooltipFade.delay = 500;\r\n            this._tooltipMesh.addBehavior(this._tooltipFade);\r\n            this._tooltipHoverObserver = this.onPointerEnterObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(true);\r\n                }\r\n            });\r\n            this._tooltipOutObserver = this.onPointerOutObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(false);\r\n                }\r\n            });\r\n        }\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.text = text;\r\n        }\r\n    }\r\n\r\n    public get tooltipText() {\r\n        if (this._tooltipTextBlock) {\r\n            return this._tooltipTextBlock.text;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text for the button\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n\r\n        this._text = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image url for the button\r\n     */\r\n    public get imageUrl(): string {\r\n        return this._imageUrl;\r\n    }\r\n\r\n    public set imageUrl(value: string) {\r\n        if (this._imageUrl === value) {\r\n            return;\r\n        }\r\n\r\n        this._imageUrl = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets the back material used by this button\r\n     */\r\n    public get backMaterial(): FluentMaterial {\r\n        return this._backMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the front material used by this button\r\n     */\r\n    public get frontMaterial(): FluentMaterial {\r\n        return this._frontMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the plate material used by this button\r\n     */\r\n    public get plateMaterial(): StandardMaterial {\r\n        return this._plateMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this button shares its material with other HolographicButtons\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     * @param shareMaterials\r\n     */\r\n    constructor(name?: string, shareMaterials = true) {\r\n        super(name);\r\n\r\n        this._shareMaterials = shareMaterials;\r\n\r\n        // Default animations\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(true);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(false);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"HolographicButton\";\r\n    }\r\n\r\n    private _rebuildContent(): void {\r\n        this._disposeFacadeTexture();\r\n\r\n        const panel = new StackPanel();\r\n        panel.isVertical = true;\r\n\r\n        if (DomManagement.IsDocumentAvailable() && !!document.createElement) {\r\n            if (this._imageUrl) {\r\n                const image = new Image();\r\n                image.source = this._imageUrl;\r\n                image.paddingTop = \"40px\";\r\n                image.height = \"180px\";\r\n                image.width = \"100px\";\r\n                image.paddingBottom = \"40px\";\r\n                panel.addControl(image);\r\n            }\r\n        }\r\n\r\n        if (this._text) {\r\n            const text = new TextBlock();\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.height = \"30px\";\r\n            text.fontSize = 24;\r\n            panel.addControl(text);\r\n        }\r\n\r\n        if (this._frontPlate) {\r\n            this.content = panel;\r\n        }\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._backPlate = CreateBox(\r\n            this.name + \"BackMesh\",\r\n            {\r\n                width: 1.0,\r\n                height: 1.0,\r\n                depth: 0.08,\r\n            },\r\n            scene\r\n        );\r\n\r\n        this._frontPlate = CreateBox(\r\n            this.name + \"FrontMesh\",\r\n            {\r\n                width: 1.0,\r\n                height: 1.0,\r\n                depth: 0.08,\r\n            },\r\n            scene\r\n        );\r\n\r\n        this._frontPlate.parent = this._backPlate;\r\n        this._frontPlate.position = Vector3.Forward(scene.useRightHandedSystem).scale(-0.08);\r\n        this._frontPlate.isPickable = false;\r\n        this._frontPlate.setEnabled(false);\r\n\r\n        this._textPlate = <Mesh>super._createNode(scene);\r\n        this._textPlate.parent = this._backPlate;\r\n        this._textPlate.position = Vector3.Forward(scene.useRightHandedSystem).scale(-0.08);\r\n        this._textPlate.isPickable = false;\r\n\r\n        return this._backPlate;\r\n    }\r\n\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._plateMaterial.emissiveTexture = facadeTexture;\r\n        this._plateMaterial.opacityTexture = facadeTexture;\r\n    }\r\n\r\n    private _createBackMaterial(mesh: Mesh) {\r\n        this._backMaterial = new FluentMaterial(this.name + \"Back Material\", mesh.getScene());\r\n        this._backMaterial.renderHoverLight = true;\r\n        this._pickedPointObserver = this._host.onPickedPointChangedObservable.add((pickedPoint) => {\r\n            if (pickedPoint) {\r\n                this._backMaterial.hoverPosition = pickedPoint;\r\n                this._backMaterial.hoverColor.a = 1.0;\r\n            } else {\r\n                this._backMaterial.hoverColor.a = 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    private _createFrontMaterial(mesh: Mesh) {\r\n        this._frontMaterial = new FluentMaterial(this.name + \"Front Material\", mesh.getScene());\r\n        this._frontMaterial.innerGlowColorIntensity = 0; // No inner glow\r\n        this._frontMaterial.alpha = 0.5; // Additive\r\n        this._frontMaterial.renderBorders = true;\r\n    }\r\n\r\n    private _createPlateMaterial(mesh: Mesh) {\r\n        this._plateMaterial = new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\r\n        this._plateMaterial.specularColor = Color3.Black();\r\n    }\r\n\r\n    protected _affectMaterial(mesh: Mesh) {\r\n        // Back\r\n        if (this._shareMaterials) {\r\n            if (!this._host._sharedMaterials[\"backFluentMaterial\"]) {\r\n                this._createBackMaterial(mesh);\r\n                this._host._sharedMaterials[\"backFluentMaterial\"] = this._backMaterial;\r\n            } else {\r\n                this._backMaterial = this._host._sharedMaterials[\"backFluentMaterial\"] as FluentMaterial;\r\n            }\r\n\r\n            // Front\r\n            if (!this._host._sharedMaterials[\"frontFluentMaterial\"]) {\r\n                this._createFrontMaterial(mesh);\r\n                this._host._sharedMaterials[\"frontFluentMaterial\"] = this._frontMaterial;\r\n            } else {\r\n                this._frontMaterial = this._host._sharedMaterials[\"frontFluentMaterial\"] as FluentMaterial;\r\n            }\r\n        } else {\r\n            this._createBackMaterial(mesh);\r\n            this._createFrontMaterial(mesh);\r\n        }\r\n\r\n        this._createPlateMaterial(mesh);\r\n        this._backPlate.material = this._backMaterial;\r\n        this._frontPlate.material = this._frontMaterial;\r\n        this._textPlate.material = this._plateMaterial;\r\n\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        this._disposeTooltip();\r\n\r\n        if (!this.shareMaterials) {\r\n            this._backMaterial.dispose();\r\n            this._frontMaterial.dispose();\r\n            this._plateMaterial.dispose();\r\n\r\n            if (this._pickedPointObserver) {\r\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n                this._pickedPointObserver = null;\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"fluentButtonPixelShader\";\nconst shader = `uniform vec3 cameraPosition;\rvarying vec3 vPosition;\rvarying vec3 vNormal;\rvarying vec2 vUV;\rvarying vec3 vTangent;\rvarying vec3 vBinormal;\rvarying vec4 vColor;\rvarying vec4 vExtra1;\runiform float _Edge_Width_;\runiform vec4 _Edge_Color_;\runiform bool _Relative_Width_;\runiform float _Proximity_Max_Intensity_;\runiform float _Proximity_Far_Distance_;\runiform float _Proximity_Near_Radius_;\runiform float _Proximity_Anisotropy_;\runiform float _Selection_Fuzz_;\runiform float _Selected_;\runiform float _Selection_Fade_;\runiform float _Selection_Fade_Size_;\runiform float _Selected_Distance_;\runiform float _Selected_Fade_Length_;\runiform bool _Blob_Enable_;\runiform vec3 _Blob_Position_;\runiform float _Blob_Intensity_;\runiform float _Blob_Near_Size_;\runiform float _Blob_Far_Size_;\runiform float _Blob_Near_Distance_;\runiform float _Blob_Far_Distance_;\runiform float _Blob_Fade_Length_;\runiform float _Blob_Inner_Fade_;\runiform float _Blob_Pulse_;\runiform float _Blob_Fade_;\runiform sampler2D _Blob_Texture_;\runiform bool _Blob_Enable_2_;\runiform vec3 _Blob_Position_2_;\runiform float _Blob_Near_Size_2_;\runiform float _Blob_Inner_Fade_2_;\runiform float _Blob_Pulse_2_;\runiform float _Blob_Fade_2_;\runiform vec3 _Active_Face_Dir_;\runiform vec3 _Active_Face_Up_;\runiform bool Enable_Fade;\runiform float _Fade_Width_;\runiform bool _Smooth_Active_Face_;\runiform bool _Show_Frame_;\runiform bool _Use_Blob_Texture_;\runiform bool Use_Global_Left_Index;\runiform bool Use_Global_Right_Index;\runiform vec4 Global_Left_Index_Tip_Position;\runiform vec4 Global_Right_Index_Tip_Position;\runiform vec4 Global_Left_Thumb_Tip_Position;\runiform vec4 Global_Right_Thumb_Tip_Position;\runiform float Global_Left_Index_Tip_Proximity;\runiform float Global_Right_Index_Tip_Proximity;\rvoid Holo_Edge_Fragment_B35(\rvec4 Edges,\rfloat Edge_Width,\rout float NotEdge)\r{\rvec2 c=vec2(min(Edges.r,Edges.g),min(Edges.b,Edges.a));\rvec2 df=fwidth(c)*Edge_Width;\rvec2 g=clamp(c/df,0.0,1.0);\rNotEdge=g.x*g.y;\r}\rvoid Blob_Fragment_B39(\rvec2 UV,\rvec3 Blob_Info,\rsampler2D Blob_Texture,\rout vec4 Blob_Color)\r{\rfloat k=dot(UV,UV);\rBlob_Color=Blob_Info.y*texture(Blob_Texture,vec2(vec2(sqrt(k),Blob_Info.x).x,1.0-vec2(sqrt(k),Blob_Info.x).y))*(1.0-clamp(k,0.0,1.0));\r}\rvec2 FilterStep(vec2 Edge,vec2 X)\r{\rvec2 dX=max(fwidth(X),vec2(0.00001,0.00001));\rreturn clamp( (X+dX-max(Edge,X-dX))/(dX*2.0),0.0,1.0);\r}\rvoid Wireframe_Fragment_B59(\rvec3 Widths,\rvec2 UV,\rfloat Proximity,\rvec4 Edge_Color,\rout vec4 Wireframe)\r{\rvec2 c=min(UV,vec2(1.0,1.0)-UV);\rvec2 g=FilterStep(Widths.xy*0.5,c); \rWireframe=(1.0-min(g.x,g.y))*Proximity*Edge_Color;\r}\rvoid Proximity_B53(\rvec3 Proximity_Center,\rvec3 Proximity_Center_2,\rfloat Proximity_Max_Intensity,\rfloat Proximity_Near_Radius,\rvec3 Position,\rvec3 Show_Selection,\rvec4 Extra1,\rfloat Dist_To_Face,\rfloat Intensity,\rout float Proximity)\r{\rvec2 delta1=Extra1.xy;\rvec2 delta2=Extra1.zw;\rfloat d2=sqrt(min(dot(delta1,delta1),dot(delta2,delta2))+Dist_To_Face*Dist_To_Face);\rProximity=Intensity*Proximity_Max_Intensity*(1.0-clamp(d2/Proximity_Near_Radius,0.0,1.0))*(1.0-Show_Selection.x)+Show_Selection.x;\r}\rvoid To_XYZ_B46(\rvec3 Vec3,\rout float X,\rout float Y,\rout float Z)\r{\rX=Vec3.x;\rY=Vec3.y;\rZ=Vec3.z;\r}\rvoid main()\r{\rfloat NotEdge_Q35;\r#if ENABLE_FADE\nHolo_Edge_Fragment_B35(vColor,_Fade_Width_,NotEdge_Q35);\r#else\nNotEdge_Q35=1.0;\r#endif\nvec4 Blob_Color_Q39;\rfloat k=dot(vUV,vUV);\rvec2 blobTextureCoord=vec2(vec2(sqrt(k),vTangent.x).x,1.0-vec2(sqrt(k),vTangent.x).y);\rvec4 blobColor=mix(vec4(1.0,1.0,1.0,1.0)*step(1.0-vTangent.x,clamp(sqrt(k)+0.1,0.0,1.0)),texture(_Blob_Texture_,blobTextureCoord),float(_Use_Blob_Texture_));\rBlob_Color_Q39=vTangent.y*blobColor*(1.0-clamp(k,0.0,1.0));\rfloat Is_Quad_Q24;\rIs_Quad_Q24=vNormal.z;\rvec3 Blob_Position_Q41= mix(_Blob_Position_,Global_Left_Index_Tip_Position.xyz,float(Use_Global_Left_Index));\rvec3 Blob_Position_Q42= mix(_Blob_Position_2_,Global_Right_Index_Tip_Position.xyz,float(Use_Global_Right_Index));\rfloat X_Q46;\rfloat Y_Q46;\rfloat Z_Q46;\rTo_XYZ_B46(vBinormal,X_Q46,Y_Q46,Z_Q46);\rfloat Proximity_Q53;\rProximity_B53(Blob_Position_Q41,Blob_Position_Q42,_Proximity_Max_Intensity_,_Proximity_Near_Radius_,vPosition,vBinormal,vExtra1,Y_Q46,Z_Q46,Proximity_Q53);\rvec4 Wireframe_Q59;\rWireframe_Fragment_B59(vNormal,vUV,Proximity_Q53,_Edge_Color_,Wireframe_Q59);\rvec4 Wire_Or_Blob_Q23=mix(Wireframe_Q59,Blob_Color_Q39,Is_Quad_Q24);\rvec4 Result_Q22;\rResult_Q22=mix(Wire_Or_Blob_Q23,vec4(0.3,0.3,0.3,0.3),float(_Show_Frame_));\rvec4 Final_Color_Q37=NotEdge_Q35*Result_Q22;\rvec4 Out_Color=Final_Color_Q37;\rfloat Clip_Threshold=0.0;\rbool To_sRGB=false;\rgl_FragColor=Out_Color;\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const fluentButtonPixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"fluentButtonVertexShader\";\nconst shader = `uniform mat4 world;\runiform mat4 viewProjection;\runiform vec3 cameraPosition;\rattribute vec3 position;\rattribute vec3 normal;\rattribute vec2 uv;\rattribute vec3 tangent;\rattribute vec4 color;\runiform float _Edge_Width_;\runiform vec4 _Edge_Color_;\runiform float _Proximity_Max_Intensity_;\runiform float _Proximity_Far_Distance_;\runiform float _Proximity_Near_Radius_;\runiform float _Proximity_Anisotropy_;\runiform float _Selection_Fuzz_;\runiform float _Selected_;\runiform float _Selection_Fade_;\runiform float _Selection_Fade_Size_;\runiform float _Selected_Distance_;\runiform float _Selected_Fade_Length_;\runiform bool _Blob_Enable_;\runiform vec3 _Blob_Position_;\runiform float _Blob_Intensity_;\runiform float _Blob_Near_Size_;\runiform float _Blob_Far_Size_;\runiform float _Blob_Near_Distance_;\runiform float _Blob_Far_Distance_;\runiform float _Blob_Fade_Length_;\runiform float _Blob_Inner_Fade_;\runiform float _Blob_Pulse_;\runiform float _Blob_Fade_;\runiform sampler2D _Blob_Texture_;\runiform bool _Blob_Enable_2_;\runiform vec3 _Blob_Position_2_;\runiform float _Blob_Near_Size_2_;\runiform float _Blob_Inner_Fade_2_;\runiform float _Blob_Pulse_2_;\runiform float _Blob_Fade_2_;\runiform vec3 _Active_Face_Dir_;\runiform vec3 _Active_Face_Up_;\runiform bool _Enable_Fade_;\runiform float _Fade_Width_;\runiform bool _Smooth_Active_Face_;\runiform bool _Show_Frame_;\runiform bool Use_Global_Left_Index;\runiform bool Use_Global_Right_Index;\runiform vec4 Global_Left_Index_Tip_Position;\runiform vec4 Global_Right_Index_Tip_Position;\runiform vec4 Global_Left_Thumb_Tip_Position;\runiform vec4 Global_Right_Thumb_Tip_Position;\runiform float Global_Left_Index_Tip_Proximity;\runiform float Global_Right_Index_Tip_Proximity;\rvarying vec3 vPosition;\rvarying vec3 vNormal;\rvarying vec2 vUV;\rvarying vec3 vTangent;\rvarying vec3 vBinormal;\rvarying vec4 vColor;\rvarying vec4 vExtra1;\rvoid Blob_Vertex_B47(\rvec3 Position,\rvec3 Normal,\rvec3 Tangent,\rvec3 Bitangent,\rvec3 Blob_Position,\rfloat Intensity,\rfloat Blob_Near_Size,\rfloat Blob_Far_Size,\rfloat Blob_Near_Distance,\rfloat Blob_Far_Distance,\rvec4 Vx_Color,\rvec2 UV,\rvec3 Face_Center,\rvec2 Face_Size,\rvec2 In_UV,\rfloat Blob_Fade_Length,\rfloat Selection_Fade,\rfloat Selection_Fade_Size,\rfloat Inner_Fade,\rvec3 Active_Face_Center,\rfloat Blob_Pulse,\rfloat Blob_Fade,\rfloat Blob_Enabled,\rout vec3 Out_Position,\rout vec2 Out_UV,\rout vec3 Blob_Info)\r{\rfloat blobSize,fadeIn;\rvec3 Hit_Position;\rBlob_Info=vec3(0.0,0.0,0.0);\rfloat Hit_Distance=dot(Blob_Position-Face_Center,Normal);\rHit_Position=Blob_Position-Hit_Distance*Normal;\rfloat absD=abs(Hit_Distance);\rfloat lerpVal=clamp((absD-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);\rfadeIn=1.0-clamp((absD-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);\rfloat innerFade=1.0-clamp(-Hit_Distance/Inner_Fade,0.0,1.0);\rfloat farClip=clamp(1.0-step(Blob_Far_Distance+Blob_Fade_Length,absD),0.0,1.0);\rfloat size=mix(Blob_Near_Size,Blob_Far_Size,lerpVal)*farClip;\rblobSize=mix(size,Selection_Fade_Size,Selection_Fade)*innerFade*Blob_Enabled;\rBlob_Info.x=lerpVal*0.5+0.5;\rBlob_Info.y=fadeIn*Intensity*(1.0-Selection_Fade)*Blob_Fade;\rBlob_Info.x*=(1.0-Blob_Pulse);\rvec3 delta=Hit_Position-Face_Center;\rvec2 blobCenterXY=vec2(dot(delta,Tangent),dot(delta,Bitangent));\rvec2 quadUVin=2.0*UV-1.0; \rvec2 blobXY=blobCenterXY+quadUVin*blobSize;\rvec2 blobClipped=clamp(blobXY,-Face_Size*0.5,Face_Size*0.5);\rvec2 blobUV=(blobClipped-blobCenterXY)/max(blobSize,0.0001)*2.0;\rvec3 blobCorner=Face_Center+blobClipped.x*Tangent+blobClipped.y*Bitangent;\rOut_Position=mix(Position,blobCorner,Vx_Color.rrr);\rOut_UV=mix(In_UV,blobUV,Vx_Color.rr);\r}\rvec2 ProjectProximity(\rvec3 blobPosition,\rvec3 position,\rvec3 center,\rvec3 dir,\rvec3 xdir,\rvec3 ydir,\rout float vdistance\r)\r{\rvec3 delta=blobPosition-position;\rvec2 xy=vec2(dot(delta,xdir),dot(delta,ydir));\rvdistance=abs(dot(delta,dir));\rreturn xy;\r}\rvoid Proximity_Vertex_B66(\rvec3 Blob_Position,\rvec3 Blob_Position_2,\rvec3 Active_Face_Center,\rvec3 Active_Face_Dir,\rvec3 Position,\rfloat Proximity_Far_Distance,\rfloat Relative_Scale,\rfloat Proximity_Anisotropy,\rvec3 Up,\rout vec4 Extra1,\rout float Distance_To_Face,\rout float Intensity)\r{\rvec3 Active_Face_Dir_X=normalize(cross(Active_Face_Dir,Up));\rvec3 Active_Face_Dir_Y=cross(Active_Face_Dir,Active_Face_Dir_X);\rfloat distz1,distz2;\rExtra1.xy=ProjectProximity(Blob_Position,Position,Active_Face_Center,Active_Face_Dir,Active_Face_Dir_X*Proximity_Anisotropy,Active_Face_Dir_Y,distz1)/Relative_Scale;\rExtra1.zw=ProjectProximity(Blob_Position_2,Position,Active_Face_Center,Active_Face_Dir,Active_Face_Dir_X*Proximity_Anisotropy,Active_Face_Dir_Y,distz2)/Relative_Scale;\rDistance_To_Face=dot(Active_Face_Dir,Position-Active_Face_Center);\rIntensity=1.0-clamp(min(distz1,distz2)/Proximity_Far_Distance,0.0,1.0);\r}\rvoid Holo_Edge_Vertex_B44(\rvec3 Incident,\rvec3 Normal,\rvec2 UV,\rvec3 Tangent,\rvec3 Bitangent,\rbool Smooth_Active_Face,\rfloat Active,\rout vec4 Holo_Edges)\r{\rfloat NdotI=dot(Incident,Normal);\rvec2 flip=(UV-vec2(0.5,0.5));\rfloat udot=dot(Incident,Tangent)*flip.x*NdotI;\rfloat uval=1.0-float(udot>0.0);\rfloat vdot=-dot(Incident,Bitangent)*flip.y*NdotI;\rfloat vval=1.0-float(vdot>0.0);\rfloat Smooth_And_Active=step(1.0,float(Smooth_Active_Face && Active>0.0));\ruval=mix(uval,max(1.0,uval),Smooth_And_Active); \rvval=mix(vval,max(1.0,vval),Smooth_And_Active);\rHolo_Edges=vec4(1.0,1.0,1.0,1.0)-vec4(uval*UV.x,uval*(1.0-UV.x),vval*UV.y,vval*(1.0-UV.y));\r}\rvoid Object_To_World_Pos_B13(\rvec3 Pos_Object,\rout vec3 Pos_World)\r{\rPos_World=(world*vec4(Pos_Object,1.0)).xyz;\r}\rvoid Choose_Blob_B38(\rvec4 Vx_Color,\rvec3 Position1,\rvec3 Position2,\rbool Blob_Enable_1,\rbool Blob_Enable_2,\rfloat Near_Size_1,\rfloat Near_Size_2,\rfloat Blob_Inner_Fade_1,\rfloat Blob_Inner_Fade_2,\rfloat Blob_Pulse_1,\rfloat Blob_Pulse_2,\rfloat Blob_Fade_1,\rfloat Blob_Fade_2,\rout vec3 Position,\rout float Near_Size,\rout float Inner_Fade,\rout float Blob_Enable,\rout float Fade,\rout float Pulse)\r{\rPosition=Position1*(1.0-Vx_Color.g)+Vx_Color.g*Position2;\rfloat b1=float(Blob_Enable_1);\rfloat b2=float(Blob_Enable_2);\rBlob_Enable=b1+(b2-b1)*Vx_Color.g;\rPulse=Blob_Pulse_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Pulse_2;\rFade=Blob_Fade_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Fade_2;\rNear_Size=Near_Size_1*(1.0-Vx_Color.g)+Vx_Color.g*Near_Size_2;\rInner_Fade=Blob_Inner_Fade_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Inner_Fade_2;\r}\rvoid Wireframe_Vertex_B51(\rvec3 Position,\rvec3 Normal,\rvec3 Tangent,\rvec3 Bitangent,\rfloat Edge_Width,\rvec2 Face_Size,\rout vec3 Wire_Vx_Pos,\rout vec2 UV,\rout vec2 Widths)\r{\rWidths.xy=Edge_Width/Face_Size;\rfloat x=dot(Position,Tangent);\rfloat y=dot(Position,Bitangent);\rfloat dx=0.5-abs(x);\rfloat newx=(0.5-dx*Widths.x*2.0)*sign(x);\rfloat dy=0.5-abs(y);\rfloat newy=(0.5-dy*Widths.y*2.0)*sign(y);\rWire_Vx_Pos=Normal*0.5+newx*Tangent+newy*Bitangent;\rUV.x=dot(Wire_Vx_Pos,Tangent)+0.5;\rUV.y=dot(Wire_Vx_Pos,Bitangent)+0.5;\r}\rvec2 ramp2(vec2 start,vec2 end,vec2 x)\r{\rreturn clamp((x-start)/(end-start),vec2(0.0,0.0),vec2(1.0,1.0));\r}\rfloat computeSelection(\rvec3 blobPosition,\rvec3 normal,\rvec3 tangent,\rvec3 bitangent,\rvec3 faceCenter,\rvec2 faceSize,\rfloat selectionFuzz,\rfloat farDistance,\rfloat fadeLength\r)\r{\rvec3 delta=blobPosition-faceCenter;\rfloat absD=abs(dot(delta,normal));\rfloat fadeIn=1.0-clamp((absD-farDistance)/fadeLength,0.0,1.0);\rvec2 blobCenterXY=vec2(dot(delta,tangent),dot(delta,bitangent));\rvec2 innerFace=faceSize*(1.0-selectionFuzz)*0.5;\rvec2 selectPulse=ramp2(-faceSize*0.5,-innerFace,blobCenterXY)-ramp2(innerFace,faceSize*0.5,blobCenterXY);\rreturn selectPulse.x*selectPulse.y*fadeIn;\r}\rvoid Selection_Vertex_B48(\rvec3 Blob_Position,\rvec3 Blob_Position_2,\rvec3 Face_Center,\rvec2 Face_Size,\rvec3 Normal,\rvec3 Tangent,\rvec3 Bitangent,\rfloat Selection_Fuzz,\rfloat Selected,\rfloat Far_Distance,\rfloat Fade_Length,\rvec3 Active_Face_Dir,\rout float Show_Selection)\r{\rfloat select1=computeSelection(Blob_Position,Normal,Tangent,Bitangent,Face_Center,Face_Size,Selection_Fuzz,Far_Distance,Fade_Length);\rfloat select2=computeSelection(Blob_Position_2,Normal,Tangent,Bitangent,Face_Center,Face_Size,Selection_Fuzz,Far_Distance,Fade_Length);\rfloat Active=max(0.0,dot(Active_Face_Dir,Normal));\rShow_Selection=mix(max(select1,select2),1.0,Selected)*Active;\r}\rvoid Proximity_Visibility_B54(\rfloat Selection,\rvec3 Proximity_Center,\rvec3 Proximity_Center_2,\rfloat Input_Width,\rfloat Proximity_Far_Distance,\rfloat Proximity_Radius,\rvec3 Active_Face_Center,\rvec3 Active_Face_Dir,\rout float Width)\r{\rvec3 boxEdges=(world*vec4(vec3(0.5,0.5,0.5),0.0)).xyz;\rfloat boxMaxSize=length(boxEdges);\rfloat d1=dot(Proximity_Center-Active_Face_Center,Active_Face_Dir);\rvec3 blob1=Proximity_Center-d1*Active_Face_Dir;\rfloat d2=dot(Proximity_Center_2-Active_Face_Center,Active_Face_Dir);\rvec3 blob2=Proximity_Center_2-d2*Active_Face_Dir;\rvec3 delta1=blob1-Active_Face_Center;\rvec3 delta2=blob2-Active_Face_Center;\rfloat dist1=dot(delta1,delta1);\rfloat dist2=dot(delta2,delta2);\rfloat nearestProxDist=sqrt(min(dist1,dist2));\rWidth=Input_Width*(1.0-step(boxMaxSize+Proximity_Radius,nearestProxDist))*(1.0-step(Proximity_Far_Distance,min(d1,d2))*(1.0-step(0.0001,Selection)));\r}\rvoid Object_To_World_Dir_B67(\rvec3 Dir_Object,\rout vec3 Dir_World)\r{\rDir_World=(world*vec4(Dir_Object,0.0)).xyz;\r}\rvoid main()\r{\rvec3 Active_Face_Center_Q49;\rActive_Face_Center_Q49=(world*vec4(_Active_Face_Dir_*0.5,1.0)).xyz;\rvec3 Blob_Position_Q41= mix(_Blob_Position_,Global_Left_Index_Tip_Position.xyz,float(Use_Global_Left_Index));\rvec3 Blob_Position_Q42= mix(_Blob_Position_2_,Global_Right_Index_Tip_Position.xyz,float(Use_Global_Right_Index));\rvec3 Active_Face_Dir_Q64=normalize((world*vec4(_Active_Face_Dir_,0.0)).xyz);\rfloat Relative_Scale_Q57;\r#if RELATIVE_WIDTH\nRelative_Scale_Q57=length((world*vec4(vec3(0,1,0),0.0)).xyz);\r#else\nRelative_Scale_Q57=1.0;\r#endif\nvec3 Tangent_World_Q30;\rTangent_World_Q30=(world*vec4(tangent,0.0)).xyz;\rvec3 Binormal_World_Q31;\rBinormal_World_Q31=(world*vec4((cross(normal,tangent)),0.0)).xyz;\rvec3 Normal_World_Q60;\rNormal_World_Q60=(world*vec4(normal,0.0)).xyz;\rvec3 Result_Q18=0.5*normal;\rvec3 Dir_World_Q67;\rObject_To_World_Dir_B67(_Active_Face_Up_,Dir_World_Q67);\rfloat Product_Q56=_Edge_Width_*Relative_Scale_Q57;\rvec3 Normal_World_N_Q29=normalize(Normal_World_Q60);\rvec3 Tangent_World_N_Q28=normalize(Tangent_World_Q30);\rvec3 Binormal_World_N_Q32=normalize(Binormal_World_Q31);\rvec3 Position_Q38;\rfloat Near_Size_Q38;\rfloat Inner_Fade_Q38;\rfloat Blob_Enable_Q38;\rfloat Fade_Q38;\rfloat Pulse_Q38;\rChoose_Blob_B38(color,Blob_Position_Q41,Blob_Position_Q42,_Blob_Enable_,_Blob_Enable_2_,_Blob_Near_Size_,_Blob_Near_Size_2_,_Blob_Inner_Fade_,_Blob_Inner_Fade_2_,_Blob_Pulse_,_Blob_Pulse_2_,_Blob_Fade_,_Blob_Fade_2_,Position_Q38,Near_Size_Q38,Inner_Fade_Q38,Blob_Enable_Q38,Fade_Q38,Pulse_Q38);\rvec3 Face_Center_Q33;\rFace_Center_Q33=(world*vec4(Result_Q18,1.0)).xyz;\rvec2 Face_Size_Q50=vec2(length(Tangent_World_Q30),length(Binormal_World_Q31));\rfloat Show_Selection_Q48;\rSelection_Vertex_B48(Blob_Position_Q41,Blob_Position_Q42,Face_Center_Q33,Face_Size_Q50,Normal_World_N_Q29,Tangent_World_N_Q28,Binormal_World_N_Q32,_Selection_Fuzz_,_Selected_,_Selected_Distance_,_Selected_Fade_Length_,Active_Face_Dir_Q64,Show_Selection_Q48);\rvec3 Normalized_Q72=normalize(Dir_World_Q67);\rfloat Active_Q34=max(0.0,dot(Active_Face_Dir_Q64,Normal_World_N_Q29));\rfloat Width_Q54;\rProximity_Visibility_B54(Show_Selection_Q48,Blob_Position_Q41,Blob_Position_Q42,Product_Q56,_Proximity_Far_Distance_,_Proximity_Near_Radius_,Active_Face_Center_Q49,Active_Face_Dir_Q64,Width_Q54);\rvec3 Wire_Vx_Pos_Q51;\rvec2 UV_Q51;\rvec2 Widths_Q51;\rWireframe_Vertex_B51(position,normal,tangent,(cross(normal,tangent)),Width_Q54,Face_Size_Q50,Wire_Vx_Pos_Q51,UV_Q51,Widths_Q51);\rvec3 Vec3_Q27=vec3(Widths_Q51.x,Widths_Q51.y,color.r);\rvec3 Pos_World_Q13;\rObject_To_World_Pos_B13(Wire_Vx_Pos_Q51,Pos_World_Q13);\rvec3 Incident_Q36=normalize(Pos_World_Q13-cameraPosition);\rvec3 Out_Position_Q47;\rvec2 Out_UV_Q47;\rvec3 Blob_Info_Q47;\rBlob_Vertex_B47(Pos_World_Q13,Normal_World_N_Q29,Tangent_World_N_Q28,Binormal_World_N_Q32,Position_Q38,_Blob_Intensity_,Near_Size_Q38,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,color,uv,Face_Center_Q33,Face_Size_Q50,UV_Q51,_Blob_Fade_Length_,_Selection_Fade_,_Selection_Fade_Size_,Inner_Fade_Q38,Active_Face_Center_Q49,Pulse_Q38,Fade_Q38,Blob_Enable_Q38,Out_Position_Q47,Out_UV_Q47,Blob_Info_Q47);\rvec4 Extra1_Q66;\rfloat Distance_To_Face_Q66;\rfloat Intensity_Q66;\rProximity_Vertex_B66(Blob_Position_Q41,Blob_Position_Q42,Active_Face_Center_Q49,Active_Face_Dir_Q64,Pos_World_Q13,_Proximity_Far_Distance_,Relative_Scale_Q57,_Proximity_Anisotropy_,Normalized_Q72,Extra1_Q66,Distance_To_Face_Q66,Intensity_Q66);\rvec4 Holo_Edges_Q44;\rHolo_Edge_Vertex_B44(Incident_Q36,Normal_World_N_Q29,uv,Tangent_World_Q30,Binormal_World_Q31,_Smooth_Active_Face_,Active_Q34,Holo_Edges_Q44);\rvec3 Vec3_Q19=vec3(Show_Selection_Q48,Distance_To_Face_Q66,Intensity_Q66);\rvec3 Position=Out_Position_Q47;\rvec2 UV=Out_UV_Q47;\rvec3 Tangent=Blob_Info_Q47;\rvec3 Binormal=Vec3_Q19;\rvec3 Normal=Vec3_Q27;\rvec4 Extra1=Extra1_Q66;\rvec4 Color=Holo_Edges_Q44;\rgl_Position=viewProjection*vec4(Position,1);\rvPosition=Position;\rvNormal=Normal;\rvUV=UV;\rvTangent=Tangent;\rvBinormal=Binormal;\rvColor=Color;\rvExtra1=Extra1;\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const fluentButtonVertexShader = { name, shader };\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { serializeAsColor4, serializeAsVector3, serialize, SerializationHelper } from \"core/Misc/decorators\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Vector3, Vector4 } from \"core/Maths/math.vector\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { Color3, Color4 } from \"core/Maths/math.color\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { Constants } from \"core/Engines/constants\";\r\n\r\nimport \"./shaders/fluentButton.fragment\";\r\nimport \"./shaders/fluentButton.vertex\";\r\n\r\n/** @internal */\r\nclass FluentButtonMaterialDefines extends MaterialDefines {\r\n    public RELATIVE_WIDTH = true;\r\n    public ENABLE_FADE = true;\r\n\r\n    constructor() {\r\n        super();\r\n        this._needNormals = true;\r\n        this._needUVs = true;\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render square buttons with fluent design\r\n * @since 5.0.0\r\n */\r\nexport class FluentButtonMaterial extends PushMaterial {\r\n    /**\r\n     * URL pointing to the texture used to define the coloring for the fluent blob effect.\r\n     */\r\n    public static BLOB_TEXTURE_URL = \"https://assets.babylonjs.com/meshes/MRTK/mrtk-fluent-button-blob.png\";\r\n\r\n    /**\r\n     * Gets or sets the width of the glowing edge, relative to the scale of the button.\r\n     * (Default is 4% of the height).\r\n     */\r\n    @serialize()\r\n    public edgeWidth = 0.04;\r\n\r\n    /**\r\n     * Gets or sets the color of the glowing edge.\r\n     */\r\n    @serializeAsColor4()\r\n    public edgeColor = new Color4(0.592157, 0.592157, 0.592157, 1.0);\r\n\r\n    /**\r\n     * Gets or sets the maximum intensity of the proximity light.\r\n     */\r\n    @serialize()\r\n    public proximityMaxIntensity = 0.45;\r\n\r\n    /**\r\n     * Gets or sets the maximum distance for the proximity light (Default is 16mm).\r\n     */\r\n    @serialize()\r\n    public proximityFarDistance = 0.16;\r\n\r\n    /**\r\n     * Gets or sets the radius of the proximity light when near to the surface.\r\n     */\r\n    @serialize()\r\n    public proximityNearRadius = 1.5;\r\n\r\n    /**\r\n     * Gets or sets the anisotropy of the proximity light.\r\n     */\r\n    @serialize()\r\n    public proximityAnisotropy = 1;\r\n\r\n    /**\r\n     * Gets or sets the amount of fuzzing in the selection focus.\r\n     */\r\n    @serialize()\r\n    public selectionFuzz = 0.5;\r\n\r\n    /**\r\n     * Gets or sets an override value to display the button as selected.\r\n     */\r\n    @serialize()\r\n    public selected = 0;\r\n\r\n    /**\r\n     * Gets or sets a value to manually fade the blob size.\r\n     */\r\n    @serialize()\r\n    public selectionFade = 0;\r\n\r\n    /**\r\n     * Gets or sets a value to manually shrink the blob size as it fades (see selectionFade).\r\n     */\r\n    @serialize()\r\n    public selectionFadeSize = 0.3;\r\n\r\n    /**\r\n     * Gets or sets the distance from the button the cursor should be for the button\r\n     * to appear selected (Default is 8cm).\r\n     */\r\n    @serialize()\r\n    public selectedDistance = 0.08;\r\n\r\n    /**\r\n     * Gets or sets the fall-off distance for the selection fade (Default is 8cm).\r\n     */\r\n    @serialize()\r\n    public selectedFadeLength = 0.08;\r\n\r\n    /**\r\n     * Gets or sets the intensity of the luminous blob (Ranges 0-1, default is 0.5).\r\n     */\r\n    @serialize()\r\n    public blobIntensity = 0.5;\r\n\r\n    /**\r\n     * The size of the blob when the pointer is at the blobFarDistance (Default is 5cm).\r\n     */\r\n    @serialize()\r\n    public blobFarSize = 0.05;\r\n\r\n    /**\r\n     * The distance at which the pointer is considered near. See [left|right]BlobNearSize. (Default is 0cm).\r\n     */\r\n    @serialize()\r\n    public blobNearDistance = 0;\r\n\r\n    /**\r\n     * The distance at which the pointer is considered far. See [left|right]BlobFarSize. (Default is 8cm).\r\n     */\r\n    @serialize()\r\n    public blobFarDistance = 0.08;\r\n\r\n    /**\r\n     * The distance over which the blob intensity fades from full to none (Default is 8cm).\r\n     */\r\n    @serialize()\r\n    public blobFadeLength = 0.08;\r\n\r\n    /**\r\n     * Gets or sets whether the blob corresponding to the left index finger is enabled.\r\n     */\r\n    @serialize()\r\n    public leftBlobEnable = true;\r\n\r\n    /**\r\n     * Gets or sets the size of the left blob when the left pointer is considered near. See blobNearDistance. (Default is 2.5cm).\r\n     */\r\n    @serialize()\r\n    public leftBlobNearSize = 0.025;\r\n\r\n    /**\r\n     * Gets or sets the progress of the pulse animation on the left blob (Ranges 0-1).\r\n     */\r\n    @serialize()\r\n    public leftBlobPulse = 0;\r\n\r\n    /**\r\n     * Gets or sets the fade factor on the left blob.\r\n     */\r\n    @serialize()\r\n    public leftBlobFade = 1;\r\n\r\n    /**\r\n     * Gets or sets the inner fade on the left blob;\r\n     */\r\n    @serialize()\r\n    public leftBlobInnerFade = 0.01;\r\n\r\n    /**\r\n     * Gets or sets whether the blob corresponding to the right index finger is enabled.\r\n     */\r\n    @serialize()\r\n    public rightBlobEnable = true;\r\n\r\n    /**\r\n     * Gets or sets the size of the right blob when the right pointer is considered near. See blobNearDistance. (Default is 2.5cm).\r\n     */\r\n    @serialize()\r\n    public rightBlobNearSize = 0.025;\r\n\r\n    /**\r\n     * Gets or sets the progress of the pulse animation on the right blob (Ranges 0-1).\r\n     */\r\n    @serialize()\r\n    public rightBlobPulse = 0;\r\n\r\n    /**\r\n     * Gets or sets the fade factor on the right blob.\r\n     */\r\n    @serialize()\r\n    public rightBlobFade = 1;\r\n\r\n    /**\r\n     * Gets or sets the inner fade on the right blob;\r\n     */\r\n    @serialize()\r\n    public rightBlobInnerFade = 0.01;\r\n\r\n    /**\r\n     * Gets or sets the direction of the active face before the world transform is applied.\r\n     * This should almost always be set to -z.\r\n     */\r\n    @serializeAsVector3()\r\n    public activeFaceDir = new Vector3(0, 0, -1);\r\n\r\n    /**\r\n     * Gets or sets the button's up direction before the world transform is applied.\r\n     * This should almost always be set to +y.\r\n     */\r\n    @serializeAsVector3()\r\n    public activeFaceUp = new Vector3(0, 1, 0);\r\n\r\n    /**\r\n     * Gets or sets whether the edge fade effect is enabled.\r\n     */\r\n    @serialize()\r\n    public enableFade = true;\r\n\r\n    /**\r\n     * Gets or sets a value corresponding to the width of the edge fade effect (Default 1.5).\r\n     */\r\n    @serialize()\r\n    public fadeWidth = 1.5;\r\n\r\n    /**\r\n     * Gets or sets whether the active face is smoothly interpolated.\r\n     */\r\n    @serialize()\r\n    public smoothActiveFace = true;\r\n\r\n    /**\r\n     * Gets or sets whether the frame of the fluent button model is visible.\r\n     * This is usually only enabled for debugging purposes.\r\n     */\r\n    @serialize()\r\n    public showFrame = false;\r\n\r\n    /**\r\n     * Gets or sets whether the blob color texture is used for the proximity\r\n     * light effect. This is usually only disabled for debugging purposes.\r\n     */\r\n    @serialize()\r\n    public useBlobTexture = true;\r\n\r\n    /**\r\n     * Gets or sets the world-space position of the tip of the left index finger.\r\n     */\r\n    @serializeAsVector3()\r\n    public globalLeftIndexTipPosition = Vector3.Zero();\r\n\r\n    /**\r\n     * Gets or sets the world-space position of the tip of the right index finger.\r\n     */\r\n    @serializeAsVector3()\r\n    public globalRightIndexTipPosition = Vector3.Zero();\r\n\r\n    private _blobTexture: Texture;\r\n\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n        this.alphaMode = Constants.ALPHA_ADD;\r\n        this.disableDepthWrite = true;\r\n        this.backFaceCulling = false;\r\n\r\n        this._blobTexture = new Texture(FluentButtonMaterial.BLOB_TEXTURE_URL, this.getScene(), true, false, Texture.NEAREST_SAMPLINGMODE);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new FluentButtonMaterialDefines();\r\n        }\r\n\r\n        const defines = <FluentButtonMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, false);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (defines.TANGENT) {\r\n                attribs.push(VertexBuffer.TangentKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"fluentButton\";\r\n            const join = defines.toString();\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"viewProjection\",\r\n                \"cameraPosition\",\r\n\r\n                \"_Edge_Width_\",\r\n                \"_Edge_Color_\",\r\n                \"_Relative_Width_\",\r\n                \"_Proximity_Max_Intensity_\",\r\n                \"_Proximity_Far_Distance_\",\r\n                \"_Proximity_Near_Radius_\",\r\n                \"_Proximity_Anisotropy_\",\r\n                \"_Selection_Fuzz_\",\r\n                \"_Selected_\",\r\n                \"_Selection_Fade_\",\r\n                \"_Selection_Fade_Size_\",\r\n                \"_Selected_Distance_\",\r\n                \"_Selected_Fade_Length_\",\r\n                \"_Blob_Enable_\",\r\n                \"_Blob_Position_\",\r\n                \"_Blob_Intensity_\",\r\n                \"_Blob_Near_Size_\",\r\n                \"_Blob_Far_Size_\",\r\n                \"_Blob_Near_Distance_\",\r\n                \"_Blob_Far_Distance_\",\r\n                \"_Blob_Fade_Length_\",\r\n                \"_Blob_Inner_Fade_\",\r\n                \"_Blob_Pulse_\",\r\n                \"_Blob_Fade_\",\r\n                \"_Blob_Texture_\",\r\n                \"_Blob_Enable_2_\",\r\n                \"_Blob_Position_2_\",\r\n                \"_Blob_Near_Size_2_\",\r\n                \"_Blob_Inner_Fade_2_\",\r\n                \"_Blob_Pulse_2_\",\r\n                \"_Blob_Fade_2_\",\r\n                \"_Active_Face_Dir_\",\r\n                \"_Active_Face_Up_\",\r\n                \"_Enable_Fade_\",\r\n                \"_Fade_Width_\",\r\n                \"_Smooth_Active_Face_\",\r\n                \"_Show_Frame_\",\r\n                \"_Use_Blob_Texture_\",\r\n\r\n                \"Use_Global_Left_Index\",\r\n                \"Use_Global_Right_Index\",\r\n                \"Global_Left_Index_Tip_Position\",\r\n                \"Global_Right_Index_Tip_Position\",\r\n                \"Global_Left_Thumb_Tip_Position\",\r\n                \"Global_Right_Thumb_Tip_Position\",\r\n                \"Global_Left_Index_Tip_Proximity\",\r\n                \"Global_Right_Index_Tip_Proximity\",\r\n            ];\r\n            const samplers: string[] = [\"_Blob_Texture_\"];\r\n            const uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: 4 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines,\r\n                this._materialContext\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <FluentButtonMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n        this._activeEffect.setVector3(\"cameraPosition\", scene.activeCamera!.position);\r\n\r\n        // \"Blob Texture\"\r\n        this._activeEffect.setTexture(\"_Blob_Texture_\", this._blobTexture);\r\n\r\n        // \"Wireframe\"\r\n        this._activeEffect.setFloat(\"_Edge_Width_\", this.edgeWidth);\r\n        this._activeEffect.setColor4(\"_Edge_Color_\", new Color3(this.edgeColor.r, this.edgeColor.g, this.edgeColor.b), this.edgeColor.a);\r\n        //define _Relative_Width_ true;\r\n\r\n        // \"Proximity\"\r\n        this._activeEffect.setFloat(\"_Proximity_Max_Intensity_\", this.proximityMaxIntensity);\r\n        this._activeEffect.setFloat(\"_Proximity_Far_Distance_\", this.proximityFarDistance);\r\n        this._activeEffect.setFloat(\"_Proximity_Near_Radius_\", this.proximityNearRadius);\r\n        this._activeEffect.setFloat(\"_Proximity_Anisotropy_\", this.proximityAnisotropy);\r\n\r\n        // \"Selection\"\r\n        this._activeEffect.setFloat(\"_Selection_Fuzz_\", this.selectionFuzz);\r\n        this._activeEffect.setFloat(\"_Selected_\", this.selected);\r\n        this._activeEffect.setFloat(\"_Selection_Fade_\", this.selectionFade);\r\n        this._activeEffect.setFloat(\"_Selection_Fade_Size_\", this.selectionFadeSize);\r\n        this._activeEffect.setFloat(\"_Selected_Distance_\", this.selectedDistance);\r\n        this._activeEffect.setFloat(\"_Selected_Fade_Length_\", this.selectedFadeLength);\r\n\r\n        // \"Blob\"\r\n        this._activeEffect.setFloat(\"_Blob_Enable_\", this.leftBlobEnable ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Blob_Intensity_\", this.blobIntensity);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_\", this.leftBlobNearSize);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Size_\", this.blobFarSize);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Distance_\", this.blobNearDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Distance_\", this.blobFarDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_Length_\", this.blobFadeLength);\r\n        this._activeEffect.setFloat(\"_Blob_Inner_Fade_\", this.leftBlobInnerFade);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_\", this.leftBlobPulse);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_\", this.leftBlobFade);\r\n\r\n        // \"Blob 2\"\r\n        this._activeEffect.setFloat(\"_Blob_Enable_2_\", this.rightBlobEnable ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_2_\", this.rightBlobNearSize);\r\n        this._activeEffect.setFloat(\"_Blob_Inner_Fade_2_\", this.rightBlobInnerFade);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_2_\", this.rightBlobPulse);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_2_\", this.rightBlobFade);\r\n\r\n        // \"Active Face\"\r\n        this._activeEffect.setVector3(\"_Active_Face_Dir_\", this.activeFaceDir);\r\n        this._activeEffect.setVector3(\"_Active_Face_Up_\", this.activeFaceUp);\r\n\r\n        // \"Hololens Edge Fade\"\r\n        //define _Enable_Fade_ true;\r\n        this._activeEffect.setFloat(\"_Fade_Width_\", this.fadeWidth);\r\n        this._activeEffect.setFloat(\"_Smooth_Active_Face_\", this.smoothActiveFace ? 1.0 : 0.0);\r\n\r\n        // \"Debug\"\r\n        this._activeEffect.setFloat(\"_Show_Frame_\", this.showFrame ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Use_Blob_Texture_\", this.useBlobTexture ? 1.0 : 0.0);\r\n\r\n        // Global inputs\r\n        this._activeEffect.setFloat(\"Use_Global_Left_Index\", 1.0);\r\n        this._activeEffect.setFloat(\"Use_Global_Right_Index\", 1.0);\r\n\r\n        this._activeEffect.setVector4(\r\n            \"Global_Left_Index_Tip_Position\",\r\n            new Vector4(this.globalLeftIndexTipPosition.x, this.globalLeftIndexTipPosition.y, this.globalLeftIndexTipPosition.z, 1.0)\r\n        );\r\n        this._activeEffect.setVector4(\r\n            \"Global_Right_Index_Tip_Position\",\r\n            new Vector4(this.globalRightIndexTipPosition.x, this.globalRightIndexTipPosition.y, this.globalRightIndexTipPosition.z, 1.0)\r\n        );\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    /**\r\n     * Get the list of animatables in the material.\r\n     * @returns the list of animatables object used in the material\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): FluentButtonMaterial {\r\n        return SerializationHelper.Clone(() => new FluentButtonMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.FluentButtonMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FluentButtonMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FluentButtonMaterial {\r\n        return SerializationHelper.Parse(() => new FluentButtonMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.FluentButtonMaterial\", FluentButtonMaterial);\r\n","// Assumptions: absolute position of button mesh is inside the mesh\r\n\r\nimport { Vector3, TmpVectors } from \"core/Maths/math.vector\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport { PointerEventTypes } from \"core/Events/pointerEvents\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport { Observable } from \"core/Misc/observable\";\r\n\r\nimport { Button3D } from \"./button3D\";\r\n\r\n/**\r\n * Class used to create a touchable button in 3D\r\n */\r\nexport class TouchButton3D extends Button3D {\r\n    private _collisionMesh: Mesh;\r\n\r\n    // 'front' direction. If Vector3.Zero, there is no front and all directions of interaction are accepted\r\n    private _collidableFrontDirection: Vector3;\r\n    private _isNearPressed = false;\r\n    private _interactionSurfaceHeight = 0;\r\n\r\n    private _isToggleButton = false;\r\n    private _toggleState = false;\r\n    private _toggleButtonCallback = () => {\r\n        this._onToggle(!this._toggleState);\r\n    };\r\n\r\n    /**\r\n     * An event triggered when the button is toggled. Only fired if 'isToggleButton' is true\r\n     */\r\n    public onToggleObservable = new Observable<boolean>();\r\n\r\n    /**\r\n     * Creates a new touchable button\r\n     * @param name defines the control name\r\n     * @param collisionMesh mesh to track collisions with\r\n     */\r\n    constructor(name?: string, collisionMesh?: Mesh) {\r\n        super(name);\r\n\r\n        this.collidableFrontDirection = Vector3.Zero();\r\n\r\n        if (collisionMesh) {\r\n            this.collisionMesh = collisionMesh;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Whether the current interaction is caused by near interaction or not\r\n     */\r\n    public get isActiveNearInteraction() {\r\n        return this._isNearPressed;\r\n    }\r\n\r\n    /**\r\n     * Sets the front-facing direction of the button. Pass in Vector3.Zero to allow interactions from any direction\r\n     * @param frontWorldDir the forward direction of the button\r\n     */\r\n    public set collidableFrontDirection(frontWorldDir: Vector3) {\r\n        this._collidableFrontDirection = frontWorldDir.normalize();\r\n\r\n        if (this._collisionMesh) {\r\n            const invert = TmpVectors.Matrix[0];\r\n\r\n            invert.copyFrom(this._collisionMesh.getWorldMatrix());\r\n            invert.invert();\r\n            Vector3.TransformNormalToRef(this._collidableFrontDirection, invert, this._collidableFrontDirection);\r\n            this._collidableFrontDirection.normalize();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the front-facing direction of the button, or Vector3.Zero if there is no 'front'\r\n     */\r\n    public get collidableFrontDirection() {\r\n        if (this._collisionMesh) {\r\n            // Update the front direction to reflect any rotations of the collision mesh\r\n            const transformedDirection = TmpVectors.Vector3[0];\r\n            Vector3.TransformNormalToRef(this._collidableFrontDirection, this._collisionMesh.getWorldMatrix(), transformedDirection);\r\n\r\n            return transformedDirection.normalize();\r\n        }\r\n\r\n        return this._collidableFrontDirection;\r\n    }\r\n\r\n    /**\r\n     * Sets the mesh used for testing input collision\r\n     * @param collisionMesh the new collision mesh for the button\r\n     */\r\n    public set collisionMesh(collisionMesh: Mesh) {\r\n        // Remove the GUI3DManager's data from the previous collision mesh's reserved data store, and reset interactability\r\n        if (this._collisionMesh) {\r\n            this._collisionMesh.isNearPickable = false;\r\n            if (this._collisionMesh.reservedDataStore?.GUI3D) {\r\n                this._collisionMesh.reservedDataStore.GUI3D = {};\r\n            }\r\n\r\n            this._collisionMesh.getChildMeshes().forEach((mesh) => {\r\n                mesh.isNearPickable = false;\r\n                if (mesh.reservedDataStore?.GUI3D) {\r\n                    mesh.reservedDataStore.GUI3D = {};\r\n                }\r\n            });\r\n        }\r\n\r\n        this._collisionMesh = collisionMesh;\r\n        this._injectGUI3DReservedDataStore(this._collisionMesh).control = this;\r\n        this._collisionMesh.isNearPickable = true;\r\n\r\n        this._collisionMesh.getChildMeshes().forEach((mesh) => {\r\n            this._injectGUI3DReservedDataStore(mesh).control = this;\r\n            mesh.isNearPickable = true;\r\n        });\r\n        this.collidableFrontDirection = collisionMesh.forward;\r\n    }\r\n\r\n    /**\r\n     * Setter for if this TouchButton3D should be treated as a toggle button\r\n     * @param value If this TouchHolographicButton should act like a toggle button\r\n     */\r\n    public set isToggleButton(value: boolean) {\r\n        if (value === this._isToggleButton) {\r\n            return;\r\n        }\r\n\r\n        this._isToggleButton = value;\r\n\r\n        if (value) {\r\n            this.onPointerUpObservable.add(this._toggleButtonCallback);\r\n        } else {\r\n            this.onPointerUpObservable.removeCallback(this._toggleButtonCallback);\r\n\r\n            // Safety check, reset the button if it's toggled on but no longer a toggle button\r\n            if (this._toggleState) {\r\n                this._onToggle(false);\r\n            }\r\n        }\r\n    }\r\n    public get isToggleButton() {\r\n        return this._isToggleButton;\r\n    }\r\n\r\n    /**\r\n     * A public entrypoint to set the toggle state of the TouchHolographicButton. Only works if 'isToggleButton' is true\r\n     * @param newState The new state to set the TouchHolographicButton's toggle state to\r\n     */\r\n    public set isToggled(newState: boolean) {\r\n        if (this._isToggleButton && this._toggleState !== newState) {\r\n            this._onToggle(newState);\r\n        }\r\n    }\r\n    public get isToggled() {\r\n        return this._toggleState;\r\n    }\r\n\r\n    protected _onToggle(newState: boolean) {\r\n        this._toggleState = newState;\r\n        this.onToggleObservable.notifyObservers(newState);\r\n    }\r\n\r\n    // Returns true if the collidable is in front of the button, or if the button has no front direction\r\n    private _isInteractionInFrontOfButton(collidablePos: Vector3) {\r\n        return this._getInteractionHeight(collidablePos, this._collisionMesh.getAbsolutePosition()) > 0;\r\n    }\r\n\r\n    /**\r\n     * Get the height of the touchPoint from the collidable part of the button\r\n     * @param touchPoint the point to compare to the button, in absolute position\r\n     * @returns the depth of the touch point into the front of the button\r\n     */\r\n    public getPressDepth(touchPoint: Vector3) {\r\n        if (!this._isNearPressed) {\r\n            return 0;\r\n        }\r\n        const interactionHeight = this._getInteractionHeight(touchPoint, this._collisionMesh.getAbsolutePosition());\r\n        return this._interactionSurfaceHeight - interactionHeight;\r\n    }\r\n\r\n    // Returns true if the collidable is in front of the button, or if the button has no front direction\r\n    protected _getInteractionHeight(interactionPos: Vector3, basePos: Vector3) {\r\n        const frontDir = this.collidableFrontDirection;\r\n        if (frontDir.length() === 0) {\r\n            // The button has no front, just return the distance to the base\r\n            return Vector3.Distance(interactionPos, basePos);\r\n        }\r\n        const d = Vector3.Dot(basePos, frontDir);\r\n        const abc = Vector3.Dot(interactionPos, frontDir);\r\n\r\n        return abc - d;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _generatePointerEventType(providedType: number, nearMeshPosition: Vector3, activeInteractionCount: number): number {\r\n        if (providedType === PointerEventTypes.POINTERDOWN || providedType === PointerEventTypes.POINTERMOVE) {\r\n            if (!this._isInteractionInFrontOfButton(nearMeshPosition)) {\r\n                // Near interaction mesh is behind the button, don't send a pointer down\r\n                return PointerEventTypes.POINTERMOVE;\r\n            } else {\r\n                this._isNearPressed = true;\r\n                this._interactionSurfaceHeight = this._getInteractionHeight(nearMeshPosition, this._collisionMesh.getAbsolutePosition());\r\n            }\r\n        }\r\n        if (providedType === PointerEventTypes.POINTERUP) {\r\n            if (activeInteractionCount == 0) {\r\n                // We get the release for the down we swallowed earlier, swallow as well\r\n                return PointerEventTypes.POINTERMOVE;\r\n            } else {\r\n                this._isNearPressed = false;\r\n            }\r\n        }\r\n\r\n        return providedType;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TouchButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        return super._createNode(scene);\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        // Clean up toggle observables\r\n        this.onPointerUpObservable.removeCallback(this._toggleButtonCallback);\r\n        this.onToggleObservable.clear();\r\n\r\n        if (this._collisionMesh) {\r\n            this._collisionMesh.dispose();\r\n        }\r\n    }\r\n}\r\n","import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\r\nimport { TransformNode } from \"core/Meshes/transformNode\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\nimport { CreatePlane } from \"core/Meshes/Builders/planeBuilder\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport { FadeInOutBehavior } from \"core/Behaviors/Meshes/fadeInOutBehavior\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { FluentMaterial } from \"../materials/fluent/fluentMaterial\";\r\nimport { FluentButtonMaterial } from \"../materials/fluentButton/fluentButtonMaterial\";\r\nimport { StackPanel } from \"../../2D/controls/stackPanel\";\r\nimport { Image } from \"../../2D/controls/image\";\r\nimport { TextBlock } from \"../../2D/controls/textBlock\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport type { Control3D } from \"./control3D\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { TouchButton3D } from \"./touchButton3D\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { SceneLoader } from \"core/Loading/sceneLoader\";\r\nimport { DomManagement } from \"core/Misc/domManagement\";\r\nimport { Scalar } from \"core/Maths/math.scalar\";\r\n\r\n/**\r\n * Class used to create a holographic button in 3D\r\n * @since 5.0.0\r\n */\r\nexport class TouchHolographicButton extends TouchButton3D {\r\n    /**\r\n     * Base Url for the button model.\r\n     */\r\n    public static MODEL_BASE_URL: string = \"https://assets.babylonjs.com/meshes/MRTK/\";\r\n    /**\r\n     * File name for the button model.\r\n     */\r\n    public static MODEL_FILENAME: string = \"mrtk-fluent-button.glb\";\r\n\r\n    private _backPlate: Mesh;\r\n    private _textPlate: Mesh;\r\n    private _frontPlate: AbstractMesh;\r\n    private _text: string;\r\n    private _imageUrl: string;\r\n    private _shareMaterials = true;\r\n    private _isBackplateVisible = true;\r\n    private _frontMaterial: FluentButtonMaterial;\r\n    private _backMaterial: FluentMaterial;\r\n    private _plateMaterial: StandardMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n    private _pointerHoverObserver: Nullable<Observer<Vector3>>;\r\n    private _frontPlateDepth = 0.5;\r\n    private _backPlateDepth = 0.04;\r\n    private _backplateColor = new Color3(0.08, 0.15, 0.55);\r\n    private _backplateToggledColor = new Color3(0.25, 0.4, 0.95);\r\n\r\n    // Tooltip\r\n    private _tooltipFade: Nullable<FadeInOutBehavior>;\r\n    private _tooltipTextBlock: Nullable<TextBlock>;\r\n    private _tooltipTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _tooltipMesh: Nullable<Mesh>;\r\n    private _tooltipHoverObserver: Nullable<Observer<Control3D>>;\r\n    private _tooltipOutObserver: Nullable<Observer<Control3D>>;\r\n\r\n    private _disposeTooltip() {\r\n        this._tooltipFade = null;\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.dispose();\r\n        }\r\n        if (this._tooltipTexture) {\r\n            this._tooltipTexture.dispose();\r\n        }\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.dispose();\r\n        }\r\n        this.onPointerEnterObservable.remove(this._tooltipHoverObserver);\r\n        this.onPointerOutObservable.remove(this._tooltipOutObserver);\r\n    }\r\n\r\n    /**\r\n     * Rendering ground id of all the mesh in the button\r\n     */\r\n    public set renderingGroupId(id: number) {\r\n        this._backPlate.renderingGroupId = id;\r\n        this._textPlate.renderingGroupId = id;\r\n        this._frontPlate.renderingGroupId = id;\r\n\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.renderingGroupId = id;\r\n        }\r\n    }\r\n    public get renderingGroupId(): number {\r\n        return this._backPlate.renderingGroupId;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._backPlate as AbstractMesh;\r\n    }\r\n\r\n    /**\r\n     * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)\r\n     */\r\n    public set tooltipText(text: Nullable<string>) {\r\n        if (!text) {\r\n            this._disposeTooltip();\r\n            return;\r\n        }\r\n        if (!this._tooltipFade) {\r\n            const rightHandedScene = this._backPlate._scene.useRightHandedSystem;\r\n            // Create tooltip with mesh and text\r\n            this._tooltipMesh = CreatePlane(\"\", { size: 1 }, this._backPlate._scene);\r\n            const tooltipBackground = CreatePlane(\"\", { size: 1, sideOrientation: Mesh.DOUBLESIDE }, this._backPlate._scene);\r\n            const mat = new StandardMaterial(\"\", this._backPlate._scene);\r\n            mat.diffuseColor = Color3.FromHexString(\"#212121\");\r\n            tooltipBackground.material = mat;\r\n            tooltipBackground.isPickable = false;\r\n            this._tooltipMesh.addChild(tooltipBackground);\r\n            tooltipBackground.position = Vector3.Forward(rightHandedScene).scale(0.05);\r\n            this._tooltipMesh.scaling.y = 1 / 3;\r\n            this._tooltipMesh.position = Vector3.Up().scale(0.7).add(Vector3.Forward(rightHandedScene).scale(-0.15));\r\n            this._tooltipMesh.isPickable = false;\r\n            this._tooltipMesh.parent = this._backPlate;\r\n\r\n            // Create text texture for the tooltip\r\n            this._tooltipTexture = AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);\r\n            this._tooltipTextBlock = new TextBlock();\r\n            this._tooltipTextBlock.scaleY = 3;\r\n            this._tooltipTextBlock.color = \"white\";\r\n            this._tooltipTextBlock.fontSize = 130;\r\n            this._tooltipTexture.addControl(this._tooltipTextBlock);\r\n\r\n            // Add hover action to tooltip\r\n            this._tooltipFade = new FadeInOutBehavior();\r\n            this._tooltipFade.delay = 500;\r\n            this._tooltipMesh.addBehavior(this._tooltipFade);\r\n            this._tooltipHoverObserver = this.onPointerEnterObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(true);\r\n                }\r\n            });\r\n            this._tooltipOutObserver = this.onPointerOutObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(false);\r\n                }\r\n            });\r\n        }\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.text = text;\r\n        }\r\n    }\r\n\r\n    public get tooltipText() {\r\n        if (this._tooltipTextBlock) {\r\n            return this._tooltipTextBlock.text;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text for the button\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n\r\n        this._text = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image url for the button\r\n     */\r\n    public get imageUrl(): string {\r\n        return this._imageUrl;\r\n    }\r\n\r\n    public set imageUrl(value: string) {\r\n        if (this._imageUrl === value) {\r\n            return;\r\n        }\r\n\r\n        this._imageUrl = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets the back material used by this button\r\n     */\r\n    public get backMaterial(): FluentMaterial {\r\n        return this._backMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the front material used by this button\r\n     */\r\n    public get frontMaterial(): FluentButtonMaterial {\r\n        return this._frontMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the plate material used by this button\r\n     */\r\n    public get plateMaterial(): StandardMaterial {\r\n        return this._plateMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this button shares its material with other HolographicButtons\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Sets whether the backplate is visible or hidden. Hiding the backplate is not recommended without some sort of replacement\r\n     */\r\n    public set isBackplateVisible(isVisible: boolean) {\r\n        if (this.mesh && !!this._backMaterial) {\r\n            if (isVisible && !this._isBackplateVisible) {\r\n                this._backPlate.visibility = 1;\r\n            } else if (!isVisible && this._isBackplateVisible) {\r\n                this._backPlate.visibility = 0;\r\n            }\r\n        }\r\n\r\n        this._isBackplateVisible = isVisible;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     * @param shareMaterials\r\n     */\r\n    constructor(name?: string, shareMaterials = true) {\r\n        super(name);\r\n\r\n        this._shareMaterials = shareMaterials;\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            this._frontMaterial.leftBlobEnable = true;\r\n            this._frontMaterial.rightBlobEnable = true;\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            this._frontMaterial.leftBlobEnable = false;\r\n            this._frontMaterial.rightBlobEnable = false;\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (this._frontPlate && !this.isActiveNearInteraction) {\r\n                this._frontPlate.scaling.z = this._frontPlateDepth * 0.2;\r\n                this._frontPlate.position = Vector3.Forward(this._frontPlate._scene.useRightHandedSystem).scale((this._frontPlateDepth - 0.2 * this._frontPlateDepth) / 2);\r\n                this._textPlate.position = Vector3.Forward(this._textPlate._scene.useRightHandedSystem).scale(-(this._backPlateDepth + 0.2 * this._frontPlateDepth) / 2);\r\n            }\r\n        };\r\n        this.pointerUpAnimation = () => {\r\n            if (this._frontPlate) {\r\n                this._frontPlate.scaling.z = this._frontPlateDepth;\r\n                this._frontPlate.position = Vector3.Forward(this._frontPlate._scene.useRightHandedSystem).scale((this._frontPlateDepth - this._frontPlateDepth) / 2);\r\n                this._textPlate.position = Vector3.Forward(this._textPlate._scene.useRightHandedSystem).scale(-(this._backPlateDepth + this._frontPlateDepth) / 2);\r\n            }\r\n        };\r\n\r\n        this.onPointerMoveObservable.add((position) => {\r\n            if (this._frontPlate && this.isActiveNearInteraction) {\r\n                const scale = Vector3.Zero();\r\n                if (this._backPlate.getWorldMatrix().decompose(scale, undefined, undefined)) {\r\n                    let interactionHeight = this._getInteractionHeight(position, this._backPlate.getAbsolutePosition()) / scale.z;\r\n                    interactionHeight = Scalar.Clamp(interactionHeight - this._backPlateDepth / 2, 0.2 * this._frontPlateDepth, this._frontPlateDepth);\r\n\r\n                    this._frontPlate.scaling.z = interactionHeight;\r\n                    this._frontPlate.position = Vector3.Forward(this._frontPlate._scene.useRightHandedSystem).scale((this._frontPlateDepth - interactionHeight) / 2);\r\n                    this._textPlate.position = Vector3.Forward(this._textPlate._scene.useRightHandedSystem).scale(-(this._backPlateDepth + interactionHeight) / 2);\r\n                }\r\n            }\r\n        });\r\n\r\n        this._pointerHoverObserver = this.onPointerMoveObservable.add((hoverPosition: Vector3) => {\r\n            this._frontMaterial.globalLeftIndexTipPosition = hoverPosition;\r\n        });\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TouchHolographicButton\";\r\n    }\r\n\r\n    private _rebuildContent(): void {\r\n        this._disposeFacadeTexture();\r\n\r\n        const panel = new StackPanel();\r\n        panel.isVertical = true;\r\n\r\n        if (DomManagement.IsDocumentAvailable() && !!document.createElement) {\r\n            if (this._imageUrl) {\r\n                const image = new Image();\r\n                image.source = this._imageUrl;\r\n                image.paddingTop = \"40px\";\r\n                image.height = \"180px\";\r\n                image.width = \"100px\";\r\n                image.paddingBottom = \"40px\";\r\n                panel.addControl(image);\r\n            }\r\n        }\r\n\r\n        if (this._text) {\r\n            const text = new TextBlock();\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.height = \"30px\";\r\n            text.fontSize = 24;\r\n            panel.addControl(text);\r\n        }\r\n\r\n        this.content = panel;\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this.name = this.name ?? \"TouchHolographicButton\";\r\n        const collisionMesh = CreateBox(\r\n            `${this.name}_collisionMesh`,\r\n            {\r\n                width: 1.0,\r\n                height: 1.0,\r\n                depth: this._frontPlateDepth,\r\n            },\r\n            scene\r\n        );\r\n        collisionMesh.isPickable = true;\r\n        collisionMesh.isNearPickable = true;\r\n        collisionMesh.visibility = 0;\r\n        collisionMesh.position = Vector3.Forward(scene.useRightHandedSystem).scale(-this._frontPlateDepth / 2);\r\n\r\n        SceneLoader.ImportMeshAsync(undefined, TouchHolographicButton.MODEL_BASE_URL, TouchHolographicButton.MODEL_FILENAME, scene).then((result) => {\r\n            const alphaMesh = CreateBox(\r\n                \"${this.name}_alphaMesh\",\r\n                {\r\n                    width: 1.0,\r\n                    height: 1.0,\r\n                    depth: 1.0,\r\n                },\r\n                scene\r\n            );\r\n            alphaMesh.isPickable = false;\r\n            alphaMesh.material = new StandardMaterial(\"${this.name}_alphaMesh_material\", scene);\r\n            alphaMesh.material.alpha = 0.15;\r\n\r\n            const importedFrontPlate = result.meshes[1];\r\n            importedFrontPlate.name = `${this.name}_frontPlate`;\r\n            importedFrontPlate.isPickable = false;\r\n            importedFrontPlate.scaling.z = this._frontPlateDepth;\r\n            alphaMesh.parent = importedFrontPlate;\r\n            importedFrontPlate.parent = collisionMesh;\r\n            if (this._frontMaterial) {\r\n                importedFrontPlate.material = this._frontMaterial;\r\n            }\r\n            this._frontPlate = importedFrontPlate;\r\n        });\r\n\r\n        this._backPlate = CreateBox(\r\n            `${this.name}_backPlate`,\r\n            {\r\n                width: 1.0,\r\n                height: 1.0,\r\n                depth: this._backPlateDepth,\r\n            },\r\n            scene\r\n        );\r\n\r\n        this._backPlate.position = Vector3.Forward(scene.useRightHandedSystem).scale(this._backPlateDepth / 2);\r\n        this._backPlate.isPickable = false;\r\n\r\n        this._textPlate = <Mesh>super._createNode(scene);\r\n        this._textPlate.name = `${this.name}_textPlate`;\r\n        this._textPlate.isPickable = false;\r\n        this._textPlate.position = Vector3.Forward(scene.useRightHandedSystem).scale(-this._frontPlateDepth / 2);\r\n\r\n        this._backPlate.addChild(collisionMesh);\r\n        this._backPlate.addChild(this._textPlate);\r\n\r\n        const tn = new TransformNode(`{this.name}_root`, scene);\r\n        this._backPlate.setParent(tn);\r\n\r\n        this.collisionMesh = collisionMesh;\r\n        this.collidableFrontDirection = this._backPlate.forward.negate(); // Mesh is facing the wrong way\r\n\r\n        return tn;\r\n    }\r\n\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._plateMaterial.emissiveTexture = facadeTexture;\r\n        this._plateMaterial.opacityTexture = facadeTexture;\r\n        this._plateMaterial.diffuseColor = new Color3(0.4, 0.4, 0.4);\r\n    }\r\n\r\n    private _createBackMaterial(mesh: Mesh) {\r\n        this._backMaterial = new FluentMaterial(this.name + \"backPlateMaterial\", mesh.getScene());\r\n        this._backMaterial.albedoColor = this._backplateColor;\r\n        this._backMaterial.renderBorders = true;\r\n        this._backMaterial.renderHoverLight = false;\r\n    }\r\n\r\n    private _createFrontMaterial(mesh: Mesh) {\r\n        this._frontMaterial = new FluentButtonMaterial(this.name + \"Front Material\", mesh.getScene());\r\n    }\r\n\r\n    private _createPlateMaterial(mesh: Mesh) {\r\n        this._plateMaterial = new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\r\n        this._plateMaterial.specularColor = Color3.Black();\r\n    }\r\n\r\n    protected _onToggle(newState: boolean) {\r\n        if (this._backMaterial) {\r\n            if (newState) {\r\n                this._backMaterial.albedoColor = this._backplateToggledColor;\r\n            } else {\r\n                this._backMaterial.albedoColor = this._backplateColor;\r\n            }\r\n        }\r\n\r\n        super._onToggle(newState);\r\n    }\r\n\r\n    protected _affectMaterial(mesh: Mesh) {\r\n        if (this._shareMaterials) {\r\n            // Back\r\n            if (!this._host._touchSharedMaterials[\"backFluentMaterial\"]) {\r\n                this._createBackMaterial(mesh);\r\n                this._host._touchSharedMaterials[\"backFluentMaterial\"] = this._backMaterial;\r\n            } else {\r\n                this._backMaterial = this._host._touchSharedMaterials[\"backFluentMaterial\"] as FluentMaterial;\r\n            }\r\n\r\n            // Front\r\n            if (!this._host._touchSharedMaterials[\"frontFluentMaterial\"]) {\r\n                this._createFrontMaterial(mesh);\r\n                this._host._touchSharedMaterials[\"frontFluentMaterial\"] = this._frontMaterial;\r\n            } else {\r\n                this._frontMaterial = this._host._touchSharedMaterials[\"frontFluentMaterial\"] as FluentButtonMaterial;\r\n            }\r\n        } else {\r\n            this._createBackMaterial(mesh);\r\n            this._createFrontMaterial(mesh);\r\n        }\r\n\r\n        this._createPlateMaterial(mesh);\r\n        this._backPlate.material = this._backMaterial;\r\n        this._textPlate.material = this._plateMaterial;\r\n\r\n        if (!this._isBackplateVisible) {\r\n            this._backPlate.visibility = 0;\r\n        }\r\n        if (this._frontPlate) {\r\n            this._frontPlate.material = this._frontMaterial;\r\n        }\r\n\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        this._disposeTooltip();\r\n        this.onPointerMoveObservable.remove(this._pointerHoverObserver);\r\n\r\n        if (!this.shareMaterials) {\r\n            this._backMaterial.dispose();\r\n            this._frontMaterial.dispose();\r\n            this._plateMaterial.dispose();\r\n\r\n            if (this._pickedPointObserver) {\r\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n                this._pickedPointObserver = null;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import type { Behavior } from \"core/Behaviors/behavior\";\r\nimport { FollowBehavior } from \"core/Behaviors/Meshes/followBehavior\";\r\nimport { SixDofDragBehavior } from \"core/Behaviors/Meshes/sixDofDragBehavior\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { SurfaceMagnetismBehavior } from \"core/Behaviors/Meshes/surfaceMagnetismBehavior\";\r\nimport type { Vector3 } from \"core/Maths/math.vector\";\r\nimport type { PickingInfo } from \"core/Collisions/pickingInfo\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\n\r\n/**\r\n * Default behavior for 3D UI elements.\r\n * Handles a FollowBehavior, SixDofBehavior and SurfaceMagnetismBehavior\r\n * @since 5.0.0\r\n */\r\nexport class DefaultBehavior implements Behavior<Mesh> {\r\n    private _scene: Scene;\r\n    private _followBehavior: FollowBehavior;\r\n    private _sixDofDragBehavior: SixDofDragBehavior;\r\n    private _surfaceMagnetismBehavior: SurfaceMagnetismBehavior;\r\n    private _onBeforeRenderObserver: Nullable<Observer<Scene>>;\r\n    private _onDragObserver: Nullable<Observer<{ delta: Vector3; position: Vector3; pickInfo: PickingInfo }>>;\r\n\r\n    /**\r\n     * Instantiates the default behavior\r\n     */\r\n    constructor() {\r\n        this._followBehavior = new FollowBehavior();\r\n        this._sixDofDragBehavior = new SixDofDragBehavior();\r\n        this._surfaceMagnetismBehavior = new SurfaceMagnetismBehavior();\r\n    }\r\n\r\n    /**\r\n     * Attached node of this behavior\r\n     */\r\n    public attachedNode: Nullable<Mesh>;\r\n\r\n    /**\r\n     *  The name of the behavior\r\n     */\r\n    public get name(): string {\r\n        return \"Default\";\r\n    }\r\n\r\n    /**\r\n     *  The follow behavior\r\n     */\r\n    public get followBehavior(): FollowBehavior {\r\n        return this._followBehavior;\r\n    }\r\n\r\n    /**\r\n     *  The six DoF drag behavior\r\n     */\r\n    public get sixDofDragBehavior(): SixDofDragBehavior {\r\n        return this._sixDofDragBehavior;\r\n    }\r\n\r\n    /**\r\n     * The surface magnetism behavior\r\n     */\r\n    public get surfaceMagnetismBehavior(): SurfaceMagnetismBehavior {\r\n        return this._surfaceMagnetismBehavior;\r\n    }\r\n\r\n    /**\r\n     * Enables the follow behavior\r\n     */\r\n    public followBehaviorEnabled: boolean = false;\r\n\r\n    /**\r\n     * Enables the six DoF drag behavior\r\n     */\r\n    public sixDofDragBehaviorEnabled: boolean = true;\r\n\r\n    /**\r\n     * Enables the surface magnetism behavior\r\n     */\r\n    public surfaceMagnetismBehaviorEnabled: boolean = true;\r\n\r\n    /**\r\n     *  Initializes the behavior\r\n     */\r\n    public init() {}\r\n\r\n    /**\r\n     * Attaches the default behavior\r\n     * @param ownerMesh The top level mesh\r\n     * @param draggablesMeshes Descendant meshes that can be used for dragging the owner mesh\r\n     * @param sceneUnderstandingMeshes Meshes from the scene understanding that will be used for surface magnetism\r\n     */\r\n    public attach(ownerMesh: Mesh, draggablesMeshes?: Mesh[], sceneUnderstandingMeshes?: AbstractMesh[]): void {\r\n        this._scene = ownerMesh.getScene();\r\n        this.attachedNode = ownerMesh;\r\n\r\n        this._addObservables();\r\n        // Since our observables are bound before the child behaviors', ours are called first\r\n        this._followBehavior.attach(ownerMesh);\r\n        this._sixDofDragBehavior.attach(ownerMesh);\r\n        this._sixDofDragBehavior.draggableMeshes = draggablesMeshes || null;\r\n        this._sixDofDragBehavior.faceCameraOnDragStart = true;\r\n        this._surfaceMagnetismBehavior.attach(ownerMesh, this._scene);\r\n        if (sceneUnderstandingMeshes) {\r\n            this._surfaceMagnetismBehavior.meshes = sceneUnderstandingMeshes;\r\n        }\r\n\r\n        // We disable this behavior because we will handle pose changing event manually with sixDofDragBehavior\r\n        this._surfaceMagnetismBehavior.enabled = false;\r\n    }\r\n\r\n    /**\r\n     *  Detaches the behavior from the mesh\r\n     */\r\n    public detach(): void {\r\n        this.attachedNode = null;\r\n        this._removeObservables();\r\n        this._followBehavior.detach();\r\n        this._sixDofDragBehavior.detach();\r\n        this._surfaceMagnetismBehavior.detach();\r\n    }\r\n\r\n    private _addObservables() {\r\n        this._onBeforeRenderObserver = this._scene.onBeforeRenderObservable.add(() => {\r\n            this._followBehavior._enabled = !this._sixDofDragBehavior.isMoving && this.followBehaviorEnabled;\r\n        });\r\n        this._onDragObserver = this._sixDofDragBehavior.onDragObservable.add((event: { pickInfo: PickingInfo }) => {\r\n            this._sixDofDragBehavior.disableMovement = this._surfaceMagnetismBehavior.findAndUpdateTarget(event.pickInfo);\r\n        });\r\n    }\r\n\r\n    private _removeObservables() {\r\n        this._scene.onBeforeRenderObservable.remove(this._onBeforeRenderObserver);\r\n        this._sixDofDragBehavior.onDragObservable.remove(this._onDragObserver);\r\n    }\r\n}\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"handleVertexShader\";\nconst shader = `precision highp float;\rattribute vec3 position;\runiform vec3 positionOffset;\runiform mat4 worldViewProjection;\runiform float scale;\rvoid main(void) {\rvec4 vPos=vec4((vec3(position)+positionOffset)*scale,1.0);\rgl_Position=worldViewProjection*vPos;\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const handleVertexShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"handlePixelShader\";\nconst shader = `uniform vec3 color;\rvoid main(void) {\rgl_FragColor=vec4(color,1.0);\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const handlePixelShader = { name, shader };\n","import type { Scene } from \"core/scene\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport { TransformNode } from \"core/Meshes/transformNode\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport { HandleMaterial } from \"../materials/handle/handleMaterial\";\r\nimport type { SlateGizmo } from \"./slateGizmo\";\r\nimport { BaseSixDofDragBehavior } from \"core/Behaviors/Meshes/baseSixDofDragBehavior\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\n\r\n/**\r\n * State of the handle regarding user interaction\r\n */\r\nexport enum HandleState {\r\n    /**\r\n     * Handle is idle\r\n     */\r\n    IDLE = 0,\r\n    /**\r\n     * Handle is hovered\r\n     */\r\n    HOVER = 1,\r\n    /**\r\n     * Handle is dragged\r\n     */\r\n    DRAG = 2,\r\n}\r\n\r\n/**\r\n * Base class for SlateGizmo handles\r\n */\r\nexport abstract class GizmoHandle {\r\n    protected _scene: Scene;\r\n    protected _state: HandleState = HandleState.IDLE;\r\n    protected _materials: HandleMaterial[] = [];\r\n\r\n    private _dragStartObserver: Nullable<Observer<any>>;\r\n    private _draggingObserver: Nullable<Observer<any>>;\r\n    private _dragEndObserver: Nullable<Observer<any>>;\r\n    /**\r\n     * @internal\r\n     */\r\n    public _dragBehavior: BaseSixDofDragBehavior;\r\n\r\n    /**\r\n     * The current state of the handle\r\n     */\r\n    public get state(): HandleState {\r\n        return this._state;\r\n    }\r\n\r\n    private _gizmo: SlateGizmo;\r\n\r\n    /**\r\n     * Returns the gizmo carrying this handle\r\n     */\r\n    public get gizmo() {\r\n        return this._gizmo;\r\n    }\r\n\r\n    /**\r\n     * Sets hover state\r\n     */\r\n    public set hover(value: boolean) {\r\n        if (value) {\r\n            this._state |= HandleState.HOVER;\r\n        } else {\r\n            this._state &= ~HandleState.HOVER;\r\n        }\r\n\r\n        this._updateMaterial();\r\n    }\r\n    /**\r\n     * Sets drag state\r\n     */\r\n    public set drag(value: boolean) {\r\n        if (value) {\r\n            this._state |= HandleState.DRAG;\r\n        } else {\r\n            this._state &= ~HandleState.DRAG;\r\n        }\r\n\r\n        this._updateMaterial();\r\n    }\r\n\r\n    /**\r\n     * Node of this handle\r\n     */\r\n    public node: TransformNode;\r\n\r\n    /**\r\n     * Creates a handle for a SlateGizmo\r\n     * @param gizmo associated SlateGizmo\r\n     * @param scene scene\r\n     */\r\n    constructor(gizmo: SlateGizmo, scene: Scene) {\r\n        this._scene = scene;\r\n        this._gizmo = gizmo;\r\n\r\n        this.node = this.createNode();\r\n        this.node.reservedDataStore = {\r\n            handle: this,\r\n        };\r\n    }\r\n\r\n    protected _createMaterial(positionOffset?: Vector3) {\r\n        const mat = new HandleMaterial(\"handle\", this._scene);\r\n        if (positionOffset) {\r\n            mat._positionOffset = positionOffset;\r\n        }\r\n        return mat;\r\n    }\r\n\r\n    private _updateMaterial() {\r\n        const state = this._state;\r\n        for (const mat of this._materials) {\r\n            mat.hover = false;\r\n            mat.drag = false;\r\n        }\r\n\r\n        if (state & HandleState.DRAG) {\r\n            for (const mat of this._materials) {\r\n                mat.drag = true;\r\n            }\r\n        } else if (state & HandleState.HOVER) {\r\n            for (const mat of this._materials) {\r\n                mat.hover = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Binds callbacks from dragging interaction\r\n     * @param dragStartFn Function to call on drag start\r\n     * @param dragFn Function to call on drag\r\n     * @param dragEndFn Function to call on drag end\r\n     */\r\n    public setDragBehavior(dragStartFn: (event: { position: Vector3 }) => void, dragFn: (event: { position: Vector3 }) => void, dragEndFn: () => void) {\r\n        const dragBehavior = new BaseSixDofDragBehavior();\r\n\r\n        this._dragBehavior = dragBehavior;\r\n\r\n        this._dragStartObserver = dragBehavior.onDragStartObservable.add(dragStartFn);\r\n        this._draggingObserver = dragBehavior.onDragObservable.add(dragFn);\r\n        this._dragEndObserver = dragBehavior.onDragEndObservable.add(dragEndFn);\r\n\r\n        this._dragBehavior.attach(this.node);\r\n    }\r\n\r\n    /**\r\n     * Creates the meshes and parent node of the handle\r\n     * Should be overridden by child classes\r\n     * @returns created node\r\n     */\r\n    public abstract createNode(): TransformNode;\r\n\r\n    /**\r\n     * Disposes the handle\r\n     */\r\n    public dispose() {\r\n        this._dragBehavior.onDragStartObservable.remove(this._dragStartObserver);\r\n        this._dragBehavior.onDragObservable.remove(this._draggingObserver);\r\n        this._dragBehavior.onDragEndObservable.remove(this._dragEndObserver);\r\n\r\n        this._dragBehavior.detach();\r\n\r\n        for (const material of this._materials) {\r\n            material.dispose();\r\n        }\r\n        this.node.dispose();\r\n    }\r\n}\r\n\r\n/**\r\n * Side handle class that rotates the slate\r\n */\r\nexport class SideHandle extends GizmoHandle {\r\n    /**\r\n     * Creates the meshes and parent node of the handle\r\n     * @returns created node\r\n     */\r\n    public createNode() {\r\n        // Create a simple vertical rectangle\r\n        const verticalBox = CreateBox(\"sideVert\", { width: 1, height: 10, depth: 0.1 }, this._scene);\r\n        const sideNode = new TransformNode(\"side\", this._scene);\r\n        verticalBox.parent = sideNode;\r\n\r\n        const mat = this._createMaterial();\r\n        verticalBox.material = mat;\r\n        verticalBox.isNearGrabbable = true;\r\n        this._materials.push(mat);\r\n\r\n        return sideNode;\r\n    }\r\n}\r\n\r\n/**\r\n * Corner handle that resizes the slate\r\n */\r\nexport class CornerHandle extends GizmoHandle {\r\n    /**\r\n     * Creates the meshes and parent node of the handle\r\n     * @returns created node\r\n     */\r\n    public createNode() {\r\n        // Create 2 boxes making a bottom left corner\r\n        const horizontalBox = CreateBox(\"angleHor\", { width: 3, height: 1, depth: 0.1 }, this._scene);\r\n        const verticalBox = CreateBox(\"angleVert\", { width: 1, height: 3, depth: 0.1 }, this._scene);\r\n\r\n        const angleNode = new TransformNode(\"angle\", this._scene);\r\n        horizontalBox.parent = angleNode;\r\n        verticalBox.parent = angleNode;\r\n\r\n        horizontalBox.material = this._createMaterial(new Vector3(1, 0, 0));\r\n        verticalBox.material = this._createMaterial(new Vector3(0, 1, 0));\r\n        verticalBox.isNearGrabbable = true;\r\n        horizontalBox.isNearGrabbable = true;\r\n\r\n        this._materials.push(horizontalBox.material as HandleMaterial);\r\n        this._materials.push(verticalBox.material as HandleMaterial);\r\n        return angleNode;\r\n    }\r\n}\r\n","import { ShaderMaterial } from \"core/Materials/shaderMaterial\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Color3, TmpColors } from \"core/Maths/math.color\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\n\r\nimport \"./shaders/handle.vertex\";\r\nimport \"./shaders/handle.fragment\";\r\n\r\n/**\r\n * Class used to render gizmo handles with fluent design\r\n */\r\nexport class HandleMaterial extends ShaderMaterial {\r\n    private _hover: boolean = false;\r\n    private _drag: boolean = false;\r\n    private _onBeforeRender: Nullable<Observer<Scene>>;\r\n    private _color: Color3 = new Color3();\r\n    private _scale: number = 1;\r\n    private _targetColor: Color3;\r\n    private _targetScale: number;\r\n    private _lastTick = -1;\r\n\r\n    /**\r\n     * Is the material indicating hovering state\r\n     */\r\n    public get hover(): boolean {\r\n        return this._hover;\r\n    }\r\n\r\n    public set hover(b: boolean) {\r\n        this._hover = b;\r\n\r\n        this._updateInterpolationTarget();\r\n    }\r\n\r\n    /**\r\n     * Is the material indicating drag state\r\n     */\r\n    public get drag(): boolean {\r\n        return this._drag;\r\n    }\r\n\r\n    public set drag(b: boolean) {\r\n        this._drag = b;\r\n\r\n        this._updateInterpolationTarget();\r\n    }\r\n\r\n    /**\r\n     * Length of animation\r\n     */\r\n    public animationLength: number = 100;\r\n\r\n    /**\r\n     * Color of the handle when hovered\r\n     */\r\n    public hoverColor: Color3 = new Color3(0, 0.467, 0.84);\r\n\r\n    /**\r\n     * Color of the handle when idle\r\n     */\r\n    public baseColor: Color3 = new Color3(1, 1, 1);\r\n\r\n    /**\r\n     * Scale of the handle when hovered\r\n     */\r\n    public hoverScale: number = 0.75;\r\n\r\n    /**\r\n     * Scale of the handle when idle\r\n     */\r\n    public baseScale: number = 0.35;\r\n\r\n    /**\r\n     * Scale of the handle when dragged\r\n     */\r\n    public dragScale: number = 0.55;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _positionOffset: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * Creates a handle material\r\n     * @param name Name of the material\r\n     * @param scene Scene\r\n     */\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene, \"handle\", {\r\n            attributes: [\"position\"],\r\n            uniforms: [\"worldViewProjection\", \"color\", \"scale\", \"positionOffset\"],\r\n            needAlphaBlending: false,\r\n            needAlphaTesting: false,\r\n        });\r\n\r\n        this._updateInterpolationTarget();\r\n\r\n        // Register callback for scene after render\r\n        this._lastTick = Date.now();\r\n        this._onBeforeRender = this.getScene().onBeforeRenderObservable.add(() => {\r\n            const tick = Date.now();\r\n            const delta = tick - this._lastTick;\r\n\r\n            const scaleDiff = this._targetScale - this._scale;\r\n            const colorDiff = TmpColors.Color3[0].copyFrom(this._targetColor).subtractToRef(this._color, TmpColors.Color3[0]);\r\n\r\n            this._scale = this._scale + (scaleDiff * delta) / this.animationLength;\r\n            colorDiff.scaleToRef(delta / this.animationLength, colorDiff);\r\n            this._color.addToRef(colorDiff, this._color);\r\n\r\n            this.setColor3(\"color\", this._color);\r\n            this.setFloat(\"scale\", this._scale);\r\n            this.setVector3(\"positionOffset\", this._positionOffset);\r\n\r\n            this._lastTick = tick;\r\n        });\r\n    }\r\n\r\n    private _updateInterpolationTarget() {\r\n        if (this.drag) {\r\n            this._targetColor = this.hoverColor;\r\n            this._targetScale = this.dragScale;\r\n        } else if (this.hover) {\r\n            this._targetColor = this.hoverColor;\r\n            this._targetScale = this.hoverScale;\r\n        } else {\r\n            this._targetColor = this.baseColor;\r\n            this._targetScale = this.baseScale;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes the handle material\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n        this.getScene().onBeforeRenderObservable.remove(this._onBeforeRender);\r\n    }\r\n}\r\n","import { Gizmo } from \"core/Gizmos/gizmo\";\r\nimport { Epsilon } from \"core/Maths/math.constants\";\r\nimport { Matrix, Quaternion, TmpVectors, Vector3 } from \"core/Maths/math.vector\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { PivotTools } from \"core/Misc/pivotTools\";\r\nimport type { UtilityLayerRenderer } from \"core/Rendering/utilityLayerRenderer\";\r\nimport type { Nullable } from \"core/types\";\r\n\r\nimport type { HolographicSlate } from \"../controls/holographicSlate\";\r\nimport type { GizmoHandle } from \"./gizmoHandle\";\r\nimport { CornerHandle, SideHandle } from \"./gizmoHandle\";\r\n\r\n// Mask contains the influence of the drag offset vectors on dimensions or origin of the slate\r\n// Mask vector is multiplied to the offset vector\r\ntype HandleMasks = {\r\n    dimensions: Vector3;\r\n    origin: Vector3;\r\n};\r\n\r\n/**\r\n * Gizmo to resize 2D slates\r\n */\r\nexport class SlateGizmo extends Gizmo {\r\n    private _boundingDimensions = new Vector3(0, 0, 0);\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<AbstractMesh>>>;\r\n    private _renderObserver: Nullable<Observer<Scene>> = null;\r\n\r\n    private _tmpQuaternion = new Quaternion();\r\n    private _tmpVector = new Vector3(0, 0, 0);\r\n\r\n    // Ordered bl, br, tr, tl\r\n    private _corners: CornerHandle[] = [];\r\n    // Ordered left, bottom, right, top\r\n    private _sides: SideHandle[] = [];\r\n    private _handlesParent: TransformNode;\r\n    private _handleHovered: Nullable<GizmoHandle>;\r\n    private _handleDragged: Nullable<GizmoHandle>;\r\n\r\n    private _boundingBoxGizmo = {\r\n        min: new Vector3(),\r\n        max: new Vector3(),\r\n    };\r\n\r\n    /**\r\n     * Value we use to offset handles from mesh\r\n     */\r\n    private _margin = 0.35;\r\n    private _handleSize = 0.075;\r\n    private _attachedSlate: Nullable<HolographicSlate> = null;\r\n    private _existingSlateScale = new Vector3();\r\n    /**\r\n     * If set, the handles will increase in size based on the distance away from the camera to have a consistent screen size (Default: true)\r\n     */\r\n    public fixedScreenSize = false;\r\n    /**\r\n     * The distance away from the object which the draggable meshes should appear world sized when fixedScreenSize is set to true (default: 10)\r\n     */\r\n    public fixedScreenSizeDistanceFactor = 10;\r\n\r\n    /**\r\n     * The slate attached to this gizmo\r\n     */\r\n    public set attachedSlate(control: Nullable<HolographicSlate>) {\r\n        if (control) {\r\n            this.attachedMesh = control.mesh;\r\n            this.updateBoundingBox();\r\n\r\n            this._pickedPointObserver = control._host.onPickingObservable.add((pickedMesh) => {\r\n                if (this._handleHovered && (!pickedMesh || pickedMesh.parent !== this._handleHovered.node)) {\r\n                    this._handleHovered.hover = false;\r\n                    this._handleHovered = null;\r\n                }\r\n\r\n                if (pickedMesh && pickedMesh.parent && pickedMesh.parent.reservedDataStore && pickedMesh.parent.reservedDataStore.handle) {\r\n                    const handle = pickedMesh.parent.reservedDataStore.handle as GizmoHandle;\r\n                    if (handle.gizmo === this) {\r\n                        this._handleHovered = handle;\r\n                        this._handleHovered.hover = true;\r\n                    }\r\n                }\r\n            });\r\n        } else if (this._attachedSlate) {\r\n            this._attachedSlate._host.onPickingObservable.remove(this._pickedPointObserver);\r\n        }\r\n        this._attachedSlate = control;\r\n    }\r\n\r\n    public get attachedSlate(): Nullable<HolographicSlate> {\r\n        return this._attachedSlate;\r\n    }\r\n\r\n    constructor(utilityLayer?: UtilityLayerRenderer) {\r\n        super(utilityLayer);\r\n\r\n        this._createNode();\r\n        this.updateScale = false;\r\n\r\n        this._renderObserver = this.gizmoLayer.originalScene.onBeforeRenderObservable.add(() => {\r\n            // Only update the bounding box if scaling has changed\r\n            if (this.attachedMesh && !this._existingSlateScale.equals(this.attachedMesh.scaling)) {\r\n                this.updateBoundingBox();\r\n            }\r\n        });\r\n    }\r\n\r\n    private _createNode() {\r\n        this._handlesParent = new TransformNode(\"handlesParent\", this.gizmoLayer.utilityLayerScene);\r\n        this._handlesParent.rotationQuaternion = Quaternion.Identity();\r\n\r\n        const masksCorners = [\r\n            {\r\n                dimensions: new Vector3(-1, -1, 0),\r\n                origin: new Vector3(1, 0, 0),\r\n            },\r\n            {\r\n                dimensions: new Vector3(1, -1, 0),\r\n                origin: new Vector3(0, 0, 0),\r\n            },\r\n            {\r\n                dimensions: new Vector3(1, 1, 0),\r\n                origin: new Vector3(0, 1, 0),\r\n            },\r\n            {\r\n                dimensions: new Vector3(-1, 1, 0),\r\n                origin: new Vector3(1, 1, 0),\r\n            },\r\n        ];\r\n\r\n        for (let i = 0; i < 4; i++) {\r\n            const corner = new CornerHandle(this, this.gizmoLayer.utilityLayerScene);\r\n            this._corners.push(corner);\r\n            corner.node.rotation.z = (Math.PI / 2) * i;\r\n\r\n            corner.node.parent = this._handlesParent;\r\n            this._assignDragBehaviorCorners(\r\n                corner,\r\n                (originStart: Vector3, dimensionsStart: Vector3, offset: Vector3, masks: HandleMasks) => this._moveHandle(originStart, dimensionsStart, offset, masks, true),\r\n                masksCorners[i]\r\n            );\r\n        }\r\n\r\n        for (let i = 0; i < 4; i++) {\r\n            const side = new SideHandle(this, this.gizmoLayer.utilityLayerScene);\r\n            this._sides.push(side);\r\n            side.node.rotation.z = (Math.PI / 2) * i;\r\n            side.node.parent = this._handlesParent;\r\n            this._assignDragBehaviorSides(side, i % 2 === 0 ? new Vector3(0, 1, 0) : new Vector3(1, 0, 0));\r\n        }\r\n\r\n        this._handlesParent.parent = this._rootMesh;\r\n    }\r\n\r\n    private _keepAspectRatio(vector: Vector3, aspectRatio: number, invertDiagonal: boolean = false) {\r\n        const axis = TmpVectors.Vector3[0];\r\n        axis.copyFromFloats(aspectRatio, 1, 0).normalize();\r\n        if (invertDiagonal) {\r\n            axis.y *= -1;\r\n        }\r\n        const dot = Vector3.Dot(vector, axis);\r\n        vector.copyFrom(axis).scaleInPlace(dot);\r\n    }\r\n\r\n    private _clampDimensions(vector: Vector3, dimensions: Vector3, mask: Vector3, keepAspectRatio: boolean = false) {\r\n        const impact = TmpVectors.Vector3[0];\r\n        impact.copyFrom(vector).multiplyInPlace(mask);\r\n\r\n        const clampedDimensions = TmpVectors.Vector3[1];\r\n        clampedDimensions.copyFromFloats(\r\n            Math.max(this._attachedSlate!.minDimensions.x, impact.x + dimensions.x),\r\n            Math.max(this._attachedSlate!.minDimensions.y, impact.y + dimensions.y),\r\n            0\r\n        );\r\n\r\n        if (keepAspectRatio) {\r\n            // Extra logic to ensure the ratio is maintained when the vector has been clamped\r\n            const ratio = dimensions.x / dimensions.y;\r\n            clampedDimensions.x = Math.max(clampedDimensions.x, clampedDimensions.y * ratio);\r\n            clampedDimensions.y = Math.max(clampedDimensions.y, clampedDimensions.x / ratio);\r\n        }\r\n\r\n        // Calculating the real impact of vector on clamped dimensions\r\n        impact.copyFrom(clampedDimensions).subtractInPlace(dimensions);\r\n\r\n        vector.x = Math.sign(vector.x) * Math.abs(impact.x);\r\n        vector.y = Math.sign(vector.y) * Math.abs(impact.y);\r\n    }\r\n\r\n    private _moveHandle(originStart: Vector3, dimensionsStart: Vector3, offset: Vector3, masks: HandleMasks, isCorner: boolean) {\r\n        if (!this._attachedSlate) {\r\n            return;\r\n        }\r\n\r\n        if (isCorner) {\r\n            const aspectRatio = dimensionsStart.x / dimensionsStart.y;\r\n            this._keepAspectRatio(offset, aspectRatio, masks.dimensions.x * masks.dimensions.y < 0);\r\n        }\r\n        this._clampDimensions(offset, dimensionsStart, masks.dimensions, isCorner);\r\n\r\n        const offsetOriginMasked = TmpVectors.Vector3[0];\r\n        const offsetDimensionsMasked = TmpVectors.Vector3[1];\r\n        offsetOriginMasked.copyFrom(offset).multiplyInPlace(masks.origin);\r\n        offsetDimensionsMasked.copyFrom(offset).multiplyInPlace(masks.dimensions);\r\n\r\n        this._attachedSlate.origin.copyFrom(originStart).addInPlace(offsetOriginMasked);\r\n        this._attachedSlate.dimensions.set(dimensionsStart.x + offsetDimensionsMasked.x, dimensionsStart.y + offsetDimensionsMasked.y);\r\n    }\r\n\r\n    private _assignDragBehaviorCorners(\r\n        handle: GizmoHandle,\r\n        moveFn: (originStart: Vector3, dimensionsStart: Vector3, offset: Vector3, masks: HandleMasks) => void,\r\n        masks: HandleMasks\r\n    ) {\r\n        const dimensionsStart = new Vector3();\r\n        const originStart = new Vector3();\r\n        const dragOrigin = new Vector3();\r\n        const toObjectFrame = new Matrix();\r\n        const dragPlaneNormal = new Vector3();\r\n\r\n        const projectToRef = (position: Vector3, normal: Vector3, origin: Vector3, ref: Vector3) => {\r\n            // Projects on the plane with its normal and origin\r\n            position.subtractToRef(origin, TmpVectors.Vector3[0]);\r\n            const dot = Vector3.Dot(TmpVectors.Vector3[0], normal);\r\n            TmpVectors.Vector3[1].copyFrom(normal).scaleInPlace(dot);\r\n            TmpVectors.Vector3[0].subtractInPlace(TmpVectors.Vector3[1]);\r\n            TmpVectors.Vector3[0].addToRef(origin, ref);\r\n        };\r\n\r\n        const dragStart = (event: { position: Vector3 }) => {\r\n            if (this.attachedSlate && this.attachedMesh) {\r\n                dimensionsStart.set(this.attachedSlate.dimensions.x, this.attachedSlate.dimensions.y, Epsilon);\r\n                originStart.copyFrom(this.attachedSlate.origin);\r\n                dragOrigin.copyFrom(event.position);\r\n                toObjectFrame.copyFrom(this.attachedMesh.computeWorldMatrix(true));\r\n                toObjectFrame.invert();\r\n                this.attachedSlate._followButton.isToggled = false;\r\n                Vector3.TransformNormalToRef(Vector3.Forward(), this.attachedMesh.getWorldMatrix(), dragPlaneNormal);\r\n                dragPlaneNormal.normalize();\r\n\r\n                if (this._handleHovered) {\r\n                    this._handleDragged = this._handleHovered;\r\n                    this._handleDragged.drag = true;\r\n                }\r\n            }\r\n        };\r\n\r\n        const dragging = (event: { position: Vector3 }) => {\r\n            if (this.attachedSlate && this.attachedMesh) {\r\n                projectToRef(event.position, dragPlaneNormal, dragOrigin, this._tmpVector);\r\n                this._tmpVector.subtractInPlace(dragOrigin);\r\n                Vector3.TransformNormalToRef(this._tmpVector, toObjectFrame, this._tmpVector);\r\n\r\n                moveFn(originStart, dimensionsStart, this._tmpVector, masks);\r\n                this.attachedSlate._positionElements();\r\n                this.updateBoundingBox();\r\n            }\r\n        };\r\n\r\n        const dragEnd = () => {\r\n            if (this.attachedSlate && this.attachedNode) {\r\n                this.attachedSlate._updatePivot();\r\n\r\n                if (this._handleDragged) {\r\n                    this._handleDragged.drag = false;\r\n                    this._handleDragged = null;\r\n                }\r\n            }\r\n        };\r\n\r\n        handle.setDragBehavior(dragStart, dragging, dragEnd);\r\n    }\r\n\r\n    private _assignDragBehaviorSides(handle: GizmoHandle, dragPlaneNormal: Vector3) {\r\n        const quaternionOrigin = new Quaternion();\r\n        const dragOrigin = new Vector3();\r\n        const directionOrigin = new Vector3();\r\n        const worldPivot = new Vector3();\r\n        const worldPlaneNormal = new Vector3();\r\n\r\n        const dragStart = (event: { position: Vector3 }) => {\r\n            if (this.attachedSlate && this.attachedMesh) {\r\n                quaternionOrigin.copyFrom(this.attachedMesh.rotationQuaternion!);\r\n                dragOrigin.copyFrom(event.position);\r\n                worldPivot.copyFrom(this.attachedMesh.getAbsolutePivotPoint());\r\n                directionOrigin.copyFrom(dragOrigin).subtractInPlace(worldPivot).normalize();\r\n                this.attachedSlate._followButton.isToggled = false;\r\n                Vector3.TransformNormalToRef(dragPlaneNormal, this.attachedMesh.getWorldMatrix(), worldPlaneNormal);\r\n                worldPlaneNormal.normalize();\r\n\r\n                if (this._handleHovered) {\r\n                    this._handleDragged = this._handleHovered;\r\n                    this._handleDragged.drag = true;\r\n                }\r\n            }\r\n        };\r\n\r\n        const dragging = (event: { position: Vector3 }) => {\r\n            if (this.attachedSlate && this.attachedMesh) {\r\n                this._tmpVector.copyFrom(event.position);\r\n                this._tmpVector.subtractInPlace(worldPivot);\r\n                this._tmpVector.normalize();\r\n\r\n                const angle = -Vector3.GetAngleBetweenVectorsOnPlane(this._tmpVector, directionOrigin, worldPlaneNormal);\r\n                Quaternion.RotationAxisToRef(dragPlaneNormal, angle, this._tmpQuaternion);\r\n                quaternionOrigin.multiplyToRef(this._tmpQuaternion, this.attachedMesh.rotationQuaternion!);\r\n            }\r\n        };\r\n\r\n        const dragEnd = () => {\r\n            if (this.attachedSlate && this.attachedNode) {\r\n                this.attachedSlate._updatePivot();\r\n\r\n                if (this._handleDragged) {\r\n                    this._handleDragged.drag = false;\r\n                    this._handleDragged = null;\r\n                }\r\n            }\r\n        };\r\n\r\n        handle.setDragBehavior(dragStart, dragging, dragEnd);\r\n    }\r\n\r\n    protected _attachedNodeChanged(value: Nullable<AbstractMesh>) {\r\n        if (value) {\r\n            this.updateBoundingBox();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the bounding box information for the gizmo\r\n     */\r\n    public updateBoundingBox() {\r\n        if (this.attachedMesh) {\r\n            PivotTools._RemoveAndStorePivotPoint(this.attachedMesh);\r\n\r\n            // Store original parent\r\n            const originalParent = this.attachedMesh.parent;\r\n            this.attachedMesh.setParent(null);\r\n\r\n            this._update();\r\n\r\n            // Rotate based on axis\r\n            if (!this.attachedMesh.rotationQuaternion) {\r\n                this.attachedMesh.rotationQuaternion = Quaternion.RotationYawPitchRoll(this.attachedMesh.rotation.y, this.attachedMesh.rotation.x, this.attachedMesh.rotation.z);\r\n            }\r\n\r\n            // Store original position and reset mesh to origin before computing the bounding box\r\n            this._tmpQuaternion.copyFrom(this.attachedMesh.rotationQuaternion);\r\n            this._tmpVector.copyFrom(this.attachedMesh.position);\r\n            this.attachedMesh.rotationQuaternion.set(0, 0, 0, 1);\r\n            this.attachedMesh.position.set(0, 0, 0);\r\n\r\n            // Update bounding dimensions/positions\r\n            const boundingMinMax = this.attachedMesh.getHierarchyBoundingVectors();\r\n            boundingMinMax.max.subtractToRef(boundingMinMax.min, this._boundingDimensions);\r\n            this._boundingBoxGizmo.min = boundingMinMax.min;\r\n            this._boundingBoxGizmo.max = boundingMinMax.max;\r\n\r\n            // Update handles of the gizmo\r\n            this._updateHandlesPosition();\r\n            this._updateHandlesScaling();\r\n\r\n            // Restore position/rotation values\r\n            this.attachedMesh.rotationQuaternion.copyFrom(this._tmpQuaternion);\r\n            this.attachedMesh.position.copyFrom(this._tmpVector);\r\n\r\n            PivotTools._RestorePivotPoint(this.attachedMesh);\r\n\r\n            // Restore original parent\r\n            this.attachedMesh.setParent(originalParent);\r\n            this.attachedMesh.computeWorldMatrix(true);\r\n\r\n            this._existingSlateScale.copyFrom(this.attachedMesh.scaling);\r\n        }\r\n    }\r\n\r\n    private _updateHandlesPosition() {\r\n        const min = this._boundingBoxGizmo.min.clone();\r\n        const max = this._boundingBoxGizmo.max.clone();\r\n\r\n        const handleScaling = this._corners[0].node.scaling.length();\r\n        min.x -= this._margin * handleScaling;\r\n        min.y -= this._margin * handleScaling;\r\n        max.x += this._margin * handleScaling;\r\n        max.y += this._margin * handleScaling;\r\n\r\n        const center = min.add(max).scaleInPlace(0.5);\r\n\r\n        this._corners[0].node.position.copyFromFloats(min.x, min.y, 0);\r\n        this._corners[1].node.position.copyFromFloats(max.x, min.y, 0);\r\n        this._corners[2].node.position.copyFromFloats(max.x, max.y, 0);\r\n        this._corners[3].node.position.copyFromFloats(min.x, max.y, 0);\r\n\r\n        this._sides[0].node.position.copyFromFloats(min.x, center.y, 0);\r\n        this._sides[1].node.position.copyFromFloats(center.x, min.y, 0);\r\n        this._sides[2].node.position.copyFromFloats(max.x, center.y, 0);\r\n        this._sides[3].node.position.copyFromFloats(center.x, max.y, 0);\r\n    }\r\n\r\n    private _updateHandlesScaling() {\r\n        if (this._attachedSlate && this._attachedSlate.mesh) {\r\n            const scaledWidth = this._attachedSlate.mesh.scaling.x * this._attachedSlate.dimensions.x;\r\n            const scaledHeight = this._attachedSlate.mesh.scaling.y * this._attachedSlate.dimensions.y;\r\n            const scale = Math.min(scaledWidth, scaledHeight) * this._handleSize;\r\n            for (let index = 0; index < this._corners.length; index++) {\r\n                this._corners[index].node.scaling.setAll(scale);\r\n            }\r\n            for (let index = 0; index < this._sides.length; index++) {\r\n                this._sides[index].node.scaling.setAll(scale);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _update() {\r\n        super._update();\r\n\r\n        if (!this.gizmoLayer.utilityLayerScene.activeCamera) {\r\n            return;\r\n        }\r\n\r\n        if (this._attachedSlate && this._attachedSlate.mesh) {\r\n            if (this.fixedScreenSize) {\r\n                this._attachedSlate.mesh.absolutePosition.subtractToRef(this.gizmoLayer.utilityLayerScene.activeCamera.position, this._tmpVector);\r\n                const distanceFromCamera = (this._handleSize * this._tmpVector.length()) / this.fixedScreenSizeDistanceFactor;\r\n                for (let i = 0; i < this._corners.length; i++) {\r\n                    this._corners[i].node.scaling.set(distanceFromCamera, distanceFromCamera, distanceFromCamera);\r\n                }\r\n                for (let i = 0; i < this._sides.length; i++) {\r\n                    this._sides[i].node.scaling.set(distanceFromCamera, distanceFromCamera, distanceFromCamera);\r\n                }\r\n            }\r\n            this._updateHandlesPosition();\r\n        }\r\n    }\r\n\r\n    public dispose() {\r\n        this.gizmoLayer.originalScene.onBeforeRenderObservable.remove(this._renderObserver);\r\n\r\n        // Will dispose rootMesh and all descendants\r\n        super.dispose();\r\n\r\n        for (const corner of this._corners) {\r\n            corner.dispose();\r\n        }\r\n\r\n        for (const side of this._sides) {\r\n            side.dispose();\r\n        }\r\n    }\r\n}\r\n","import { ContentDisplay3D } from \"./contentDisplay3D\";\r\nimport type { Control3D } from \"./control3D\";\r\nimport { TouchHolographicButton } from \"./touchHolographicButton\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control } from \"../../2D/controls/control\";\r\nimport { TextBlock, TextWrapping } from \"../../2D/controls/textBlock\";\r\nimport { DefaultBehavior } from \"../behaviors/defaultBehavior\";\r\nimport { SlateGizmo } from \"../gizmos/slateGizmo\";\r\nimport { FluentMaterial } from \"../materials/fluent/fluentMaterial\";\r\nimport { FluentBackplateMaterial } from \"../materials/fluentBackplate/fluentBackplateMaterial\";\r\nimport { PointerDragBehavior } from \"core/Behaviors/Meshes/pointerDragBehavior\";\r\nimport type { Texture } from \"core/Materials/Textures/texture\";\r\nimport { Vector4 } from \"core/Maths/math\";\r\nimport { Epsilon } from \"core/Maths/math.constants\";\r\nimport { Scalar } from \"core/Maths/math.scalar\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Quaternion, Vector2, Vector3 } from \"core/Maths/math.vector\";\r\nimport { Viewport } from \"core/Maths/math.viewport\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport { CreatePlane } from \"core/Meshes/Builders/planeBuilder\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\nimport { VertexData } from \"core/Meshes/mesh.vertexData\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { Nullable } from \"core/types\";\r\n\r\n/**\r\n * Class used to create a holographic slate\r\n * @since 5.0.0\r\n */\r\nexport class HolographicSlate extends ContentDisplay3D {\r\n    /**\r\n     * Base Url for the assets.\r\n     */\r\n    public static ASSETS_BASE_URL: string = \"https://assets.babylonjs.com/meshes/MRTK/\";\r\n    /**\r\n     * File name for the close icon.\r\n     */\r\n    public static CLOSE_ICON_FILENAME: string = \"IconClose.png\";\r\n    /**\r\n     * File name for the close icon.\r\n     */\r\n    public static FOLLOW_ICON_FILENAME: string = \"IconFollowMe.png\";\r\n\r\n    private static _DEFAULT_TEXT_RESOLUTION_Y = 102.4;\r\n\r\n    /**\r\n     * Margin between title bar and contentplate\r\n     */\r\n    public titleBarMargin = 0.005;\r\n\r\n    /**\r\n     * Origin in local coordinates (top left corner)\r\n     */\r\n    public origin = new Vector3(0, 0, 0);\r\n\r\n    private _dimensions = new Vector2(21.875, 12.5);\r\n    private _titleBarHeight = 0.625;\r\n\r\n    private _titleBarMaterial: FluentBackplateMaterial;\r\n    private _backMaterial: FluentBackplateMaterial;\r\n    private _contentMaterial: FluentMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n    private _positionChangedObserver: Nullable<Observer<{ position: Vector3 }>>;\r\n\r\n    private _titleText = \"\";\r\n    private _titleTextComponent: TextBlock;\r\n\r\n    private _contentViewport: Viewport;\r\n    private _contentDragBehavior: PointerDragBehavior;\r\n\r\n    private _defaultBehavior: DefaultBehavior;\r\n    /**\r\n     * Regroups all mesh behaviors for the slate\r\n     */\r\n    public get defaultBehavior(): DefaultBehavior {\r\n        return this._defaultBehavior;\r\n    }\r\n\r\n    /** @internal */\r\n    public _gizmo: SlateGizmo;\r\n\r\n    protected _titleBar: Mesh;\r\n    protected _titleBarTitle: Mesh;\r\n    protected _contentPlate: Mesh;\r\n    protected _backPlate: Mesh;\r\n    /** @internal */\r\n    public _followButton: TouchHolographicButton;\r\n    protected _closeButton: TouchHolographicButton;\r\n    protected _contentScaleRatio = 1;\r\n\r\n    /**\r\n     * 2D dimensions of the slate\r\n     */\r\n    public get dimensions() {\r\n        return this._dimensions;\r\n    }\r\n    public set dimensions(value) {\r\n        //clamp, respecting ratios\r\n        let scale = 1.0;\r\n        if (value.x < this.minDimensions.x || value.y < this.minDimensions.y) {\r\n            const newRatio = value.x / value.y;\r\n            const minRatio = this.minDimensions.x / this.minDimensions.y;\r\n            if (minRatio > newRatio) {\r\n                // We just need to make sure the x-val is greater than the min\r\n                scale = this.minDimensions.x / value.x;\r\n            } else {\r\n                // We just need to make sure the y-val is greater than the min\r\n                scale = this.minDimensions.y / value.y;\r\n            }\r\n        }\r\n\r\n        this._dimensions.copyFrom(value).scaleInPlace(scale);\r\n        this._updatePivot();\r\n        this._positionElements();\r\n    }\r\n\r\n    /**\r\n     * Minimum dimensions of the slate\r\n     */\r\n    public minDimensions = new Vector2(15.625, 6.25);\r\n\r\n    /**\r\n     * Default dimensions of the slate\r\n     */\r\n    public readonly defaultDimensions = this._dimensions.clone();\r\n\r\n    /**\r\n     * Height of the title bar component\r\n     */\r\n    public get titleBarHeight() {\r\n        return this._titleBarHeight;\r\n    }\r\n    public set titleBarHeight(value) {\r\n        this._titleBarHeight = value;\r\n    }\r\n\r\n    /**\r\n     * Rendering ground id of all the meshes\r\n     */\r\n    public set renderingGroupId(id: number) {\r\n        this._titleBar.renderingGroupId = id;\r\n        this._titleBarTitle.renderingGroupId = id;\r\n        this._contentPlate.renderingGroupId = id;\r\n        this._backPlate.renderingGroupId = id;\r\n    }\r\n    public get renderingGroupId(): number {\r\n        return this._titleBar.renderingGroupId;\r\n    }\r\n\r\n    /**\r\n     * The title text displayed at the top of the slate\r\n     */\r\n    public set title(title: string) {\r\n        this._titleText = title;\r\n        if (this._titleTextComponent) {\r\n            this._titleTextComponent.text = title;\r\n        }\r\n    }\r\n    public get title() {\r\n        return this._titleText;\r\n    }\r\n\r\n    /**\r\n     * Creates a new slate\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        this._followButton = new TouchHolographicButton(\"followButton\" + this.name);\r\n        this._followButton.isToggleButton = true;\r\n        this._closeButton = new TouchHolographicButton(\"closeButton\" + this.name);\r\n\r\n        this._contentViewport = new Viewport(0, 0, 1, 1);\r\n        this._contentDragBehavior = new PointerDragBehavior({\r\n            dragPlaneNormal: new Vector3(0, 0, -1),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Apply the facade texture (created from the content property).\r\n     * This function can be overloaded by child classes\r\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\r\n     */\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._contentMaterial.albedoTexture = facadeTexture;\r\n        this._resetContentPositionAndZoom();\r\n        this._applyContentViewport();\r\n\r\n        facadeTexture.attachToMesh(this._contentPlate, true);\r\n    }\r\n\r\n    private _addControl(control: Control3D): void {\r\n        control._host = this._host;\r\n        if (this._host.utilityLayer) {\r\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\r\n        }\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"HolographicSlate\";\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _positionElements() {\r\n        const followButton = this._followButton;\r\n        const closeButton = this._closeButton;\r\n        const titleBar = this._titleBar;\r\n        const titleBarTitle = this._titleBarTitle;\r\n        const contentPlate = this._contentPlate;\r\n        const backPlate = this._backPlate;\r\n\r\n        if (followButton && closeButton && titleBar) {\r\n            closeButton.scaling.setAll(this.titleBarHeight);\r\n            followButton.scaling.setAll(this.titleBarHeight);\r\n            closeButton.position.copyFromFloats(this.dimensions.x - this.titleBarHeight / 2, -this.titleBarHeight / 2, 0).addInPlace(this.origin);\r\n            followButton.position.copyFromFloats(this.dimensions.x - (3 * this.titleBarHeight) / 2, -this.titleBarHeight / 2, 0).addInPlace(this.origin);\r\n\r\n            const contentPlateHeight = this.dimensions.y - this.titleBarHeight - this.titleBarMargin;\r\n            const rightHandScene = contentPlate.getScene().useRightHandedSystem;\r\n\r\n            titleBar.scaling.set(this.dimensions.x, this.titleBarHeight, Epsilon);\r\n            titleBarTitle.scaling.set(this.dimensions.x - 2 * this.titleBarHeight, this.titleBarHeight, Epsilon);\r\n            contentPlate.scaling.copyFromFloats(this.dimensions.x, contentPlateHeight, Epsilon);\r\n            backPlate.scaling.copyFromFloats(this.dimensions.x, contentPlateHeight, Epsilon);\r\n\r\n            titleBar.position.copyFromFloats(this.dimensions.x / 2, -(this.titleBarHeight / 2), 0).addInPlace(this.origin);\r\n            titleBarTitle.position\r\n                .copyFromFloats(this.dimensions.x / 2 - this.titleBarHeight, -(this.titleBarHeight / 2), rightHandScene ? Epsilon : -Epsilon)\r\n                .addInPlace(this.origin);\r\n            contentPlate.position.copyFromFloats(this.dimensions.x / 2, -(this.titleBarHeight + this.titleBarMargin + contentPlateHeight / 2), 0).addInPlace(this.origin);\r\n            backPlate.position\r\n                .copyFromFloats(this.dimensions.x / 2, -(this.titleBarHeight + this.titleBarMargin + contentPlateHeight / 2), rightHandScene ? -Epsilon : Epsilon)\r\n                .addInPlace(this.origin);\r\n\r\n            // Update the title's AdvancedDynamicTexture scale to avoid visual stretching\r\n            this._titleTextComponent.host.scaleTo(\r\n                (HolographicSlate._DEFAULT_TEXT_RESOLUTION_Y * titleBarTitle.scaling.x) / titleBarTitle.scaling.y,\r\n                HolographicSlate._DEFAULT_TEXT_RESOLUTION_Y\r\n            );\r\n\r\n            const aspectRatio = this.dimensions.x / contentPlateHeight;\r\n            this._contentViewport.width = this._contentScaleRatio;\r\n            this._contentViewport.height = this._contentScaleRatio / aspectRatio;\r\n\r\n            this._applyContentViewport();\r\n            if (this._gizmo) {\r\n                this._gizmo.updateBoundingBox();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _applyContentViewport() {\r\n        if (this._contentPlate?.material && (this._contentPlate.material as FluentMaterial).albedoTexture) {\r\n            const tex = (this._contentPlate.material as FluentMaterial).albedoTexture as Texture;\r\n            tex.uScale = this._contentScaleRatio;\r\n            tex.vScale = (this._contentScaleRatio / this._contentViewport.width) * this._contentViewport.height;\r\n            tex.uOffset = this._contentViewport.x;\r\n            tex.vOffset = this._contentViewport.y;\r\n        }\r\n    }\r\n\r\n    private _resetContentPositionAndZoom() {\r\n        this._contentViewport.x = 0;\r\n        this._contentViewport.y = 1 - this._contentViewport.height / this._contentViewport.width;\r\n        this._contentScaleRatio = 1;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _updatePivot() {\r\n        if (!this.mesh) {\r\n            return;\r\n        }\r\n\r\n        // Update pivot point so it is at the center of geometry\r\n        // As origin is topleft corner in 2D, dimensions are calculated towards bottom right corner, thus y axis is downwards\r\n        const center = new Vector3(this.dimensions.x * 0.5, -this.dimensions.y * 0.5, Epsilon);\r\n        center.addInPlace(this.origin);\r\n        center.z = 0;\r\n\r\n        const origin = new Vector3(0, 0, 0);\r\n        Vector3.TransformCoordinatesToRef(origin, this.mesh.computeWorldMatrix(true), origin);\r\n        this.mesh.setPivotPoint(center);\r\n        const origin2 = new Vector3(0, 0, 0);\r\n        Vector3.TransformCoordinatesToRef(origin2, this.mesh.computeWorldMatrix(true), origin2);\r\n        this.mesh.position.addInPlace(origin).subtractInPlace(origin2);\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        const node = new Mesh(\"slate_\" + this.name, scene);\r\n\r\n        this._titleBar = CreateBox(\"titleBar_\" + this.name, { size: 1 }, scene);\r\n        this._titleBarTitle = CreatePlane(\"titleText_\" + this.name, { size: 1 }, scene);\r\n        this._titleBarTitle.parent = node;\r\n        this._titleBarTitle.isPickable = false;\r\n\r\n        const adt = AdvancedDynamicTexture.CreateForMesh(this._titleBarTitle);\r\n        this._titleTextComponent = new TextBlock(\"titleText_\" + this.name, this._titleText);\r\n        this._titleTextComponent.textWrapping = TextWrapping.Ellipsis;\r\n        this._titleTextComponent.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._titleTextComponent.color = \"white\";\r\n        this._titleTextComponent.fontSize = HolographicSlate._DEFAULT_TEXT_RESOLUTION_Y / 2;\r\n        this._titleTextComponent.paddingLeft = HolographicSlate._DEFAULT_TEXT_RESOLUTION_Y / 4;\r\n        adt.addControl(this._titleTextComponent);\r\n\r\n        if (scene.useRightHandedSystem) {\r\n            const faceUV = new Vector4(0, 0, 1, 1);\r\n            this._contentPlate = CreatePlane(\"contentPlate_\" + this.name, { size: 1, sideOrientation: VertexData.BACKSIDE, frontUVs: faceUV }, scene);\r\n            this._backPlate = CreatePlane(\"backPlate_\" + this.name, { size: 1, sideOrientation: VertexData.FRONTSIDE }, scene);\r\n        } else {\r\n            const faceUV = new Vector4(0, 0, 1, 1);\r\n            this._contentPlate = CreatePlane(\"contentPlate_\" + this.name, { size: 1, sideOrientation: VertexData.FRONTSIDE, frontUVs: faceUV }, scene);\r\n            this._backPlate = CreatePlane(\"backPlate_\" + this.name, { size: 1, sideOrientation: VertexData.BACKSIDE }, scene);\r\n        }\r\n\r\n        this._titleBar.parent = node;\r\n        this._titleBar.isNearGrabbable = true;\r\n        this._contentPlate.parent = node;\r\n        this._backPlate.parent = node;\r\n        this._attachContentPlateBehavior();\r\n\r\n        this._addControl(this._followButton);\r\n        this._addControl(this._closeButton);\r\n\r\n        const followButton = this._followButton;\r\n        const closeButton = this._closeButton;\r\n\r\n        followButton.node!.parent = node;\r\n        closeButton.node!.parent = node;\r\n\r\n        this._positionElements();\r\n\r\n        this._followButton.imageUrl = HolographicSlate.ASSETS_BASE_URL + HolographicSlate.FOLLOW_ICON_FILENAME;\r\n        this._closeButton.imageUrl = HolographicSlate.ASSETS_BASE_URL + HolographicSlate.CLOSE_ICON_FILENAME;\r\n\r\n        this._followButton.isBackplateVisible = false;\r\n        this._closeButton.isBackplateVisible = false;\r\n\r\n        this._followButton.onToggleObservable.add((isToggled) => {\r\n            this._defaultBehavior.followBehaviorEnabled = isToggled;\r\n            if (this._defaultBehavior.followBehaviorEnabled) {\r\n                this._defaultBehavior.followBehavior.recenter();\r\n            }\r\n        });\r\n\r\n        this._closeButton.onPointerClickObservable.add(() => {\r\n            this.dispose();\r\n        });\r\n\r\n        node.rotationQuaternion = Quaternion.Identity();\r\n        node.isVisible = false;\r\n\r\n        return node;\r\n    }\r\n\r\n    private _attachContentPlateBehavior() {\r\n        this._contentDragBehavior.attach(this._contentPlate);\r\n        this._contentDragBehavior.moveAttached = false;\r\n        this._contentDragBehavior.useObjectOrientationForDragging = true;\r\n        this._contentDragBehavior.updateDragPlane = false;\r\n\r\n        const origin = new Vector3();\r\n        const worldDimensions = new Vector3();\r\n        const upWorld = new Vector3();\r\n        const rightWorld = new Vector3();\r\n        const projectedOffset = new Vector2();\r\n        let startViewport: Viewport;\r\n        let worldMatrix: Matrix;\r\n\r\n        this._contentDragBehavior.onDragStartObservable.add((event) => {\r\n            if (!this.node) {\r\n                return;\r\n            }\r\n            startViewport = this._contentViewport.clone();\r\n            worldMatrix = this.node.computeWorldMatrix(true);\r\n\r\n            origin.copyFrom(event.dragPlanePoint);\r\n            worldDimensions.set(this.dimensions.x, this.dimensions.y, Epsilon);\r\n            worldDimensions.y -= this.titleBarHeight + this.titleBarMargin;\r\n            Vector3.TransformNormalToRef(worldDimensions, worldMatrix, worldDimensions);\r\n            upWorld.copyFromFloats(0, 1, 0);\r\n            Vector3.TransformNormalToRef(upWorld, worldMatrix, upWorld);\r\n            rightWorld.copyFromFloats(1, 0, 0);\r\n            Vector3.TransformNormalToRef(rightWorld, worldMatrix, rightWorld);\r\n            upWorld.normalize();\r\n            upWorld.scaleInPlace(1 / Vector3.Dot(upWorld, worldDimensions));\r\n            rightWorld.normalize();\r\n            rightWorld.scaleInPlace(1 / Vector3.Dot(rightWorld, worldDimensions));\r\n        });\r\n\r\n        const offset = new Vector3();\r\n        this._contentDragBehavior.onDragObservable.add((event) => {\r\n            offset.copyFrom(event.dragPlanePoint);\r\n            offset.subtractInPlace(origin);\r\n            projectedOffset.copyFromFloats(Vector3.Dot(offset, rightWorld), Vector3.Dot(offset, upWorld));\r\n\r\n            // By default, content takes full width available and height is cropped to keep aspect ratio\r\n            this._contentViewport.x = Scalar.Clamp(startViewport.x - offset.x, 0, 1 - this._contentViewport.width * this._contentScaleRatio);\r\n            this._contentViewport.y = Scalar.Clamp(startViewport.y - offset.y, 0, 1 - this._contentViewport.height * this._contentScaleRatio);\r\n            this._applyContentViewport();\r\n        });\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        // TODO share materials\r\n        this._titleBarMaterial = new FluentBackplateMaterial(`${this.name} plateMaterial`, mesh.getScene());\r\n\r\n        this._contentMaterial = new FluentMaterial(`${this.name} contentMaterial`, mesh.getScene());\r\n        this._contentMaterial.renderBorders = true;\r\n\r\n        this._backMaterial = new FluentBackplateMaterial(`${this.name} backPlate`, mesh.getScene());\r\n        this._backMaterial.lineWidth = Epsilon;\r\n        this._backMaterial.radius = 0.005;\r\n        this._backMaterial.backFaceCulling = true;\r\n\r\n        this._titleBar.material = this._titleBarMaterial;\r\n        this._contentPlate.material = this._contentMaterial;\r\n        this._backPlate.material = this._backMaterial;\r\n\r\n        this._resetContent();\r\n        this._applyContentViewport();\r\n    }\r\n\r\n    /**\r\n     * @internal*\r\n     */\r\n    public _prepareNode(scene: Scene): void {\r\n        super._prepareNode(scene);\r\n        this._gizmo = new SlateGizmo(this._host.utilityLayer!);\r\n        this._gizmo.attachedSlate = this;\r\n        this._defaultBehavior = new DefaultBehavior();\r\n        this._defaultBehavior.attach(this.node as Mesh, [this._titleBar]);\r\n        this._defaultBehavior.sixDofDragBehavior.onDragStartObservable.add(() => {\r\n            this._followButton.isToggled = false;\r\n        });\r\n\r\n        this._positionChangedObserver = this._defaultBehavior.sixDofDragBehavior.onPositionChangedObservable.add(() => {\r\n            this._gizmo.updateBoundingBox();\r\n        });\r\n\r\n        this._updatePivot();\r\n        this.resetDefaultAspectAndPose(false);\r\n    }\r\n\r\n    /**\r\n     * Resets the aspect and pose of the slate so it is right in front of the active camera, facing towards it.\r\n     * @param resetAspect Should the slate's dimensions/aspect ratio be reset as well\r\n     */\r\n    public resetDefaultAspectAndPose(resetAspect: boolean = true) {\r\n        if (!this._host || !this._host.utilityLayer || !this.node) {\r\n            return;\r\n        }\r\n        const scene = this._host.utilityLayer.utilityLayerScene;\r\n        const camera = scene.activeCamera;\r\n        if (camera) {\r\n            const worldMatrix = camera.getWorldMatrix();\r\n            const backward = Vector3.TransformNormal(Vector3.Backward(scene.useRightHandedSystem), worldMatrix);\r\n            this.origin.setAll(0);\r\n            this._gizmo.updateBoundingBox();\r\n            const pivot = this.node.getAbsolutePivotPoint();\r\n            this.node.position.copyFrom(camera.position).subtractInPlace(backward).subtractInPlace(pivot);\r\n            this.node.rotationQuaternion = Quaternion.FromLookDirectionLH(backward, new Vector3(0, 1, 0));\r\n\r\n            if (resetAspect) {\r\n                this.dimensions = this.defaultDimensions;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n        this._titleBarMaterial.dispose();\r\n        this._contentMaterial.dispose();\r\n\r\n        this._titleBar.dispose();\r\n        this._titleBarTitle.dispose();\r\n        this._contentPlate.dispose();\r\n        this._backPlate.dispose();\r\n\r\n        this._followButton.dispose();\r\n        this._closeButton.dispose();\r\n\r\n        this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n        this._defaultBehavior.sixDofDragBehavior.onPositionChangedObservable.remove(this._positionChangedObserver);\r\n\r\n        this._defaultBehavior.detach();\r\n        this._gizmo.dispose();\r\n        this._contentDragBehavior.detach();\r\n    }\r\n}\r\n","import type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport { Button3D } from \"./button3D\";\r\n\r\n/**\r\n * Class used to create an interactable object. It's a 3D button using a mesh coming from the current scene\r\n */\r\nexport class MeshButton3D extends Button3D {\r\n    /** @internal */\r\n    protected _currentMesh: Mesh;\r\n\r\n    /**\r\n     * Creates a new 3D button based on a mesh\r\n     * @param mesh mesh to become a 3D button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(mesh: Mesh, name?: string) {\r\n        super(name);\r\n        this._currentMesh = mesh;\r\n\r\n        /**\r\n         * Provides a default behavior on hover/out & up/down\r\n         * Override those function to create your own desired behavior specific to your mesh\r\n         */\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.1);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 1.1);\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MeshButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._currentMesh.getChildMeshes().forEach((mesh) => {\r\n            this._injectGUI3DReservedDataStore(mesh).control = this;\r\n        });\r\n        return this._currentMesh;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _affectMaterial(mesh: AbstractMesh) {}\r\n}\r\n","import type { Scene } from \"core/scene\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport { TouchHolographicButton } from \"./touchHolographicButton\";\r\nimport { DefaultBehavior } from \"../behaviors/defaultBehavior\";\r\nimport { TouchHolographicMenu } from \"./touchHolographicMenu\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport type { Vector3 } from \"core/Maths/math.vector\";\r\nimport type { PickingInfo } from \"core/Collisions/pickingInfo\";\r\n\r\n/**\r\n * NearMenu that displays buttons and follows the camera\r\n * @since 5.0.0\r\n */\r\nexport class NearMenu extends TouchHolographicMenu {\r\n    /**\r\n     * Base Url for the assets.\r\n     */\r\n    private static _ASSETS_BASE_URL: string = \"https://assets.babylonjs.com/meshes/MRTK/\";\r\n    /**\r\n     * File name for the close icon.\r\n     */\r\n    private static _PIN_ICON_FILENAME: string = \"IconPin.png\";\r\n\r\n    private _pinButton: TouchHolographicButton;\r\n    private _dragObserver: Nullable<\r\n        Observer<{\r\n            delta: Vector3;\r\n            position: Vector3;\r\n            pickInfo: PickingInfo;\r\n        }>\r\n    >;\r\n\r\n    private _defaultBehavior: DefaultBehavior;\r\n    /**\r\n     * Regroups all mesh behaviors for the near menu\r\n     */\r\n    public get defaultBehavior(): DefaultBehavior {\r\n        return this._defaultBehavior;\r\n    }\r\n\r\n    private _isPinned: boolean = false;\r\n    /**\r\n     * Indicates if the near menu is world-pinned\r\n     */\r\n    public get isPinned(): boolean {\r\n        return this._isPinned;\r\n    }\r\n\r\n    public set isPinned(value: boolean) {\r\n        // Tell the pin button to toggle if this was called manually, for clean state control\r\n        if (this._pinButton.isToggled !== value) {\r\n            this._pinButton.isToggled = value;\r\n            return;\r\n        }\r\n\r\n        this._isPinned = value;\r\n\r\n        if (value) {\r\n            this._defaultBehavior.followBehaviorEnabled = false;\r\n        } else {\r\n            this._defaultBehavior.followBehaviorEnabled = true;\r\n        }\r\n    }\r\n\r\n    private _createPinButton(parent: TransformNode) {\r\n        const control = new TouchHolographicButton(\"pin\" + this.name, false);\r\n        control.imageUrl = NearMenu._ASSETS_BASE_URL + NearMenu._PIN_ICON_FILENAME;\r\n        control.parent = this;\r\n        control._host = this._host;\r\n        control.isToggleButton = true;\r\n        control.onToggleObservable.add((newState) => {\r\n            this.isPinned = newState;\r\n        });\r\n\r\n        if (this._host.utilityLayer) {\r\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\r\n            control.scaling.scaleInPlace(TouchHolographicMenu.MENU_BUTTON_SCALE);\r\n\r\n            if (control.node) {\r\n                control.node.parent = parent;\r\n            }\r\n        }\r\n\r\n        return control;\r\n    }\r\n\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        const node = super._createNode(scene)! as Mesh;\r\n\r\n        this._pinButton = this._createPinButton(node);\r\n        this.isPinned = false;\r\n\r\n        this._defaultBehavior.attach(node, [this._backPlate]);\r\n        this._defaultBehavior.followBehavior.ignoreCameraPitchAndRoll = true;\r\n        this._defaultBehavior.followBehavior.pitchOffset = -15;\r\n        this._defaultBehavior.followBehavior.minimumDistance = 0.3;\r\n        this._defaultBehavior.followBehavior.defaultDistance = 0.4;\r\n        this._defaultBehavior.followBehavior.maximumDistance = 0.6;\r\n\r\n        this._backPlate.isNearGrabbable = true;\r\n        node.isVisible = false;\r\n\r\n        return node;\r\n    }\r\n\r\n    protected _finalProcessing() {\r\n        super._finalProcessing();\r\n\r\n        this._pinButton.position.copyFromFloats((this._backPlate.scaling.x + TouchHolographicMenu.MENU_BUTTON_SCALE) / 2, this._backPlate.scaling.y / 2, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a near menu GUI 3D control\r\n     * @param name name of the near menu\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        this._defaultBehavior = new DefaultBehavior();\r\n        this._dragObserver = this._defaultBehavior.sixDofDragBehavior.onDragObservable.add(() => {\r\n            this.isPinned = true;\r\n        });\r\n\r\n        this.backPlateMargin = 1;\r\n    }\r\n\r\n    /**\r\n     * Disposes the near menu\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._defaultBehavior.sixDofDragBehavior.onDragObservable.remove(this._dragObserver);\r\n        this._defaultBehavior.detach();\r\n    }\r\n}\r\n","import { TmpVectors, Vector3 } from \"core/Maths/math.vector\";\r\n\r\nimport { Container3D } from \"./container3D\";\r\nimport type { Control3D } from \"./control3D\";\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a plane\r\n */\r\nexport class PlanePanel extends VolumeBasedPanel {\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        const mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        control.position = nodePosition.clone();\r\n        const target = TmpVectors.Vector3[0];\r\n\r\n        target.copyFrom(nodePosition);\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                target.addInPlace(new Vector3(0, 0, 1));\r\n                mesh.lookAt(target);\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                target.addInPlace(new Vector3(0, 0, -1));\r\n                mesh.lookAt(target);\r\n                break;\r\n        }\r\n    }\r\n}\r\n","import { Tools } from \"core/Misc/tools\";\r\nimport { TmpVectors, Vector3 } from \"core/Maths/math.vector\";\r\nimport type { float } from \"core/types\";\r\n\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport type { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel where items get randomized planar mapping\r\n */\r\nexport class ScatterPanel extends VolumeBasedPanel {\r\n    private _iteration = 100.0;\r\n\r\n    /**\r\n     * Gets or sets the number of iteration to use to scatter the controls (100 by default)\r\n     */\r\n    public get iteration(): float {\r\n        return this._iteration;\r\n    }\r\n\r\n    public set iteration(value: float) {\r\n        if (this._iteration === value) {\r\n            return;\r\n        }\r\n\r\n        this._iteration = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        const mesh = control.mesh;\r\n        const newPos = this._scatterMapping(nodePosition);\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, 1));\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, -1));\r\n                break;\r\n        }\r\n\r\n        control.position = newPos;\r\n    }\r\n\r\n    private _scatterMapping(source: Vector3): Vector3 {\r\n        source.x = (1.0 - Math.random() * 2.0) * this._cellWidth;\r\n        source.y = (1.0 - Math.random() * 2.0) * this._cellHeight;\r\n\r\n        return source;\r\n    }\r\n\r\n    protected _finalProcessing() {\r\n        const meshes = [];\r\n        for (const child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            meshes.push(child.mesh);\r\n        }\r\n\r\n        for (let count = 0; count < this._iteration; count++) {\r\n            meshes.sort((a, b) => {\r\n                const distance1 = a.position.lengthSquared();\r\n                const distance2 = b.position.lengthSquared();\r\n\r\n                if (distance1 < distance2) {\r\n                    return 1;\r\n                } else if (distance1 > distance2) {\r\n                    return -1;\r\n                }\r\n\r\n                return 0;\r\n            });\r\n\r\n            const radiusPaddingSquared = Math.pow(this.margin, 2.0);\r\n            const cellSize = Math.max(this._cellWidth, this._cellHeight);\r\n            const difference2D = TmpVectors.Vector2[0];\r\n            const difference = TmpVectors.Vector3[0];\r\n\r\n            for (let i = 0; i < meshes.length - 1; i++) {\r\n                for (let j = i + 1; j < meshes.length; j++) {\r\n                    if (i != j) {\r\n                        meshes[j].position.subtractToRef(meshes[i].position, difference);\r\n\r\n                        // Ignore Z axis\r\n                        difference2D.x = difference.x;\r\n                        difference2D.y = difference.y;\r\n                        const combinedRadius = cellSize;\r\n                        let distance = difference2D.lengthSquared() - radiusPaddingSquared;\r\n                        const minSeparation = Math.min(distance, radiusPaddingSquared);\r\n                        distance -= minSeparation;\r\n\r\n                        if (distance < Math.pow(combinedRadius, 2.0)) {\r\n                            difference2D.normalize();\r\n                            difference.scaleInPlace((combinedRadius - Math.sqrt(distance)) * 0.5);\r\n                            meshes[j].position.addInPlace(difference);\r\n                            meshes[i].position.subtractInPlace(difference);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"mrdlSliderBarPixelShader\";\nconst shader = `uniform vec3 cameraPosition;\rvarying vec3 vPosition;\rvarying vec3 vNormal;\rvarying vec2 vUV;\rvarying vec3 vTangent;\rvarying vec3 vBinormal;\rvarying vec4 vColor;\rvarying vec4 vExtra1;\rvarying vec4 vExtra2;\rvarying vec4 vExtra3;\runiform float _Radius_;\runiform float _Bevel_Front_;\runiform float _Bevel_Front_Stretch_;\runiform float _Bevel_Back_;\runiform float _Bevel_Back_Stretch_;\runiform float _Radius_Top_Left_;\runiform float _Radius_Top_Right_;\runiform float _Radius_Bottom_Left_;\runiform float _Radius_Bottom_Right_;\runiform bool _Bulge_Enabled_;\runiform float _Bulge_Height_;\runiform float _Bulge_Radius_;\runiform float _Sun_Intensity_;\runiform float _Sun_Theta_;\runiform float _Sun_Phi_;\runiform float _Indirect_Diffuse_;\runiform vec4 _Albedo_;\runiform float _Specular_;\runiform float _Shininess_;\runiform float _Sharpness_;\runiform float _Subsurface_;\runiform vec4 _Left_Color_;\runiform vec4 _Right_Color_;\runiform float _Reflection_;\runiform float _Front_Reflect_;\runiform float _Edge_Reflect_;\runiform float _Power_;\runiform vec4 _Sky_Color_;\runiform vec4 _Horizon_Color_;\runiform vec4 _Ground_Color_;\runiform float _Horizon_Power_;\runiform sampler2D _Reflection_Map_;\runiform sampler2D _Indirect_Environment_;\runiform float _Width_;\runiform float _Fuzz_;\runiform float _Min_Fuzz_;\runiform float _Clip_Fade_;\runiform float _Hue_Shift_;\runiform float _Saturation_Shift_;\runiform float _Value_Shift_;\runiform vec3 _Blob_Position_;\runiform float _Blob_Intensity_;\runiform float _Blob_Near_Size_;\runiform float _Blob_Far_Size_;\runiform float _Blob_Near_Distance_;\runiform float _Blob_Far_Distance_;\runiform float _Blob_Fade_Length_;\runiform float _Blob_Pulse_;\runiform float _Blob_Fade_;\runiform sampler2D _Blob_Texture_;\runiform vec3 _Blob_Position_2_;\runiform float _Blob_Near_Size_2_;\runiform float _Blob_Pulse_2_;\runiform float _Blob_Fade_2_;\runiform vec3 _Left_Index_Pos_;\runiform vec3 _Right_Index_Pos_;\runiform vec3 _Left_Index_Middle_Pos_;\runiform vec3 _Right_Index_Middle_Pos_;\runiform sampler2D _Decal_;\runiform vec2 _Decal_Scale_XY_;\runiform bool _Decal_Front_Only_;\runiform float _Rim_Intensity_;\runiform sampler2D _Rim_Texture_;\runiform float _Rim_Hue_Shift_;\runiform float _Rim_Saturation_Shift_;\runiform float _Rim_Value_Shift_;\runiform float _Iridescence_Intensity_;\runiform sampler2D _Iridescence_Texture_;\runiform bool Use_Global_Left_Index;\runiform bool Use_Global_Right_Index;\runiform vec4 Global_Left_Index_Tip_Position;\runiform vec4 Global_Right_Index_Tip_Position;\runiform vec4 Global_Left_Thumb_Tip_Position;\runiform vec4 Global_Right_Thumb_Tip_Position;\runiform vec4 Global_Left_Index_Middle_Position;\runiform vec4 Global_Right_Index_Middle_Position;\runiform float Global_Left_Index_Tip_Proximity;\runiform float Global_Right_Index_Tip_Proximity;\rvoid Blob_Fragment_B30(\rsampler2D Blob_Texture,\rvec4 Blob_Info1,\rvec4 Blob_Info2,\rout vec4 Blob_Color)\r{\rfloat k1=dot(Blob_Info1.xy,Blob_Info1.xy);\rfloat k2=dot(Blob_Info2.xy,Blob_Info2.xy);\rvec3 closer=k1<k2 ? vec3(k1,Blob_Info1.z,Blob_Info1.w) : vec3(k2,Blob_Info2.z,Blob_Info2.w);\rBlob_Color=closer.z*texture(Blob_Texture,vec2(vec2(sqrt(closer.x),closer.y).x,1.0-vec2(sqrt(closer.x),closer.y).y))*clamp(1.0-closer.x,0.0,1.0);\r}\rvoid FastLinearTosRGB_B42(\rvec4 Linear,\rout vec4 sRGB)\r{\rsRGB.rgb=sqrt(clamp(Linear.rgb,0.0,1.0));\rsRGB.a=Linear.a;\r}\rvoid Scale_RGB_B59(\rvec4 Color,\rfloat Scalar,\rout vec4 Result)\r{\rResult=vec4(Scalar,Scalar,Scalar,1)*Color;\r}\rvoid Fragment_Main_B121(\rfloat Sun_Intensity,\rfloat Sun_Theta,\rfloat Sun_Phi,\rvec3 Normal,\rvec4 Albedo,\rfloat Fresnel_Reflect,\rfloat Shininess,\rvec3 Incident,\rvec4 Horizon_Color,\rvec4 Sky_Color,\rvec4 Ground_Color,\rfloat Indirect_Diffuse,\rfloat Specular,\rfloat Horizon_Power,\rfloat Reflection,\rvec4 Reflection_Sample,\rvec4 Indirect_Sample,\rfloat Sharpness,\rfloat SSS,\rfloat Subsurface,\rvec4 Translucence,\rvec4 Rim_Light,\rvec4 Iridescence,\rout vec4 Result)\r{\rfloat theta=Sun_Theta*2.0*3.14159;\rfloat phi=Sun_Phi*3.14159;\rvec3 lightDir= vec3(cos(phi)*cos(theta),sin(phi),cos(phi)*sin(theta));\rfloat NdotL=max(dot(lightDir,Normal),0.0);\rvec3 R=reflect(Incident,Normal);\rfloat RdotL=max(0.0,dot(R,lightDir));\rfloat specular=pow(RdotL,Shininess);\rspecular=mix(specular,smoothstep(0.495*Sharpness,1.0-0.495*Sharpness,specular),Sharpness);\rvec4 gi=mix(Ground_Color,Sky_Color,Normal.y*0.5+0.5);\rResult=((Sun_Intensity*NdotL+Indirect_Sample*Indirect_Diffuse+Translucence)*(1.0+SSS*Subsurface))*Albedo*(1.0-Fresnel_Reflect)+(Sun_Intensity*specular*Specular+Fresnel_Reflect*Reflection*Reflection_Sample)+Fresnel_Reflect*Rim_Light+Iridescence;\r}\rvoid Bulge_B79(\rbool Enabled,\rvec3 Normal,\rvec3 Tangent,\rfloat Bulge_Height,\rvec4 UV,\rfloat Bulge_Radius,\rvec3 ButtonN,\rout vec3 New_Normal)\r{\rvec2 xy=clamp(UV.xy*2.0,vec2(-1,-1),vec2(1,1));\rvec3 B=(cross(Normal,Tangent));\rfloat k=-clamp(1.0-length(xy)/Bulge_Radius,0.0,1.0)*Bulge_Height;\rk=sin(k*3.14159*0.5);\rk*=smoothstep(0.9998,0.9999,abs(dot(ButtonN,Normal)));\rNew_Normal=Normal*sqrt(1.0-k*k)+(xy.x*Tangent+xy.y*B)*k;\rNew_Normal=Enabled ? New_Normal : Normal;\r}\rvoid SSS_B77(\rvec3 ButtonN,\rvec3 Normal,\rvec3 Incident,\rout float Result)\r{\rfloat NdotI=abs(dot(Normal,Incident));\rfloat BdotI=abs(dot(ButtonN,Incident));\rResult=(abs(NdotI-BdotI)); \r}\rvoid FingerOcclusion_B67(\rfloat Width,\rfloat DistToCenter,\rfloat Fuzz,\rfloat Min_Fuzz,\rvec3 Position,\rvec3 Forward,\rvec3 Nearest,\rfloat Fade_Out,\rout float NotInShadow)\r{\rfloat d=dot((Nearest-Position),Forward);\rfloat sh=smoothstep(Width*0.5,Width*0.5+Fuzz*max(d,0.0)+Min_Fuzz,DistToCenter);\rNotInShadow=1.0-(1.0-sh)*smoothstep(-Fade_Out,0.0,d);\r}\rvoid FingerOcclusion_B68(\rfloat Width,\rfloat DistToCenter,\rfloat Fuzz,\rfloat Min_Fuzz,\rvec3 Position,\rvec3 Forward,\rvec3 Nearest,\rfloat Fade_Out,\rout float NotInShadow)\r{\rfloat d=dot((Nearest-Position),Forward);\rfloat sh=smoothstep(Width*0.5,Width*0.5+Fuzz*max(d,0.0)+Min_Fuzz,DistToCenter);\rNotInShadow=1.0-(1.0-sh)*smoothstep(-Fade_Out,0.0,d);\r}\rvoid Scale_Color_B91(\rvec4 Color,\rfloat Scalar,\rout vec4 Result)\r{\rResult=Scalar*Color;\r}\rvoid From_HSV_B73(\rfloat Hue,\rfloat Saturation,\rfloat Value,\rfloat Alpha,\rout vec4 Color)\r{\rvec4 K=vec4(1.0,2.0/3.0,1.0/3.0,3.0);\rvec3 p=abs(fract(vec3(Hue,Hue,Hue)+K.xyz)*6.0-K.www);\rColor.rgb=Value*mix(K.xxx,clamp(p-K.xxx,0.0,1.0),Saturation);\rColor.a=Alpha;\r}\rvoid Fast_Fresnel_B122(\rfloat Front_Reflect,\rfloat Edge_Reflect,\rfloat Power,\rvec3 Normal,\rvec3 Incident,\rout float Transmit,\rout float Reflect)\r{\rfloat d=max(-dot(Incident,Normal),0.0);\rReflect=Front_Reflect+(Edge_Reflect-Front_Reflect)*pow(.01-d,Power);\rTransmit=1.0-Reflect;\r}\rvoid Mapped_Environment_B51(\rsampler2D Reflected_Environment,\rsampler2D Indirect_Environment,\rvec3 Dir,\rout vec4 Reflected_Color,\rout vec4 Indirect_Diffuse)\r{\rReflected_Color=texture(Reflected_Environment,vec2(atan(Dir.z,Dir.x)/3.14159*0.5,asin(Dir.y)/3.14159+0.5));\rIndirect_Diffuse=texture(Indirect_Environment,vec2(atan(Dir.z,Dir.x)/3.14159*0.5,asin(Dir.y)/3.14159+0.5));\r}\rvec4 SampleEnv_Bid50(vec3 D,vec4 S,vec4 H,vec4 G,float exponent)\r{\rfloat k=pow(abs(D.y),exponent);\rvec4 C;\rif (D.y>0.0) {\rC=mix(H,S,k);\r} else {\rC=mix(H,G,k); \r}\rreturn C;\r}\rvoid Sky_Environment_B50(\rvec3 Normal,\rvec3 Reflected,\rvec4 Sky_Color,\rvec4 Horizon_Color,\rvec4 Ground_Color,\rfloat Horizon_Power,\rout vec4 Reflected_Color,\rout vec4 Indirect_Color)\r{\rReflected_Color=SampleEnv_Bid50(Reflected,Sky_Color,Horizon_Color,Ground_Color,Horizon_Power);\rIndirect_Color=mix(Ground_Color,Sky_Color,Normal.y*0.5+0.5);\r}\rvoid Min_Segment_Distance_B65(\rvec3 P0,\rvec3 P1,\rvec3 Q0,\rvec3 Q1,\rout vec3 NearP,\rout vec3 NearQ,\rout float Distance)\r{\rvec3 u=P1-P0;\rvec3 v=Q1-Q0;\rvec3 w=P0-Q0;\rfloat a=dot(u,u);\rfloat b=dot(u,v);\rfloat c=dot(v,v);\rfloat d=dot(u,w);\rfloat e=dot(v,w);\rfloat D=a*c-b*b;\rfloat sD=D;\rfloat tD=D;\rfloat sc,sN,tc,tN;\rif (D<0.00001) {\rsN=0.0;\rsD=1.0;\rtN=e;\rtD=c;\r} else {\rsN=(b*e-c*d);\rtN=(a*e-b*d);\rif (sN<0.0) {\rsN=0.0;\rtN=e;\rtD=c;\r} else if (sN>sD) {\rsN=sD;\rtN=e+b;\rtD=c;\r}\r}\rif (tN<0.0) {\rtN=0.0;\rif (-d<0.0) {\rsN=0.0;\r} else if (-d>a) {\rsN=sD;\r} else {\rsN=-d;\rsD=a;\r}\r} else if (tN>tD) {\rtN=tD;\rif ((-d+b)<0.0) {\rsN=0.0;\r} else if ((-d+b)>a) {\rsN=sD;\r} else {\rsN=(-d+b);\rsD=a;\r}\r}\rsc=abs(sN)<0.000001 ? 0.0 : sN/sD;\rtc=abs(tN)<0.000001 ? 0.0 : tN/tD;\rNearP=P0+sc*u;\rNearQ=Q0+tc*v;\rDistance=distance(NearP,NearQ);\r}\rvoid To_XYZ_B74(\rvec3 Vec3,\rout float X,\rout float Y,\rout float Z)\r{\rX=Vec3.x;\rY=Vec3.y;\rZ=Vec3.z;\r}\rvoid Finger_Positions_B64(\rvec3 Left_Index_Pos,\rvec3 Right_Index_Pos,\rvec3 Left_Index_Middle_Pos,\rvec3 Right_Index_Middle_Pos,\rout vec3 Left_Index,\rout vec3 Right_Index,\rout vec3 Left_Index_Middle,\rout vec3 Right_Index_Middle)\r{\rLeft_Index= (Use_Global_Left_Index ? Global_Left_Index_Tip_Position.xyz : Left_Index_Pos);\rRight_Index= (Use_Global_Right_Index ? Global_Right_Index_Tip_Position.xyz : Right_Index_Pos);\rLeft_Index_Middle= (Use_Global_Left_Index ? Global_Left_Index_Middle_Position.xyz : Left_Index_Middle_Pos);\rRight_Index_Middle= (Use_Global_Right_Index ? Global_Right_Index_Middle_Position.xyz : Right_Index_Middle_Pos);\r}\rvoid VaryHSV_B108(\rvec3 HSV_In,\rfloat Hue_Shift,\rfloat Saturation_Shift,\rfloat Value_Shift,\rout vec3 HSV_Out)\r{\rHSV_Out=vec3(fract(HSV_In.x+Hue_Shift),clamp(HSV_In.y+Saturation_Shift,0.0,1.0),clamp(HSV_In.z+Value_Shift,0.0,1.0));\r}\rvoid Remap_Range_B114(\rfloat In_Min,\rfloat In_Max,\rfloat Out_Min,\rfloat Out_Max,\rfloat In,\rout float Out)\r{\rOut=mix(Out_Min,Out_Max,clamp((In-In_Min)/(In_Max-In_Min),0.0,1.0));\r}\rvoid To_HSV_B75(\rvec4 Color,\rout float Hue,\rout float Saturation,\rout float Value,\rout float Alpha,\rout vec3 HSV)\r{\rvec4 K=vec4(0.0,-1.0/3.0,2.0/3.0,-1.0);\rvec4 p=Color.g<Color.b ? vec4(Color.bg,K.wz) : vec4(Color.gb,K.xy);\rvec4 q=Color.r<p.x ? vec4(p.xyw,Color.r) : vec4(Color.r,p.yzx);\rfloat d=q.x-min(q.w,q.y);\rfloat e=1.0e-10;\rHue=abs(q.z+(q.w-q.y)/(6.0*d+e));\rSaturation=d/(q.x+e);\rValue=q.x;\rAlpha=Color.a;\rHSV=vec3(Hue,Saturation,Value);\r}\rvoid Code_B110(\rfloat X,\rout float Result)\r{\rResult=(acos(X)/3.14159-0.5)*2.0;\r}\rvoid Rim_Light_B132(\rvec3 Front,\rvec3 Normal,\rvec3 Incident,\rfloat Rim_Intensity,\rsampler2D Texture,\rout vec4 Result)\r{\rvec3 R=reflect(Incident,Normal);\rfloat RdotF=dot(R,Front);\rfloat RdotL=sqrt(1.0-RdotF*RdotF);\rvec2 UV=vec2(R.y*0.5+0.5,0.5);\rvec4 Color=texture(Texture,UV);\rResult=Color;\r}\rvoid main()\r{\rvec4 Blob_Color_Q30;\r#if BLOB_ENABLE\nBlob_Fragment_B30(_Blob_Texture_,vExtra2,vExtra3,Blob_Color_Q30);\r#else\nBlob_Color_Q30=vec4(0,0,0,0);\r#endif\nvec3 Incident_Q39=normalize(vPosition-cameraPosition);\rvec3 Normalized_Q38=normalize(vNormal);\rvec3 Normalized_Q71=normalize(vTangent);\rvec4 Color_Q83;\r#if DECAL_ENABLE\nColor_Q83=texture(_Decal_,vUV);\r#else\nColor_Q83=vec4(0,0,0,0);\r#endif\nfloat X_Q90;\rfloat Y_Q90;\rfloat Z_Q90;\rfloat W_Q90;\rX_Q90=vExtra1.x;\rY_Q90=vExtra1.y;\rZ_Q90=vExtra1.z;\rW_Q90=vExtra1.w;\rvec4 Linear_Q43;\rLinear_Q43.rgb=clamp(_Sky_Color_.rgb*_Sky_Color_.rgb,0.0,1.0);\rLinear_Q43.a=_Sky_Color_.a;\rvec4 Linear_Q44;\rLinear_Q44.rgb=clamp(_Horizon_Color_.rgb*_Horizon_Color_.rgb,0.0,1.0);\rLinear_Q44.a=_Horizon_Color_.a;\rvec4 Linear_Q45;\rLinear_Q45.rgb=clamp(_Ground_Color_.rgb*_Ground_Color_.rgb,0.0,1.0);\rLinear_Q45.a=_Ground_Color_.a;\rvec3 Left_Index_Q64;\rvec3 Right_Index_Q64;\rvec3 Left_Index_Middle_Q64;\rvec3 Right_Index_Middle_Q64;\rFinger_Positions_B64(_Left_Index_Pos_,_Right_Index_Pos_,_Left_Index_Middle_Pos_,_Right_Index_Middle_Pos_,Left_Index_Q64,Right_Index_Q64,Left_Index_Middle_Q64,Right_Index_Middle_Q64);\rvec4 Linear_Q46;\rLinear_Q46.rgb=clamp(_Albedo_.rgb*_Albedo_.rgb,0.0,1.0);\rLinear_Q46.a=_Albedo_.a;\rvec3 Normalized_Q107=normalize(vBinormal);\rvec3 Incident_Q70=normalize(vPosition-cameraPosition);\rvec3 New_Normal_Q79;\rBulge_B79(_Bulge_Enabled_,Normalized_Q38,Normalized_Q71,_Bulge_Height_,vColor,_Bulge_Radius_,vBinormal,New_Normal_Q79);\rfloat Result_Q77;\rSSS_B77(vBinormal,New_Normal_Q79,Incident_Q39,Result_Q77);\rvec4 Result_Q91;\rScale_Color_B91(Color_Q83,X_Q90,Result_Q91);\rfloat Transmit_Q122;\rfloat Reflect_Q122;\rFast_Fresnel_B122(_Front_Reflect_,_Edge_Reflect_,_Power_,New_Normal_Q79,Incident_Q39,Transmit_Q122,Reflect_Q122);\rfloat Product_Q125=Y_Q90*Y_Q90;\rvec3 NearP_Q65;\rvec3 NearQ_Q65;\rfloat Distance_Q65;\rMin_Segment_Distance_B65(Left_Index_Q64,Left_Index_Middle_Q64,vPosition,cameraPosition,NearP_Q65,NearQ_Q65,Distance_Q65);\rvec3 NearP_Q63;\rvec3 NearQ_Q63;\rfloat Distance_Q63;\rMin_Segment_Distance_B65(Right_Index_Q64,Right_Index_Middle_Q64,vPosition,cameraPosition,NearP_Q63,NearQ_Q63,Distance_Q63);\rvec3 Reflected_Q47=reflect(Incident_Q39,New_Normal_Q79);\rvec4 Product_Q103=Linear_Q46*vec4(1,1,1,1);\rvec4 Result_Q132;\rRim_Light_B132(Normalized_Q107,Normalized_Q38,Incident_Q70,_Rim_Intensity_,_Rim_Texture_,Result_Q132);\rfloat Dot_Q72=dot(Incident_Q70, Normalized_Q71);\rfloat MaxAB_Q123=max(Reflect_Q122,Product_Q125);\rfloat NotInShadow_Q67;\r#if OCCLUSION_ENABLED\nFingerOcclusion_B67(_Width_,Distance_Q65,_Fuzz_,_Min_Fuzz_,vPosition,vBinormal,NearP_Q65,_Clip_Fade_,NotInShadow_Q67);\r#else\nNotInShadow_Q67=1.0;\r#endif\nfloat NotInShadow_Q68;\r#if OCCLUSION_ENABLED\nFingerOcclusion_B68(_Width_,Distance_Q63,_Fuzz_,_Min_Fuzz_,vPosition,vBinormal,NearP_Q63,_Clip_Fade_,NotInShadow_Q68);\r#else\nNotInShadow_Q68=1.0;\r#endif\nvec4 Reflected_Color_Q51;\rvec4 Indirect_Diffuse_Q51;\r#if ENV_ENABLE\nMapped_Environment_B51(_Reflection_Map_,_Indirect_Environment_,Reflected_Q47,Reflected_Color_Q51,Indirect_Diffuse_Q51);\r#else\nReflected_Color_Q51=vec4(0,0,0,1);\rIndirect_Diffuse_Q51=vec4(0,0,0,1);\r#endif\nvec4 Reflected_Color_Q50;\rvec4 Indirect_Color_Q50;\r#if SKY_ENABLED\nSky_Environment_B50(New_Normal_Q79,Reflected_Q47,Linear_Q43,Linear_Q44,Linear_Q45,_Horizon_Power_,Reflected_Color_Q50,Indirect_Color_Q50);\r#else\nReflected_Color_Q50=vec4(0,0,0,1);\rIndirect_Color_Q50=vec4(0,0,0,1);\r#endif\nfloat Hue_Q75;\rfloat Saturation_Q75;\rfloat Value_Q75;\rfloat Alpha_Q75;\rvec3 HSV_Q75;\rTo_HSV_B75(Product_Q103,Hue_Q75,Saturation_Q75,Value_Q75,Alpha_Q75,HSV_Q75);\rfloat Hue_Q127;\rfloat Saturation_Q127;\rfloat Value_Q127;\rfloat Alpha_Q127;\rvec3 HSV_Q127;\rTo_HSV_B75(Result_Q132,Hue_Q127,Saturation_Q127,Value_Q127,Alpha_Q127,HSV_Q127);\rfloat Result_Q110;\rCode_B110(Dot_Q72,Result_Q110);\rfloat AbsA_Q76=abs(Result_Q110);\rfloat MinAB_Q58=min(NotInShadow_Q67,NotInShadow_Q68);\rvec4 Sum_Q48=Reflected_Color_Q51+Reflected_Color_Q50;\rvec4 Sum_Q49=Indirect_Diffuse_Q51+Indirect_Color_Q50;\rvec3 HSV_Out_Q126;\rVaryHSV_B108(HSV_Q127,_Rim_Hue_Shift_,_Rim_Saturation_Shift_,_Rim_Value_Shift_,HSV_Out_Q126);\rfloat Out_Q114;\rRemap_Range_B114(-1.0,1.0,0.0,1.0,Result_Q110,Out_Q114);\rfloat Product_Q106;\rProduct_Q106=AbsA_Q76*_Hue_Shift_;\rfloat X_Q128;\rfloat Y_Q128;\rfloat Z_Q128;\rTo_XYZ_B74(HSV_Out_Q126,X_Q128,Y_Q128,Z_Q128);\rvec2 Vec2_Q112=vec2(Out_Q114,0.5);\rvec3 HSV_Out_Q108;\rVaryHSV_B108(HSV_Q75,Product_Q106,_Saturation_Shift_,_Value_Shift_,HSV_Out_Q108);\rvec4 Color_Q129;\rFrom_HSV_B73(X_Q128,Y_Q128,Z_Q128,0.0,Color_Q129);\rvec4 Color_Q111;\r#if IRIDESCENCE_ENABLED\nColor_Q111=texture(_Iridescence_Texture_,Vec2_Q112);\r#else\nColor_Q111=vec4(0,0,0,0);\r#endif\nfloat X_Q74;\rfloat Y_Q74;\rfloat Z_Q74;\rTo_XYZ_B74(HSV_Out_Q108,X_Q74,Y_Q74,Z_Q74);\rvec4 Result_Q131=_Rim_Intensity_*Color_Q129;\rvec4 Result_Q113=_Iridescence_Intensity_*Color_Q111;\rvec4 Color_Q73;\rFrom_HSV_B73(X_Q74,Y_Q74,Z_Q74,0.0,Color_Q73);\rvec4 Result_Q84=Result_Q91+(1.0-Result_Q91.a)*Color_Q73;\rvec4 Result_Q121;\rFragment_Main_B121(_Sun_Intensity_,_Sun_Theta_,_Sun_Phi_,New_Normal_Q79,Result_Q84,MaxAB_Q123,_Shininess_,Incident_Q39,_Horizon_Color_,_Sky_Color_,_Ground_Color_,_Indirect_Diffuse_,_Specular_,_Horizon_Power_,_Reflection_,Sum_Q48,Sum_Q49,_Sharpness_,Result_Q77,_Subsurface_,vec4(0,0,0,0),Result_Q131,Result_Q113,Result_Q121);\rvec4 Result_Q59;\rScale_RGB_B59(Result_Q121,MinAB_Q58,Result_Q59);\rvec4 sRGB_Q42;\rFastLinearTosRGB_B42(Result_Q59,sRGB_Q42);\rvec4 Result_Q31=Blob_Color_Q30+(1.0-Blob_Color_Q30.a)*sRGB_Q42;\rvec4 Result_Q40=Result_Q31; Result_Q40.a=1.0;\rvec4 Out_Color=Result_Q40;\rfloat Clip_Threshold=0.001;\rbool To_sRGB=false;\rgl_FragColor=Out_Color;\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlSliderBarPixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"mrdlSliderBarVertexShader\";\nconst shader = `uniform mat4 world;\runiform mat4 viewProjection;\runiform vec3 cameraPosition;\rattribute vec3 position;\rattribute vec3 normal;\rattribute vec2 uv;\r#ifdef TANGENT\nattribute vec3 tangent;\r#else\nconst vec3 tangent=vec3(0.);\r#endif\nuniform float _Radius_;\runiform float _Bevel_Front_;\runiform float _Bevel_Front_Stretch_;\runiform float _Bevel_Back_;\runiform float _Bevel_Back_Stretch_;\runiform float _Radius_Top_Left_;\runiform float _Radius_Top_Right_;\runiform float _Radius_Bottom_Left_;\runiform float _Radius_Bottom_Right_;\runiform bool _Bulge_Enabled_;\runiform float _Bulge_Height_;\runiform float _Bulge_Radius_;\runiform float _Sun_Intensity_;\runiform float _Sun_Theta_;\runiform float _Sun_Phi_;\runiform float _Indirect_Diffuse_;\runiform vec4 _Albedo_;\runiform float _Specular_;\runiform float _Shininess_;\runiform float _Sharpness_;\runiform float _Subsurface_;\runiform vec4 _Left_Color_;\runiform vec4 _Right_Color_;\runiform float _Reflection_;\runiform float _Front_Reflect_;\runiform float _Edge_Reflect_;\runiform float _Power_;\runiform vec4 _Sky_Color_;\runiform vec4 _Horizon_Color_;\runiform vec4 _Ground_Color_;\runiform float _Horizon_Power_;\runiform sampler2D _Reflection_Map_;\runiform sampler2D _Indirect_Environment_;\runiform float _Width_;\runiform float _Fuzz_;\runiform float _Min_Fuzz_;\runiform float _Clip_Fade_;\runiform float _Hue_Shift_;\runiform float _Saturation_Shift_;\runiform float _Value_Shift_;\runiform vec3 _Blob_Position_;\runiform float _Blob_Intensity_;\runiform float _Blob_Near_Size_;\runiform float _Blob_Far_Size_;\runiform float _Blob_Near_Distance_;\runiform float _Blob_Far_Distance_;\runiform float _Blob_Fade_Length_;\runiform float _Blob_Pulse_;\runiform float _Blob_Fade_;\runiform sampler2D _Blob_Texture_;\runiform vec3 _Blob_Position_2_;\runiform float _Blob_Near_Size_2_;\runiform float _Blob_Pulse_2_;\runiform float _Blob_Fade_2_;\runiform vec3 _Left_Index_Pos_;\runiform vec3 _Right_Index_Pos_;\runiform vec3 _Left_Index_Middle_Pos_;\runiform vec3 _Right_Index_Middle_Pos_;\runiform sampler2D _Decal_;\runiform vec2 _Decal_Scale_XY_;\runiform bool _Decal_Front_Only_;\runiform float _Rim_Intensity_;\runiform sampler2D _Rim_Texture_;\runiform float _Rim_Hue_Shift_;\runiform float _Rim_Saturation_Shift_;\runiform float _Rim_Value_Shift_;\runiform float _Iridescence_Intensity_;\runiform sampler2D _Iridescence_Texture_;\runiform bool Use_Global_Left_Index;\runiform bool Use_Global_Right_Index;\runiform vec4 Global_Left_Index_Tip_Position;\runiform vec4 Global_Right_Index_Tip_Position;\runiform vec4 Global_Left_Thumb_Tip_Position;\runiform vec4 Global_Right_Thumb_Tip_Position;\runiform float Global_Left_Index_Tip_Proximity;\runiform float Global_Right_Index_Tip_Proximity;\rvarying vec3 vPosition;\rvarying vec3 vNormal;\rvarying vec2 vUV;\rvarying vec3 vTangent;\rvarying vec3 vBinormal;\rvarying vec4 vColor;\rvarying vec4 vExtra1;\rvarying vec4 vExtra2;\rvarying vec4 vExtra3;\rvoid Object_To_World_Pos_B12(\rvec3 Pos_Object,\rout vec3 Pos_World)\r{\rPos_World=(world*vec4(Pos_Object,1.0)).xyz;\r}\rvoid Object_To_World_Normal_B32(\rvec3 Nrm_Object,\rout vec3 Nrm_World)\r{\rNrm_World=(vec4(Nrm_Object,0.0)).xyz;\r}\rvoid Blob_Vertex_B23(\rvec3 Position,\rvec3 Normal,\rvec3 Tangent,\rvec3 Bitangent,\rvec3 Blob_Position,\rfloat Intensity,\rfloat Blob_Near_Size,\rfloat Blob_Far_Size,\rfloat Blob_Near_Distance,\rfloat Blob_Far_Distance,\rfloat Blob_Fade_Length,\rfloat Blob_Pulse,\rfloat Blob_Fade,\rout vec4 Blob_Info)\r{\rvec3 blob= (Use_Global_Left_Index ? Global_Left_Index_Tip_Position.xyz : Blob_Position);\rvec3 delta=blob-Position;\rfloat dist=dot(Normal,delta);\rfloat lerpValue=clamp((abs(dist)-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);\rfloat fadeValue=1.0-clamp((abs(dist)-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);\rfloat size=Blob_Near_Size+(Blob_Far_Size-Blob_Near_Size)*lerpValue;\rvec2 blobXY=vec2(dot(delta,Tangent),dot(delta,Bitangent))/(0.0001+size);\rfloat Fade=fadeValue*Intensity*Blob_Fade;\rfloat Distance=(lerpValue*0.5+0.5)*(1.0-Blob_Pulse);\rBlob_Info=vec4(blobXY.x,blobXY.y,Distance,Fade);\r}\rvoid Blob_Vertex_B24(\rvec3 Position,\rvec3 Normal,\rvec3 Tangent,\rvec3 Bitangent,\rvec3 Blob_Position,\rfloat Intensity,\rfloat Blob_Near_Size,\rfloat Blob_Far_Size,\rfloat Blob_Near_Distance,\rfloat Blob_Far_Distance,\rfloat Blob_Fade_Length,\rfloat Blob_Pulse,\rfloat Blob_Fade,\rout vec4 Blob_Info)\r{\rvec3 blob= (Use_Global_Right_Index ? Global_Right_Index_Tip_Position.xyz : Blob_Position);\rvec3 delta=blob-Position;\rfloat dist=dot(Normal,delta);\rfloat lerpValue=clamp((abs(dist)-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);\rfloat fadeValue=1.0-clamp((abs(dist)-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);\rfloat size=Blob_Near_Size+(Blob_Far_Size-Blob_Near_Size)*lerpValue;\rvec2 blobXY=vec2(dot(delta,Tangent),dot(delta,Bitangent))/(0.0001+size);\rfloat Fade=fadeValue*Intensity*Blob_Fade;\rfloat Distance=(lerpValue*0.5+0.5)*(1.0-Blob_Pulse);\rBlob_Info=vec4(blobXY.x,blobXY.y,Distance,Fade);\r}\rvoid Move_Verts_B130(\rfloat Anisotropy,\rvec3 P,\rfloat Radius,\rfloat Bevel,\rvec3 Normal_Object,\rfloat ScaleZ,\rfloat Stretch,\rout vec3 New_P,\rout vec2 New_UV,\rout float Radial_Gradient,\rout vec3 Radial_Dir,\rout vec3 New_Normal)\r{\rvec2 UV=P.xy*2.0+0.5;\rvec2 center=clamp(UV,0.0,1.0);\rvec2 delta=UV-center;\rfloat deltad=(length(delta)*2.0);\rfloat f=(Bevel+(Radius-Bevel)*Stretch)/Radius;\rfloat innerd=clamp(deltad*2.0,0.0,1.0);\rfloat outerd=clamp(deltad*2.0-1.0,0.0,1.0);\rfloat bevelAngle=outerd*3.14159*0.5;\rfloat sinb=sin(bevelAngle);\rfloat cosb=cos(bevelAngle);\rfloat beveld=(1.0-f)*innerd+f*sinb;\rfloat br=outerd;\rvec2 r2=2.0*vec2(Radius/Anisotropy,Radius);\rfloat dir=P.z<0.0001 ? 1.0 : -1.0;\rNew_UV=center+r2*((0.5-center)+normalize(delta+vec2(0.0,0.000001))*beveld*0.5);\rNew_P=vec3(New_UV-0.5,P.z+dir*(1.0-cosb)*Bevel*ScaleZ);\rRadial_Gradient=clamp((deltad-0.5)*2.0,0.0,1.0);\rRadial_Dir=vec3(delta*r2,0.0);\rvec3 beveledNormal=cosb*Normal_Object+sinb*vec3(delta.x,delta.y,0.0);\rNew_Normal=Normal_Object.z==0.0 ? Normal_Object : beveledNormal;\r}\rvoid Object_To_World_Dir_B60(\rvec3 Dir_Object,\rout vec3 Normal_World,\rout vec3 Normal_World_N,\rout float Normal_Length)\r{\rNormal_World=(world*vec4(Dir_Object,0.0)).xyz;\rNormal_Length=length(Normal_World);\rNormal_World_N=Normal_World/Normal_Length;\r}\rvoid To_XYZ_B78(\rvec3 Vec3,\rout float X,\rout float Y,\rout float Z)\r{\rX=Vec3.x;\rY=Vec3.y;\rZ=Vec3.z;\r}\rvoid Conditional_Float_B93(\rbool Which,\rfloat If_True,\rfloat If_False,\rout float Result)\r{\rResult=Which ? If_True : If_False;\r}\rvoid Object_To_World_Dir_B28(\rvec3 Dir_Object,\rout vec3 Binormal_World,\rout vec3 Binormal_World_N,\rout float Binormal_Length)\r{\rBinormal_World=(world*vec4(Dir_Object,0.0)).xyz;\rBinormal_Length=length(Binormal_World);\rBinormal_World_N=Binormal_World/Binormal_Length;\r}\rvoid Pick_Radius_B69(\rfloat Radius,\rfloat Radius_Top_Left,\rfloat Radius_Top_Right,\rfloat Radius_Bottom_Left,\rfloat Radius_Bottom_Right,\rvec3 Position,\rout float Result)\r{\rbool whichY=Position.y>0.0;\rResult=Position.x<0.0 ? (whichY ? Radius_Top_Left : Radius_Bottom_Left) : (whichY ? Radius_Top_Right : Radius_Bottom_Right);\rResult*=Radius;\r}\rvoid Conditional_Float_B36(\rbool Which,\rfloat If_True,\rfloat If_False,\rout float Result)\r{\rResult=Which ? If_True : If_False;\r}\rvoid Greater_Than_B37(\rfloat Left,\rfloat Right,\rout bool Not_Greater_Than,\rout bool Greater_Than)\r{\rGreater_Than=Left>Right;\rNot_Greater_Than=!Greater_Than;\r}\rvoid Remap_Range_B105(\rfloat In_Min,\rfloat In_Max,\rfloat Out_Min,\rfloat Out_Max,\rfloat In,\rout float Out)\r{\rOut=mix(Out_Min,Out_Max,clamp((In-In_Min)/(In_Max-In_Min),0.0,1.0));\r}\rvoid main()\r{\rvec2 XY_Q85;\rXY_Q85=(uv-vec2(0.5,0.5))*_Decal_Scale_XY_+vec2(0.5,0.5);\rvec3 Tangent_World_Q27;\rvec3 Tangent_World_N_Q27;\rfloat Tangent_Length_Q27;\rTangent_World_Q27=(world*vec4(vec3(1,0,0),0.0)).xyz;\rTangent_Length_Q27=length(Tangent_World_Q27);\rTangent_World_N_Q27=Tangent_World_Q27/Tangent_Length_Q27;\rvec3 Normal_World_Q60;\rvec3 Normal_World_N_Q60;\rfloat Normal_Length_Q60;\rObject_To_World_Dir_B60(vec3(0,0,1),Normal_World_Q60,Normal_World_N_Q60,Normal_Length_Q60);\rfloat X_Q78;\rfloat Y_Q78;\rfloat Z_Q78;\rTo_XYZ_B78(position,X_Q78,Y_Q78,Z_Q78);\rvec3 Nrm_World_Q26;\rNrm_World_Q26=normalize((world*vec4(normal,0.0)).xyz);\rvec3 Binormal_World_Q28;\rvec3 Binormal_World_N_Q28;\rfloat Binormal_Length_Q28;\rObject_To_World_Dir_B28(vec3(0,1,0),Binormal_World_Q28,Binormal_World_N_Q28,Binormal_Length_Q28);\rfloat Anisotropy_Q29=Tangent_Length_Q27/Binormal_Length_Q28;\rfloat Result_Q69;\rPick_Radius_B69(_Radius_,_Radius_Top_Left_,_Radius_Top_Right_,_Radius_Bottom_Left_,_Radius_Bottom_Right_,position,Result_Q69);\rfloat Anisotropy_Q53=Binormal_Length_Q28/Normal_Length_Q60;\rbool Not_Greater_Than_Q37;\rbool Greater_Than_Q37;\rGreater_Than_B37(Z_Q78,0.0,Not_Greater_Than_Q37,Greater_Than_Q37);\rvec4 Linear_Q101;\rLinear_Q101.rgb=clamp(_Left_Color_.rgb*_Left_Color_.rgb,0.0,1.0);\rLinear_Q101.a=_Left_Color_.a;\rvec4 Linear_Q102;\rLinear_Q102.rgb=clamp(_Right_Color_.rgb*_Right_Color_.rgb,0.0,1.0);\rLinear_Q102.a=_Right_Color_.a;\rvec3 Difference_Q61=vec3(0,0,0)-Normal_World_N_Q60;\rvec4 Out_Color_Q34=vec4(X_Q78,Y_Q78,Z_Q78,1);\rfloat Result_Q36;\rConditional_Float_B36(Greater_Than_Q37,_Bevel_Back_,_Bevel_Front_,Result_Q36);\rfloat Result_Q94;\rConditional_Float_B36(Greater_Than_Q37,_Bevel_Back_Stretch_,_Bevel_Front_Stretch_,Result_Q94);\rvec3 New_P_Q130;\rvec2 New_UV_Q130;\rfloat Radial_Gradient_Q130;\rvec3 Radial_Dir_Q130;\rvec3 New_Normal_Q130;\rMove_Verts_B130(Anisotropy_Q29,position,Result_Q69,Result_Q36,normal,Anisotropy_Q53,Result_Q94,New_P_Q130,New_UV_Q130,Radial_Gradient_Q130,Radial_Dir_Q130,New_Normal_Q130);\rfloat X_Q98;\rfloat Y_Q98;\rX_Q98=New_UV_Q130.x;\rY_Q98=New_UV_Q130.y;\rvec3 Pos_World_Q12;\rObject_To_World_Pos_B12(New_P_Q130,Pos_World_Q12);\rvec3 Nrm_World_Q32;\rObject_To_World_Normal_B32(New_Normal_Q130,Nrm_World_Q32);\rvec4 Blob_Info_Q23;\r#if BLOB_ENABLE\nBlob_Vertex_B23(Pos_World_Q12,Nrm_World_Q26,Tangent_World_N_Q27,Binormal_World_N_Q28,_Blob_Position_,_Blob_Intensity_,_Blob_Near_Size_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_,_Blob_Fade_,Blob_Info_Q23);\r#else\nBlob_Info_Q23=vec4(0,0,0,0);\r#endif\nvec4 Blob_Info_Q24;\r#if BLOB_ENABLE_2\nBlob_Vertex_B24(Pos_World_Q12,Nrm_World_Q26,Tangent_World_N_Q27,Binormal_World_N_Q28,_Blob_Position_2_,_Blob_Intensity_,_Blob_Near_Size_2_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_2_,_Blob_Fade_2_,Blob_Info_Q24);\r#else\nBlob_Info_Q24=vec4(0,0,0,0);\r#endif\nfloat Out_Q105;\rRemap_Range_B105(0.0,1.0,0.0,1.0,X_Q98,Out_Q105);\rfloat X_Q86;\rfloat Y_Q86;\rfloat Z_Q86;\rTo_XYZ_B78(Nrm_World_Q32,X_Q86,Y_Q86,Z_Q86);\rvec4 Color_At_T_Q97=mix(Linear_Q101,Linear_Q102,Out_Q105);\rfloat Minus_F_Q87=-Z_Q86;\rfloat R_Q99;\rfloat G_Q99;\rfloat B_Q99;\rfloat A_Q99;\rR_Q99=Color_At_T_Q97.r; G_Q99=Color_At_T_Q97.g; B_Q99=Color_At_T_Q97.b; A_Q99=Color_At_T_Q97.a;\rfloat ClampF_Q88=clamp(0.0,Minus_F_Q87,1.0);\rfloat Result_Q93;\rConditional_Float_B93(_Decal_Front_Only_,ClampF_Q88,1.0,Result_Q93);\rvec4 Vec4_Q89=vec4(Result_Q93,Radial_Gradient_Q130,G_Q99,B_Q99);\rvec3 Position=Pos_World_Q12;\rvec3 Normal=Nrm_World_Q32;\rvec2 UV=XY_Q85;\rvec3 Tangent=Tangent_World_N_Q27;\rvec3 Binormal=Difference_Q61;\rvec4 Color=Out_Color_Q34;\rvec4 Extra1=Vec4_Q89;\rvec4 Extra2=Blob_Info_Q23;\rvec4 Extra3=Blob_Info_Q24;\rgl_Position=viewProjection*vec4(Position,1);\rvPosition=Position;\rvNormal=Normal;\rvUV=UV;\rvTangent=Tangent;\rvBinormal=Binormal;\rvColor=Color;\rvExtra1=Extra1;\rvExtra2=Extra2;\rvExtra3=Extra3;\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlSliderBarVertexShader = { name, shader };\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { SerializationHelper, serialize } from \"core/Misc/decorators\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Vector2, Vector3, Vector4 } from \"core/Maths/math.vector\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { Color4 } from \"core/Maths/math.color\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { Constants } from \"core/Engines/constants\";\r\n\r\nimport \"./shaders/mrdlSliderBar.fragment\";\r\nimport \"./shaders/mrdlSliderBar.vertex\";\r\n\r\n/** @internal */\r\nclass MRDLSliderBarMaterialDefines extends MaterialDefines {\r\n    /*\r\n        \"SKY_ENABLED\", \"BLOB_ENABLE_2\", \"IRIDESCENCE_ENABLED\"\r\n    */\r\n    public SKY_ENABLED = true;\r\n    public BLOB_ENABLE_2 = true;\r\n    public IRIDESCENCE_ENABLED = true;\r\n\r\n    constructor() {\r\n        super();\r\n        this._needNormals = true;\r\n        this._needUVs = true;\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render Slider Bar material with MRDL\r\n */\r\nexport class MRDLSliderBarMaterial extends PushMaterial {\r\n    /**\r\n     * URL pointing to the texture used to define the coloring for the Iridescent Map effect.\r\n     */\r\n    public static BLUE_GRADIENT_TEXTURE_URL = \"https://assets.babylonjs.com/meshes/MRTK/MRDL/mrtk-mrdl-blue-gradient.png\";\r\n    private _blueGradientTexture: Texture;\r\n    private _decalTexture: Texture;\r\n    private _reflectionMapTexture: Texture;\r\n    private _indirectEnvTexture: Texture;\r\n\r\n    /**\r\n     * Gets or sets the corner Radius on the slider bar.\r\n     */\r\n    @serialize()\r\n    public radius = 0.6;\r\n\r\n    /**\r\n     * Gets or sets the Bevel Front on the slider bar.\r\n     */\r\n    @serialize()\r\n    public bevelFront = 0.6;\r\n\r\n    /**\r\n     * Gets or sets the Bevel Front Stretch on the slider bar.\r\n     */\r\n    @serialize()\r\n    public bevelFrontStretch = 0.077;\r\n\r\n    /**\r\n     * Gets or sets the Bevel Back on the slider bar.\r\n     */\r\n    @serialize()\r\n    public bevelBack = 0;\r\n\r\n    /**\r\n     * Gets or sets the Bevel Back Stretch on the slider bar.\r\n     */\r\n    @serialize()\r\n    public bevelBackStretch = 0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusTopLeft = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusTopRight = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusBottomLeft = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusBottomRight = 1.0;\r\n\r\n    /**\r\n     * Gets or sets whether Bulge is enabled.\r\n     * Default is false.\r\n     */\r\n    @serialize()\r\n    public bulgeEnabled = false;\r\n\r\n    /**\r\n     * Gets or sets the Bulge Height.\r\n     */\r\n    @serialize()\r\n    public bulgeHeight = -0.323;\r\n\r\n    /**\r\n     * Gets or sets the Bulge Radius.\r\n     */\r\n    @serialize()\r\n    public bulgeRadius = 0.73;\r\n\r\n    /**\r\n     * Gets or sets the Sun Intensity.\r\n     */\r\n    @serialize()\r\n    public sunIntensity = 1.102;\r\n\r\n    /**\r\n     * Gets or sets the Sun Theta.\r\n     */\r\n    @serialize()\r\n    public sunTheta = 0.76;\r\n\r\n    /**\r\n     * Gets or sets the Sun Phi.\r\n     */\r\n    @serialize()\r\n    public sunPhi = 0.526;\r\n\r\n    /**\r\n     * Gets or sets the Indirect Diffuse.\r\n     */\r\n    @serialize()\r\n    public indirectDiffuse = 0.658;\r\n\r\n    /**\r\n     * Gets or sets the base albedo.\r\n     */\r\n    @serialize()\r\n    public albedo = new Color4(0.0117647, 0.505882, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the Specular value.\r\n     */\r\n    @serialize()\r\n    public specular = 0;\r\n\r\n    /**\r\n     * Gets or sets the Shininess value.\r\n     */\r\n    @serialize()\r\n    public shininess = 10;\r\n\r\n    /**\r\n     * Gets or sets the Sharpness value.\r\n     */\r\n    @serialize()\r\n    public sharpness = 0;\r\n\r\n    /**\r\n     * Gets or sets the Subsurface value.\r\n     */\r\n    @serialize()\r\n    public subsurface = 0;\r\n\r\n    /**\r\n     * Gets or sets the left gradient color.\r\n     */\r\n    @serialize()\r\n    public leftGradientColor = new Color4(0.0117647, 0.505882, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the right gradient color.\r\n     */\r\n    @serialize()\r\n    public rightGradientColor = new Color4(0.0117647, 0.505882, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the reflection value.\r\n     */\r\n    @serialize()\r\n    public reflection = 0.749;\r\n\r\n    /**\r\n     * Gets or sets the front reflect value.\r\n     */\r\n    @serialize()\r\n    public frontReflect = 0;\r\n\r\n    /**\r\n     * Gets or sets the edge reflect value.\r\n     */\r\n    @serialize()\r\n    public edgeReflect = 0.09;\r\n\r\n    /**\r\n     * Gets or sets the power value.\r\n     */\r\n    @serialize()\r\n    public power = 8.13;\r\n\r\n    /**\r\n     * Gets or sets the sky color.\r\n     */\r\n    @serialize()\r\n    public skyColor = new Color4(0.0117647, 0.964706, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the horizon color.\r\n     */\r\n    @serialize()\r\n    public horizonColor = new Color4(0.0117647, 0.333333, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the ground color.\r\n     */\r\n    @serialize()\r\n    public groundColor = new Color4(0, 0.254902, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the horizon power value.\r\n     */\r\n    @serialize()\r\n    public horizonPower = 1;\r\n\r\n    /**\r\n     * Gets or sets the finger occlusion width value.\r\n     */\r\n    @serialize()\r\n    public width = 0.02;\r\n\r\n    /**\r\n     * Gets or sets the finger occlusion fuzz value.\r\n     */\r\n    @serialize()\r\n    public fuzz = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the minimum finger occlusion fuzz value.\r\n     */\r\n    @serialize()\r\n    public minFuzz = 0.001;\r\n\r\n    /**\r\n     * Gets or sets the finger occlusion clip fade value.\r\n     */\r\n    @serialize()\r\n    public clipFade = 0.01;\r\n\r\n    /**\r\n     * Gets or sets the hue shift value.\r\n     */\r\n    @serialize()\r\n    public hueShift = 0;\r\n\r\n    /**\r\n     * Gets or sets the saturation shift value.\r\n     */\r\n    @serialize()\r\n    public saturationShift = 0;\r\n\r\n    /**\r\n     * Gets or sets the value shift.\r\n     */\r\n    @serialize()\r\n    public valueShift = 0;\r\n\r\n    /**\r\n     * Gets or sets the position of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobPosition = new Vector3(0, 0, 0.1);\r\n\r\n    /**\r\n     * Gets or sets the intensity of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the near size of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobNearSize = 0.01;\r\n    /**\r\n     * Gets or sets the far size of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobFarSize = 0.03;\r\n\r\n    /**\r\n     * Gets or sets the distance considered \"near\" to the mesh, which controls the size of the hover glow effect (see blobNearSize).\r\n     */\r\n    @serialize()\r\n    public blobNearDistance = 0;\r\n\r\n    /**\r\n     * Gets or sets the distance considered \"far\" from the mesh, which controls the size of the hover glow effect (see blobFarSize).\r\n     */\r\n    @serialize()\r\n    public blobFarDistance = 0.08;\r\n\r\n    /**\r\n     * Gets or sets the length of the hover glow effect fade.\r\n     */\r\n    @serialize()\r\n    public blobFadeLength = 0.576;\r\n\r\n    /**\r\n     * Gets or sets the progress of the hover glow effect selection animation corresponding to the left pointer (0.0 - 1.0).\r\n     */\r\n    @serialize()\r\n    public blobPulse = 0;\r\n\r\n    /**\r\n     * Gets or sets the opacity of the hover glow effect corresponding to the left pointer (0.0 - 1.0). Default is 0.\r\n     */\r\n    @serialize()\r\n    public blobFade = 1;\r\n\r\n    /**\r\n     * Gets or sets the position of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobPosition2 = new Vector3(0.2, 0, 0.1);\r\n\r\n    /**\r\n     * Gets or sets the size of the hover glow effect when the right pointer is considered \"near\" to the mesh (see blobNearDistance).\r\n     */\r\n    @serialize()\r\n    public blobNearSize2 = 0.01;\r\n\r\n    /**\r\n     * Gets or sets the progress of the hover glow effect selection animation corresponding to the right pointer (0.0 - 1.0).\r\n     */\r\n    @serialize()\r\n    public blobPulse2 = 0;\r\n\r\n    /**\r\n     * Gets or sets the opacity of the hover glow effect corresponding to the right pointer (0.0 - 1.0). Default is 1.\r\n     */\r\n    @serialize()\r\n    public blobFade2 = 1;\r\n\r\n    /**\r\n     * Gets or sets the texture of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobTexture = new Texture(\"\", this.getScene());\r\n\r\n    /**\r\n     * Gets or sets the finger position for left index.\r\n     */\r\n    @serialize()\r\n    public leftIndexPosition = new Vector3(0, 0, 1);\r\n\r\n    /**\r\n     * Gets or sets the finger position for right index.\r\n     */\r\n    @serialize()\r\n    public rightIndexPosition = new Vector3(-1, -1, -1);\r\n\r\n    /**\r\n     * Gets or sets the finger position for left index middle position.\r\n     */\r\n    @serialize()\r\n    public leftIndexMiddlePosition = new Vector3(0, 0, 0);\r\n\r\n    /**\r\n     * Gets or sets the finger position for right index middle position.\r\n     */\r\n    @serialize()\r\n    public rightIndexMiddlePosition = new Vector3(0, 0, 0);\r\n\r\n    /**\r\n     * Gets or sets the Decal Scle for XY.\r\n     */\r\n    @serialize()\r\n    public decalScaleXY = new Vector2(1.5, 1.5);\r\n\r\n    /**\r\n     * Gets or sets decalFrontOnly\r\n     * Default is true\r\n     */\r\n    @serialize()\r\n    public decalFrontOnly = true;\r\n\r\n    /**\r\n     * Gets or sets the Rim Light intensity.\r\n     */\r\n    @serialize()\r\n    public rimIntensity = 0.287;\r\n\r\n    /**\r\n     * Gets or sets the Rim Light hue shift value.\r\n     */\r\n    @serialize()\r\n    public rimHueShift = 0;\r\n\r\n    /**\r\n     * Gets or sets the Rim Light saturation shift value.\r\n     */\r\n    @serialize()\r\n    public rimSaturationShift = 0;\r\n\r\n    /**\r\n     * Gets or sets the Rim Light value shift.\r\n     */\r\n    @serialize()\r\n    public rimValueShift = -1;\r\n\r\n    /**\r\n     * Gets or sets the intensity of the iridescence effect.\r\n     */\r\n    @serialize()\r\n    public iridescenceIntensity = 0;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public useGlobalLeftIndex = 1.0;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public useGlobalRightIndex = 1.0;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalLeftIndexTipProximity = 0.0;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalRightIndexTipProximity = 0.0;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalLeftIndexTipPosition = new Vector4(0.5, 0.0, -0.55, 1.0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globaRightIndexTipPosition = new Vector4(0.0, 0.0, 0.0, 1.0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalLeftThumbTipPosition = new Vector4(0.5, 0.0, -0.55, 1.0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalRightThumbTipPosition = new Vector4(0.0, 0.0, 0.0, 1.0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalLeftIndexMiddlePosition = new Vector4(0.5, 0.0, -0.55, 1.0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalRightIndexMiddlePosition = new Vector4(0.0, 0.0, 0.0, 1.0);\r\n\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n        this.alphaMode = Constants.ALPHA_DISABLE;\r\n        this.backFaceCulling = false;\r\n        this._blueGradientTexture = new Texture(MRDLSliderBarMaterial.BLUE_GRADIENT_TEXTURE_URL, this.getScene(), true, false, Texture.NEAREST_SAMPLINGMODE);\r\n        this._decalTexture = new Texture(\"\", this.getScene());\r\n        this._reflectionMapTexture = new Texture(\"\", this.getScene());\r\n        this._indirectEnvTexture = new Texture(\"\", this.getScene());\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new MRDLSliderBarMaterialDefines();\r\n        }\r\n\r\n        const defines = <MRDLSliderBarMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, false);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (defines.TANGENT) {\r\n                attribs.push(VertexBuffer.TangentKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"mrdlSliderBar\";\r\n            const join = defines.toString();\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"viewProjection\",\r\n                \"cameraPosition\",\r\n                \"_Radius_\",\r\n                \"_Bevel_Front_\",\r\n                \"_Bevel_Front_Stretch_\",\r\n                \"_Bevel_Back_\",\r\n                \"_Bevel_Back_Stretch_\",\r\n                \"_Radius_Top_Left_\",\r\n                \"_Radius_Top_Right_\",\r\n                \"_Radius_Bottom_Left_\",\r\n                \"_Radius_Bottom_Right_\",\r\n                \"_Bulge_Enabled_\",\r\n                \"_Bulge_Height_\",\r\n                \"_Bulge_Radius_\",\r\n                \"_Sun_Intensity_\",\r\n                \"_Sun_Theta_\",\r\n                \"_Sun_Phi_\",\r\n                \"_Indirect_Diffuse_\",\r\n                \"_Albedo_\",\r\n                \"_Specular_\",\r\n                \"_Shininess_\",\r\n                \"_Sharpness_\",\r\n                \"_Subsurface_\",\r\n                \"_Left_Color_\",\r\n                \"_Right_Color_\",\r\n                \"_Reflection_\",\r\n                \"_Front_Reflect_\",\r\n                \"_Edge_Reflect_\",\r\n                \"_Power_\",\r\n                \"_Sky_Color_\",\r\n                \"_Horizon_Color_\",\r\n                \"_Ground_Color_\",\r\n                \"_Horizon_Power_\",\r\n                \"_Reflection_Map_\",\r\n                \"_Indirect_Environment_\",\r\n                \"_Width_\",\r\n                \"_Fuzz_\",\r\n                \"_Min_Fuzz_\",\r\n                \"_Clip_Fade_\",\r\n                \"_Hue_Shift_\",\r\n                \"_Saturation_Shift_\",\r\n                \"_Value_Shift_\",\r\n                \"_Blob_Position_\",\r\n                \"_Blob_Intensity_\",\r\n                \"_Blob_Near_Size_\",\r\n                \"_Blob_Far_Size_\",\r\n                \"_Blob_Near_Distance_\",\r\n                \"_Blob_Far_Distance_\",\r\n                \"_Blob_Fade_Length_\",\r\n                \"_Blob_Pulse_\",\r\n                \"_Blob_Fade_\",\r\n                \"_Blob_Texture_\",\r\n                \"_Blob_Position_2_\",\r\n                \"_Blob_Near_Size_2_\",\r\n                \"_Blob_Pulse_2_\",\r\n                \"_Blob_Fade_2_\",\r\n                \"_Left_Index_Pos_\",\r\n                \"_Right_Index_Pos_\",\r\n                \"_Left_Index_Middle_Pos_\",\r\n                \"_Right_Index_Middle_Pos_\",\r\n                \"_Decal_\",\r\n                \"_Decal_Scale_XY_\",\r\n                \"_Decal_Front_Only_\",\r\n                \"_Rim_Intensity_\",\r\n                \"_Rim_Texture_\",\r\n                \"_Rim_Hue_Shift_\",\r\n                \"_Rim_Saturation_Shift_\",\r\n                \"_Rim_Value_Shift_\",\r\n                \"_Iridescence_Intensity_\",\r\n                \"_Iridescence_Texture_\",\r\n                \"Use_Global_Left_Index\",\r\n                \"Use_Global_Right_Index\",\r\n                \"Global_Left_Index_Tip_Position\",\r\n                \"Global_Right_Index_Tip_Position\",\r\n                \"Global_Left_Thumb_Tip_Position\",\r\n                \"Global_Right_Thumb_Tip_Position\",\r\n                \"Global_Left_Index_Middle_Position;\",\r\n                \"Global_Right_Index_Middle_Position\",\r\n                \"Global_Left_Index_Tip_Proximity\",\r\n                \"Global_Right_Index_Tip_Proximity\",\r\n            ];\r\n            const samplers: string[] = [\"_Rim_Texture_\", \"_Iridescence_Texture_\"];\r\n            const uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: 4 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines,\r\n                this._materialContext\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const defines = <MRDLSliderBarMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", this.getScene().getTransformMatrix());\r\n        this._activeEffect.setVector3(\"cameraPosition\", this.getScene().activeCamera!.position);\r\n\r\n        // \"Round Rect\"\r\n        this._activeEffect.setFloat(\"_Radius_\", this.radius);\r\n        this._activeEffect.setFloat(\"_Bevel_Front_\", this.bevelFront);\r\n        this._activeEffect.setFloat(\"_Bevel_Front_Stretch_\", this.bevelFrontStretch);\r\n        this._activeEffect.setFloat(\"_Bevel_Back_\", this.bevelBack);\r\n        this._activeEffect.setFloat(\"_Bevel_Back_Stretch_\", this.bevelBackStretch);\r\n\r\n        // \"Radii Multipliers\"\r\n        this._activeEffect.setFloat(\"_Radius_Top_Left_\", this.radiusTopLeft);\r\n        this._activeEffect.setFloat(\"_Radius_Top_Right_\", this.radiusTopRight);\r\n        this._activeEffect.setFloat(\"_Radius_Bottom_Left_\", this.radiusBottomLeft);\r\n        this._activeEffect.setFloat(\"_Radius_Bottom_Right_\", this.radiusBottomRight);\r\n\r\n        // \"Bulge\"\r\n        this._activeEffect.setFloat(\"_Bulge_Enabled_\", this.bulgeEnabled ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Bulge_Height_\", this.bulgeHeight);\r\n        this._activeEffect.setFloat(\"_Bulge_Radius_\", this.bulgeRadius);\r\n\r\n        // \"Sun\"\r\n        this._activeEffect.setFloat(\"_Sun_Intensity_\", this.sunIntensity);\r\n        this._activeEffect.setFloat(\"_Sun_Theta_\", this.sunTheta);\r\n        this._activeEffect.setFloat(\"_Sun_Phi_\", this.sunPhi);\r\n        this._activeEffect.setFloat(\"_Indirect_Diffuse_\", this.indirectDiffuse);\r\n\r\n        // \"Diffuse And Specular\"\r\n        this._activeEffect.setDirectColor4(\"_Albedo_\", this.albedo);\r\n        this._activeEffect.setFloat(\"_Specular_\", this.specular);\r\n        this._activeEffect.setFloat(\"_Shininess_\", this.shininess);\r\n        this._activeEffect.setFloat(\"_Sharpness_\", this.sharpness);\r\n        this._activeEffect.setFloat(\"_Subsurface_\", this.subsurface);\r\n\r\n        // \"Gradient\"\r\n        this._activeEffect.setDirectColor4(\"_Left_Color_\", this.leftGradientColor);\r\n        this._activeEffect.setDirectColor4(\"_Right_Color_\", this.rightGradientColor);\r\n\r\n        // \"Reflection\"\r\n        this._activeEffect.setFloat(\"_Reflection_\", this.reflection);\r\n        this._activeEffect.setFloat(\"_Front_Reflect_\", this.frontReflect);\r\n        this._activeEffect.setFloat(\"_Edge_Reflect_\", this.edgeReflect);\r\n        this._activeEffect.setFloat(\"_Power_\", this.power);\r\n\r\n        // \"Sky Environment\"\r\n        //define SKY_ENABLED true;\r\n        this._activeEffect.setDirectColor4(\"_Sky_Color_\", this.skyColor);\r\n        this._activeEffect.setDirectColor4(\"_Horizon_Color_\", this.horizonColor);\r\n        this._activeEffect.setDirectColor4(\"_Ground_Color_\", this.groundColor);\r\n        this._activeEffect.setFloat(\"_Horizon_Power_\", this.horizonPower);\r\n\r\n        // \"Mapped Environment\"\r\n        //define ENV_ENABLE false;\r\n        this._activeEffect.setTexture(\"_Reflection_Map_\", this._reflectionMapTexture);\r\n        this._activeEffect.setTexture(\"_Indirect_Environment_\", this._indirectEnvTexture);\r\n\r\n        // \"FingerOcclusion\"\r\n        //define OCCLUSION_ENABLED false;\r\n        this._activeEffect.setFloat(\"_Width_\", this.width);\r\n        this._activeEffect.setFloat(\"_Fuzz_\", this.fuzz);\r\n        this._activeEffect.setFloat(\"_Min_Fuzz_\", this.minFuzz);\r\n        this._activeEffect.setFloat(\"_Clip_Fade_\", this.clipFade);\r\n\r\n        // \"View Based Color Shift\"\r\n        this._activeEffect.setFloat(\"_Hue_Shift_\", this.hueShift);\r\n        this._activeEffect.setFloat(\"_Saturation_Shift_\", this.saturationShift);\r\n        this._activeEffect.setFloat(\"_Value_Shift_\", this.valueShift);\r\n\r\n        // \"Blob\"\r\n        //define BLOB_ENABLE false;\r\n        this._activeEffect.setVector3(\"_Blob_Position_\", this.blobPosition);\r\n        this._activeEffect.setFloat(\"_Blob_Intensity_\", this.blobIntensity);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_\", this.blobNearSize);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Size_\", this.blobFarSize);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Distance_\", this.blobNearDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Distance_\", this.blobFarDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_Length_\", this.blobFadeLength);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_\", this.blobPulse);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_\", this.blobFade);\r\n\r\n        // \"Blob Texture\"\r\n        this._activeEffect.setTexture(\"_Blob_Texture_\", this.blobTexture);\r\n\r\n        // \"Blob 2\"\r\n        //define BLOB_ENABLE_2 true;\r\n        this._activeEffect.setVector3(\"_Blob_Position_2_\", this.blobPosition2);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_2_\", this.blobNearSize2);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_2_\", this.blobPulse2);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_2_\", this.blobFade2);\r\n\r\n        // \"Finger Positions\"\r\n        this._activeEffect.setVector3(\"_Left_Index_Pos_\", this.leftIndexPosition);\r\n        this._activeEffect.setVector3(\"_Right_Index_Pos_\", this.rightIndexPosition);\r\n        this._activeEffect.setVector3(\"_Left_Index_Middle_Pos_\", this.leftIndexMiddlePosition);\r\n        this._activeEffect.setVector3(\"_Right_Index_Middle_Pos_\", this.rightIndexMiddlePosition);\r\n\r\n        // \"Decal Texture\"\r\n        //define DECAL_ENABLE false;\r\n        this._activeEffect.setTexture(\"_Decal_\", this._decalTexture);\r\n        this._activeEffect.setVector2(\"_Decal_Scale_XY_\", this.decalScaleXY);\r\n        this._activeEffect.setFloat(\"_Decal_Front_Only_\", this.decalFrontOnly ? 1.0 : 0.0);\r\n\r\n        // \"Rim Light\"\r\n        this._activeEffect.setFloat(\"_Rim_Intensity_\", this.rimIntensity);\r\n        this._activeEffect.setTexture(\"_Rim_Texture_\", this._blueGradientTexture);\r\n        this._activeEffect.setFloat(\"_Rim_Hue_Shift_\", this.rimHueShift);\r\n        this._activeEffect.setFloat(\"_Rim_Saturation_Shift_\", this.rimSaturationShift);\r\n        this._activeEffect.setFloat(\"_Rim_Value_Shift_\", this.rimValueShift);\r\n\r\n        // \"Iridescence\"\r\n        //define IRIDESCENCE_ENABLED true;\r\n        this._activeEffect.setFloat(\"_Iridescence_Intensity_\", this.iridescenceIntensity);\r\n        this._activeEffect.setTexture(\"_Iridescence_Texture_\", this._blueGradientTexture);\r\n\r\n        // Global inputs\r\n        this._activeEffect.setFloat(\"Use_Global_Left_Index\", this.useGlobalLeftIndex);\r\n        this._activeEffect.setFloat(\"Use_Global_Right_Index\", this.useGlobalRightIndex);\r\n\r\n        this._activeEffect.setVector4(\"Global_Left_Index_Tip_Position\", this.globalLeftIndexTipPosition);\r\n        this._activeEffect.setVector4(\"Global_Right_Index_Tip_Position\", this.globaRightIndexTipPosition);\r\n\r\n        this._activeEffect.setVector4(\"Global_Left_Thumb_Tip_Position\", this.globalLeftThumbTipPosition);\r\n        this._activeEffect.setVector4(\"Global_Right_Thumb_Tip_Position\", this.globalRightThumbTipPosition);\r\n\r\n        this._activeEffect.setVector4(\"Global_Left_Index_Middle_Position\", this.globalLeftIndexMiddlePosition);\r\n        this._activeEffect.setVector4(\"Global_Right_Index_Middle_Position\", this.globalRightIndexMiddlePosition);\r\n\r\n        this._activeEffect.setFloat(\"Global_Left_Index_Tip_Proximity\", this.globalLeftIndexTipProximity);\r\n        this._activeEffect.setFloat(\"Global_Right_Index_Tip_Proximity\", this.globalRightIndexTipProximity);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    /**\r\n     * Get the list of animatables in the material.\r\n     * @returns the list of animatables object used in the material\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n        this._reflectionMapTexture.dispose();\r\n        this._indirectEnvTexture.dispose();\r\n        this._blueGradientTexture.dispose();\r\n        this._decalTexture.dispose();\r\n    }\r\n\r\n    public clone(name: string): MRDLSliderBarMaterial {\r\n        return SerializationHelper.Clone(() => new MRDLSliderBarMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.MRDLSliderBarMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"MRDLSliderBarMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): MRDLSliderBarMaterial {\r\n        return SerializationHelper.Parse(() => new MRDLSliderBarMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.MRDLSliderBarMaterial\", MRDLSliderBarMaterial);\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"mrdlSliderThumbPixelShader\";\nconst shader = `uniform vec3 cameraPosition;\rvarying vec3 vPosition;\rvarying vec3 vNormal;\rvarying vec2 vUV;\rvarying vec3 vTangent;\rvarying vec3 vBinormal;\rvarying vec4 vColor;\rvarying vec4 vExtra1;\rvarying vec4 vExtra2;\rvarying vec4 vExtra3;\runiform float _Radius_;\runiform float _Bevel_Front_;\runiform float _Bevel_Front_Stretch_;\runiform float _Bevel_Back_;\runiform float _Bevel_Back_Stretch_;\runiform float _Radius_Top_Left_;\runiform float _Radius_Top_Right_;\runiform float _Radius_Bottom_Left_;\runiform float _Radius_Bottom_Right_;\runiform bool _Bulge_Enabled_;\runiform float _Bulge_Height_;\runiform float _Bulge_Radius_;\runiform float _Sun_Intensity_;\runiform float _Sun_Theta_;\runiform float _Sun_Phi_;\runiform float _Indirect_Diffuse_;\runiform vec4 _Albedo_;\runiform float _Specular_;\runiform float _Shininess_;\runiform float _Sharpness_;\runiform float _Subsurface_;\runiform vec4 _Left_Color_;\runiform vec4 _Right_Color_;\runiform float _Reflection_;\runiform float _Front_Reflect_;\runiform float _Edge_Reflect_;\runiform float _Power_;\runiform vec4 _Sky_Color_;\runiform vec4 _Horizon_Color_;\runiform vec4 _Ground_Color_;\runiform float _Horizon_Power_;\runiform sampler2D _Reflection_Map_;\runiform sampler2D _Indirect_Environment_;\runiform float _Width_;\runiform float _Fuzz_;\runiform float _Min_Fuzz_;\runiform float _Clip_Fade_;\runiform float _Hue_Shift_;\runiform float _Saturation_Shift_;\runiform float _Value_Shift_;\runiform vec3 _Blob_Position_;\runiform float _Blob_Intensity_;\runiform float _Blob_Near_Size_;\runiform float _Blob_Far_Size_;\runiform float _Blob_Near_Distance_;\runiform float _Blob_Far_Distance_;\runiform float _Blob_Fade_Length_;\runiform float _Blob_Pulse_;\runiform float _Blob_Fade_;\runiform sampler2D _Blob_Texture_;\runiform vec3 _Blob_Position_2_;\runiform float _Blob_Near_Size_2_;\runiform float _Blob_Pulse_2_;\runiform float _Blob_Fade_2_;\runiform vec3 _Left_Index_Pos_;\runiform vec3 _Right_Index_Pos_;\runiform vec3 _Left_Index_Middle_Pos_;\runiform vec3 _Right_Index_Middle_Pos_;\runiform sampler2D _Decal_;\runiform vec2 _Decal_Scale_XY_;\runiform bool _Decal_Front_Only_;\runiform float _Rim_Intensity_;\runiform sampler2D _Rim_Texture_;\runiform float _Rim_Hue_Shift_;\runiform float _Rim_Saturation_Shift_;\runiform float _Rim_Value_Shift_;\runiform float _Iridescence_Intensity_;\runiform sampler2D _Iridescence_Texture_;\runiform bool Use_Global_Left_Index;\runiform bool Use_Global_Right_Index;\runiform vec4 Global_Left_Index_Tip_Position;\runiform vec4 Global_Right_Index_Tip_Position;\runiform vec4 Global_Left_Thumb_Tip_Position;\runiform vec4 Global_Right_Thumb_Tip_Position;\runiform vec4 Global_Left_Index_Middle_Position;\runiform vec4 Global_Right_Index_Middle_Position;\runiform float Global_Left_Index_Tip_Proximity;\runiform float Global_Right_Index_Tip_Proximity;\rvoid Blob_Fragment_B180(\rsampler2D Blob_Texture,\rvec4 Blob_Info1,\rvec4 Blob_Info2,\rout vec4 Blob_Color)\r{\rfloat k1=dot(Blob_Info1.xy,Blob_Info1.xy);\rfloat k2=dot(Blob_Info2.xy,Blob_Info2.xy);\rvec3 closer=k1<k2 ? vec3(k1,Blob_Info1.z,Blob_Info1.w) : vec3(k2,Blob_Info2.z,Blob_Info2.w);\rBlob_Color=closer.z*texture(Blob_Texture,vec2(vec2(sqrt(closer.x),closer.y).x,1.0-vec2(sqrt(closer.x),closer.y).y))*clamp(1.0-closer.x,0.0,1.0);\r}\rvoid FastLinearTosRGB_B192(\rvec4 Linear,\rout vec4 sRGB)\r{\rsRGB.rgb=sqrt(clamp(Linear.rgb,0.0,1.0));\rsRGB.a=Linear.a;\r}\rvoid Scale_RGB_B209(\rvec4 Color,\rfloat Scalar,\rout vec4 Result)\r{\rResult=vec4(Scalar,Scalar,Scalar,1)*Color;\r}\rvoid Fragment_Main_B271(\rfloat Sun_Intensity,\rfloat Sun_Theta,\rfloat Sun_Phi,\rvec3 Normal,\rvec4 Albedo,\rfloat Fresnel_Reflect,\rfloat Shininess,\rvec3 Incident,\rvec4 Horizon_Color,\rvec4 Sky_Color,\rvec4 Ground_Color,\rfloat Indirect_Diffuse,\rfloat Specular,\rfloat Horizon_Power,\rfloat Reflection,\rvec4 Reflection_Sample,\rvec4 Indirect_Sample,\rfloat Sharpness,\rfloat SSS,\rfloat Subsurface,\rvec4 Translucence,\rvec4 Rim_Light,\rvec4 Iridescence,\rout vec4 Result)\r{\rfloat theta=Sun_Theta*2.0*3.14159;\rfloat phi=Sun_Phi*3.14159;\rvec3 lightDir= vec3(cos(phi)*cos(theta),sin(phi),cos(phi)*sin(theta));\rfloat NdotL=max(dot(lightDir,Normal),0.0);\rvec3 R=reflect(Incident,Normal);\rfloat RdotL=max(0.0,dot(R,lightDir));\rfloat specular=pow(RdotL,Shininess);\rspecular=mix(specular,smoothstep(0.495*Sharpness,1.0-0.495*Sharpness,specular),Sharpness);\rvec4 gi=mix(Ground_Color,Sky_Color,Normal.y*0.5+0.5);\rResult=((Sun_Intensity*NdotL+Indirect_Sample*Indirect_Diffuse+Translucence)*(1.0+SSS*Subsurface))*Albedo*(1.0-Fresnel_Reflect)+(Sun_Intensity*specular*Specular+Fresnel_Reflect*Reflection*Reflection_Sample)+Fresnel_Reflect*Rim_Light+Iridescence;\r}\rvoid Bulge_B229(\rbool Enabled,\rvec3 Normal,\rvec3 Tangent,\rfloat Bulge_Height,\rvec4 UV,\rfloat Bulge_Radius,\rvec3 ButtonN,\rout vec3 New_Normal)\r{\rvec2 xy=clamp(UV.xy*2.0,vec2(-1,-1),vec2(1,1));\rvec3 B=(cross(Normal,Tangent));\rfloat k=-clamp(1.0-length(xy)/Bulge_Radius,0.0,1.0)*Bulge_Height;\rk=sin(k*3.14159*0.5);\rk*=smoothstep(0.9998,0.9999,abs(dot(ButtonN,Normal)));\rNew_Normal=Normal*sqrt(1.0-k*k)+(xy.x*Tangent+xy.y*B)*k;\rNew_Normal=Enabled ? New_Normal : Normal;\r}\rvoid SSS_B227(\rvec3 ButtonN,\rvec3 Normal,\rvec3 Incident,\rout float Result)\r{\rfloat NdotI=abs(dot(Normal,Incident));\rfloat BdotI=abs(dot(ButtonN,Incident));\rResult=(abs(NdotI-BdotI)); \r}\rvoid FingerOcclusion_B217(\rfloat Width,\rfloat DistToCenter,\rfloat Fuzz,\rfloat Min_Fuzz,\rvec3 Position,\rvec3 Forward,\rvec3 Nearest,\rfloat Fade_Out,\rout float NotInShadow)\r{\rfloat d=dot((Nearest-Position),Forward);\rfloat sh=smoothstep(Width*0.5,Width*0.5+Fuzz*max(d,0.0)+Min_Fuzz,DistToCenter);\rNotInShadow=1.0-(1.0-sh)*smoothstep(-Fade_Out,0.0,d);\r}\rvoid FingerOcclusion_B218(\rfloat Width,\rfloat DistToCenter,\rfloat Fuzz,\rfloat Min_Fuzz,\rvec3 Position,\rvec3 Forward,\rvec3 Nearest,\rfloat Fade_Out,\rout float NotInShadow)\r{\rfloat d=dot((Nearest-Position),Forward);\rfloat sh=smoothstep(Width*0.5,Width*0.5+Fuzz*max(d,0.0)+Min_Fuzz,DistToCenter);\rNotInShadow=1.0-(1.0-sh)*smoothstep(-Fade_Out,0.0,d);\r}\rvoid Scale_Color_B241(\rvec4 Color,\rfloat Scalar,\rout vec4 Result)\r{\rResult=Scalar*Color;\r}\rvoid From_HSV_B223(\rfloat Hue,\rfloat Saturation,\rfloat Value,\rfloat Alpha,\rout vec4 Color)\r{\rvec4 K=vec4(1.0,2.0/3.0,1.0/3.0,3.0);\rvec3 p=abs(fract(vec3(Hue,Hue,Hue)+K.xyz)*6.0-K.www);\rColor.rgb=Value*mix(K.xxx,clamp(p-K.xxx,0.0,1.0),Saturation);\rColor.a=Alpha;\r}\rvoid Fast_Fresnel_B272(\rfloat Front_Reflect,\rfloat Edge_Reflect,\rfloat Power,\rvec3 Normal,\rvec3 Incident,\rout float Transmit,\rout float Reflect)\r{\rfloat d=max(-dot(Incident,Normal),0.0);\rReflect=Front_Reflect+(Edge_Reflect-Front_Reflect)*pow(1.0-d,Power);\rTransmit=1.0-Reflect;\r}\rvoid Mapped_Environment_B201(\rsampler2D Reflected_Environment,\rsampler2D Indirect_Environment,\rvec3 Dir,\rout vec4 Reflected_Color,\rout vec4 Indirect_Diffuse)\r{\rReflected_Color=texture(Reflected_Environment,vec2(atan(Dir.z,Dir.x)/3.14159*0.5,asin(Dir.y)/3.14159+0.5));\rIndirect_Diffuse=texture(Indirect_Environment,vec2(atan(Dir.z,Dir.x)/3.14159*0.5,asin(Dir.y)/3.14159+0.5));\r}\rvec4 SampleEnv_Bid200(vec3 D,vec4 S,vec4 H,vec4 G,float exponent)\r{\rfloat k=pow(abs(D.y),exponent);\rvec4 C;\rif (D.y>0.0) {\rC=mix(H,S,k);\r} else {\rC=mix(H,G,k); \r}\rreturn C;\r}\rvoid Sky_Environment_B200(\rvec3 Normal,\rvec3 Reflected,\rvec4 Sky_Color,\rvec4 Horizon_Color,\rvec4 Ground_Color,\rfloat Horizon_Power,\rout vec4 Reflected_Color,\rout vec4 Indirect_Color)\r{\rReflected_Color=SampleEnv_Bid200(Reflected,Sky_Color,Horizon_Color,Ground_Color,Horizon_Power);\rIndirect_Color=mix(Ground_Color,Sky_Color,Normal.y*0.5+0.5);\r}\rvoid Min_Segment_Distance_B215(\rvec3 P0,\rvec3 P1,\rvec3 Q0,\rvec3 Q1,\rout vec3 NearP,\rout vec3 NearQ,\rout float Distance)\r{\rvec3 u=P1-P0;\rvec3 v=Q1-Q0;\rvec3 w=P0-Q0;\rfloat a=dot(u,u);\rfloat b=dot(u,v);\rfloat c=dot(v,v);\rfloat d=dot(u,w);\rfloat e=dot(v,w);\rfloat D=a*c-b*b;\rfloat sD=D;\rfloat tD=D;\rfloat sc,sN,tc,tN;\rif (D<0.00001) {\rsN=0.0;\rsD=1.0;\rtN=e;\rtD=c;\r} else {\rsN=(b*e-c*d);\rtN=(a*e-b*d);\rif (sN<0.0) {\rsN=0.0;\rtN=e;\rtD=c;\r} else if (sN>sD) {\rsN=sD;\rtN=e+b;\rtD=c;\r}\r}\rif (tN<0.0) {\rtN=0.0;\rif (-d<0.0) {\rsN=0.0;\r} else if (-d>a) {\rsN=sD;\r} else {\rsN=-d;\rsD=a;\r}\r} else if (tN>tD) {\rtN=tD;\rif ((-d+b)<0.0) {\rsN=0.0;\r} else if ((-d+b)>a) {\rsN=sD;\r} else {\rsN=(-d+b);\rsD=a;\r}\r}\rsc=abs(sN)<0.000001 ? 0.0 : sN/sD;\rtc=abs(tN)<0.000001 ? 0.0 : tN/tD;\rNearP=P0+sc*u;\rNearQ=Q0+tc*v;\rDistance=distance(NearP,NearQ);\r}\rvoid To_XYZ_B224(\rvec3 Vec3,\rout float X,\rout float Y,\rout float Z)\r{\rX=Vec3.x;\rY=Vec3.y;\rZ=Vec3.z;\r}\rvoid Finger_Positions_B214(\rvec3 Left_Index_Pos,\rvec3 Right_Index_Pos,\rvec3 Left_Index_Middle_Pos,\rvec3 Right_Index_Middle_Pos,\rout vec3 Left_Index,\rout vec3 Right_Index,\rout vec3 Left_Index_Middle,\rout vec3 Right_Index_Middle)\r{\rLeft_Index= (Use_Global_Left_Index ? Global_Left_Index_Tip_Position.xyz : Left_Index_Pos);\rRight_Index= (Use_Global_Right_Index ? Global_Right_Index_Tip_Position.xyz : Right_Index_Pos);\rLeft_Index_Middle= (Use_Global_Left_Index ? Global_Left_Index_Middle_Position.xyz : Left_Index_Middle_Pos);\rRight_Index_Middle= (Use_Global_Right_Index ? Global_Right_Index_Middle_Position.xyz : Right_Index_Middle_Pos);\r}\rvoid VaryHSV_B258(\rvec3 HSV_In,\rfloat Hue_Shift,\rfloat Saturation_Shift,\rfloat Value_Shift,\rout vec3 HSV_Out)\r{\rHSV_Out=vec3(fract(HSV_In.x+Hue_Shift),clamp(HSV_In.y+Saturation_Shift,0.0,1.0),clamp(HSV_In.z+Value_Shift,0.0,1.0));\r}\rvoid Remap_Range_B264(\rfloat In_Min,\rfloat In_Max,\rfloat Out_Min,\rfloat Out_Max,\rfloat In,\rout float Out)\r{\rOut=mix(Out_Min,Out_Max,clamp((In-In_Min)/(In_Max-In_Min),0.0,1.0));\r}\rvoid To_HSV_B225(\rvec4 Color,\rout float Hue,\rout float Saturation,\rout float Value,\rout float Alpha,\rout vec3 HSV)\r{\rvec4 K=vec4(0.0,-1.0/3.0,2.0/3.0,-1.0);\rvec4 p=Color.g<Color.b ? vec4(Color.bg,K.wz) : vec4(Color.gb,K.xy);\rvec4 q=Color.r<p.x ? vec4(p.xyw,Color.r) : vec4(Color.r,p.yzx);\rfloat d=q.x-min(q.w,q.y);\rfloat e=1.0e-10;\rHue=abs(q.z+(q.w-q.y)/(6.0*d+e));\rSaturation=d/(q.x+e);\rValue=q.x;\rAlpha=Color.a;\rHSV=vec3(Hue,Saturation,Value);\r}\rvoid Code_B260(\rfloat X,\rout float Result)\r{\rResult=(acos(X)/3.14159-0.5)*2.0;\r}\rvoid Rim_Light_B282(\rvec3 Front,\rvec3 Normal,\rvec3 Incident,\rfloat Rim_Intensity,\rsampler2D Texture,\rout vec4 Result)\r{\rvec3 R=reflect(Incident,Normal);\rfloat RdotF=dot(R,Front);\rfloat RdotL=sqrt(1.0-RdotF*RdotF);\rvec2 UV=vec2(R.y*0.5+0.5,0.5);\rvec4 Color=texture(Texture,UV);\rResult=Color;\r}\rvoid main()\r{\rvec4 Blob_Color_Q180;\r#if BLOB_ENABLE\nBlob_Fragment_B180(_Blob_Texture_,vExtra2,vExtra3,Blob_Color_Q180);\r#else\nBlob_Color_Q180=vec4(0,0,0,0);\r#endif\nvec3 Incident_Q189=normalize(vPosition-cameraPosition);\rvec3 Normalized_Q188=normalize(vNormal);\rvec3 Normalized_Q221=normalize(vTangent);\rvec4 Color_Q233;\r#if DECAL_ENABLE\nColor_Q233=texture(_Decal_,vUV);\r#else\nColor_Q233=vec4(0,0,0,0);\r#endif\nfloat X_Q240;\rfloat Y_Q240;\rfloat Z_Q240;\rfloat W_Q240;\rX_Q240=vExtra1.x;\rY_Q240=vExtra1.y;\rZ_Q240=vExtra1.z;\rW_Q240=vExtra1.w;\rvec4 Linear_Q193;\rLinear_Q193.rgb=clamp(_Sky_Color_.rgb*_Sky_Color_.rgb,0.0,1.0);\rLinear_Q193.a=_Sky_Color_.a;\rvec4 Linear_Q194;\rLinear_Q194.rgb=clamp(_Horizon_Color_.rgb*_Horizon_Color_.rgb,0.0,1.0);\rLinear_Q194.a=_Horizon_Color_.a;\rvec4 Linear_Q195;\rLinear_Q195.rgb=clamp(_Ground_Color_.rgb*_Ground_Color_.rgb,0.0,1.0);\rLinear_Q195.a=_Ground_Color_.a;\rvec3 Left_Index_Q214;\rvec3 Right_Index_Q214;\rvec3 Left_Index_Middle_Q214;\rvec3 Right_Index_Middle_Q214;\rFinger_Positions_B214(_Left_Index_Pos_,_Right_Index_Pos_,_Left_Index_Middle_Pos_,_Right_Index_Middle_Pos_,Left_Index_Q214,Right_Index_Q214,Left_Index_Middle_Q214,Right_Index_Middle_Q214);\rvec4 Linear_Q196;\rLinear_Q196.rgb=clamp(_Albedo_.rgb*_Albedo_.rgb,0.0,1.0);\rLinear_Q196.a=_Albedo_.a;\rvec3 Normalized_Q257=normalize(vBinormal);\rvec3 Incident_Q220=normalize(vPosition-cameraPosition);\rvec3 New_Normal_Q229;\rBulge_B229(_Bulge_Enabled_,Normalized_Q188,Normalized_Q221,_Bulge_Height_,vColor,_Bulge_Radius_,vBinormal,New_Normal_Q229);\rfloat Result_Q227;\rSSS_B227(vBinormal,New_Normal_Q229,Incident_Q189,Result_Q227);\rvec4 Result_Q241;\rScale_Color_B241(Color_Q233,X_Q240,Result_Q241);\rfloat Transmit_Q272;\rfloat Reflect_Q272;\rFast_Fresnel_B272(_Front_Reflect_,_Edge_Reflect_,_Power_,New_Normal_Q229,Incident_Q189,Transmit_Q272,Reflect_Q272);\rfloat Product_Q275=Y_Q240*Y_Q240;\rvec3 NearP_Q215;\rvec3 NearQ_Q215;\rfloat Distance_Q215;\rMin_Segment_Distance_B215(Left_Index_Q214,Left_Index_Middle_Q214,vPosition,cameraPosition,NearP_Q215,NearQ_Q215,Distance_Q215);\rvec3 NearP_Q213;\rvec3 NearQ_Q213;\rfloat Distance_Q213;\rMin_Segment_Distance_B215(Right_Index_Q214,Right_Index_Middle_Q214,vPosition,cameraPosition,NearP_Q213,NearQ_Q213,Distance_Q213);\rvec3 Reflected_Q197=reflect(Incident_Q189,New_Normal_Q229);\rvec4 Product_Q253=Linear_Q196*vec4(1,1,1,1);\rvec4 Result_Q282;\rRim_Light_B282(Normalized_Q257,Normalized_Q188,Incident_Q220,_Rim_Intensity_,_Rim_Texture_,Result_Q282);\rfloat Dot_Q222=dot(Incident_Q220, Normalized_Q221);\rfloat MaxAB_Q273=max(Reflect_Q272,Product_Q275);\rfloat NotInShadow_Q217;\r#if OCCLUSION_ENABLED\nFingerOcclusion_B217(_Width_,Distance_Q215,_Fuzz_,_Min_Fuzz_,vPosition,vBinormal,NearP_Q215,_Clip_Fade_,NotInShadow_Q217);\r#else\nNotInShadow_Q217=1.0;\r#endif\nfloat NotInShadow_Q218;\r#if OCCLUSION_ENABLED\nFingerOcclusion_B218(_Width_,Distance_Q213,_Fuzz_,_Min_Fuzz_,vPosition,vBinormal,NearP_Q213,_Clip_Fade_,NotInShadow_Q218);\r#else\nNotInShadow_Q218=1.0;\r#endif\nvec4 Reflected_Color_Q201;\rvec4 Indirect_Diffuse_Q201;\r#if ENV_ENABLE\nMapped_Environment_B201(_Reflection_Map_,_Indirect_Environment_,Reflected_Q197,Reflected_Color_Q201,Indirect_Diffuse_Q201);\r#else\nReflected_Color_Q201=vec4(0,0,0,1);\rIndirect_Diffuse_Q201=vec4(0,0,0,1);\r#endif\nvec4 Reflected_Color_Q200;\rvec4 Indirect_Color_Q200;\r#if SKY_ENABLED\nSky_Environment_B200(New_Normal_Q229,Reflected_Q197,Linear_Q193,Linear_Q194,Linear_Q195,_Horizon_Power_,Reflected_Color_Q200,Indirect_Color_Q200);\r#else\nReflected_Color_Q200=vec4(0,0,0,1);\rIndirect_Color_Q200=vec4(0,0,0,1);\r#endif\nfloat Hue_Q225;\rfloat Saturation_Q225;\rfloat Value_Q225;\rfloat Alpha_Q225;\rvec3 HSV_Q225;\rTo_HSV_B225(Product_Q253,Hue_Q225,Saturation_Q225,Value_Q225,Alpha_Q225,HSV_Q225);\rfloat Hue_Q277;\rfloat Saturation_Q277;\rfloat Value_Q277;\rfloat Alpha_Q277;\rvec3 HSV_Q277;\rTo_HSV_B225(Result_Q282,Hue_Q277,Saturation_Q277,Value_Q277,Alpha_Q277,HSV_Q277);\rfloat Result_Q260;\rCode_B260(Dot_Q222,Result_Q260);\rfloat AbsA_Q226=abs(Result_Q260);\rfloat MinAB_Q208=min(NotInShadow_Q217,NotInShadow_Q218);\rvec4 Sum_Q198=Reflected_Color_Q201+Reflected_Color_Q200;\rvec4 Sum_Q199=Indirect_Diffuse_Q201+Indirect_Color_Q200;\rvec3 HSV_Out_Q276;\rVaryHSV_B258(HSV_Q277,_Rim_Hue_Shift_,_Rim_Saturation_Shift_,_Rim_Value_Shift_,HSV_Out_Q276);\rfloat Out_Q264;\rRemap_Range_B264(-1.0,1.0,0.0,1.0,Result_Q260,Out_Q264);\rfloat Product_Q256;\rProduct_Q256=AbsA_Q226*_Hue_Shift_;\rfloat X_Q278;\rfloat Y_Q278;\rfloat Z_Q278;\rTo_XYZ_B224(HSV_Out_Q276,X_Q278,Y_Q278,Z_Q278);\rvec2 Vec2_Q262=vec2(Out_Q264,0.5);\rvec3 HSV_Out_Q258;\rVaryHSV_B258(HSV_Q225,Product_Q256,_Saturation_Shift_,_Value_Shift_,HSV_Out_Q258);\rvec4 Color_Q279;\rFrom_HSV_B223(X_Q278,Y_Q278,Z_Q278,0.0,Color_Q279);\rvec4 Color_Q261;\r#if IRIDESCENCE_ENABLED\nColor_Q261=texture(_Iridescence_Texture_,Vec2_Q262);\r#else\nColor_Q261=vec4(0,0,0,0);\r#endif\nfloat X_Q224;\rfloat Y_Q224;\rfloat Z_Q224;\rTo_XYZ_B224(HSV_Out_Q258,X_Q224,Y_Q224,Z_Q224);\rvec4 Result_Q281=_Rim_Intensity_*Color_Q279;\rvec4 Result_Q263=_Iridescence_Intensity_*Color_Q261;\rvec4 Color_Q223;\rFrom_HSV_B223(X_Q224,Y_Q224,Z_Q224,0.0,Color_Q223);\rvec4 Result_Q234=Result_Q241+(1.0-Result_Q241.a)*Color_Q223;\rvec4 Result_Q271;\rFragment_Main_B271(_Sun_Intensity_,_Sun_Theta_,_Sun_Phi_,New_Normal_Q229,Result_Q234,MaxAB_Q273,_Shininess_,Incident_Q189,_Horizon_Color_,_Sky_Color_,_Ground_Color_,_Indirect_Diffuse_,_Specular_,_Horizon_Power_,_Reflection_,Sum_Q198,Sum_Q199,_Sharpness_,Result_Q227,_Subsurface_,vec4(0,0,0,0),Result_Q281,Result_Q263,Result_Q271);\rvec4 Result_Q209;\rScale_RGB_B209(Result_Q271,MinAB_Q208,Result_Q209);\rvec4 sRGB_Q192;\rFastLinearTosRGB_B192(Result_Q209,sRGB_Q192);\rvec4 Result_Q181=Blob_Color_Q180+(1.0-Blob_Color_Q180.a)*sRGB_Q192;\rvec4 Result_Q190=Result_Q181; Result_Q190.a=1.0;\rvec4 Out_Color=Result_Q190;\rfloat Clip_Threshold=0.001;\rbool To_sRGB=false;\rgl_FragColor=Out_Color;\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlSliderThumbPixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"mrdlSliderThumbVertexShader\";\nconst shader = `uniform mat4 world;\runiform mat4 viewProjection;\runiform vec3 cameraPosition;\rattribute vec3 position;\rattribute vec3 normal;\rattribute vec2 uv;\r#ifdef TANGENT\nattribute vec3 tangent;\r#else\nconst vec3 tangent=vec3(0.);\r#endif\nuniform float _Radius_;\runiform float _Bevel_Front_;\runiform float _Bevel_Front_Stretch_;\runiform float _Bevel_Back_;\runiform float _Bevel_Back_Stretch_;\runiform float _Radius_Top_Left_;\runiform float _Radius_Top_Right_;\runiform float _Radius_Bottom_Left_;\runiform float _Radius_Bottom_Right_;\runiform bool _Bulge_Enabled_;\runiform float _Bulge_Height_;\runiform float _Bulge_Radius_;\runiform float _Sun_Intensity_;\runiform float _Sun_Theta_;\runiform float _Sun_Phi_;\runiform float _Indirect_Diffuse_;\runiform vec4 _Albedo_;\runiform float _Specular_;\runiform float _Shininess_;\runiform float _Sharpness_;\runiform float _Subsurface_;\runiform vec4 _Left_Color_;\runiform vec4 _Right_Color_;\runiform float _Reflection_;\runiform float _Front_Reflect_;\runiform float _Edge_Reflect_;\runiform float _Power_;\runiform vec4 _Sky_Color_;\runiform vec4 _Horizon_Color_;\runiform vec4 _Ground_Color_;\runiform float _Horizon_Power_;\runiform sampler2D _Reflection_Map_;\runiform sampler2D _Indirect_Environment_;\runiform float _Width_;\runiform float _Fuzz_;\runiform float _Min_Fuzz_;\runiform float _Clip_Fade_;\runiform float _Hue_Shift_;\runiform float _Saturation_Shift_;\runiform float _Value_Shift_;\runiform vec3 _Blob_Position_;\runiform float _Blob_Intensity_;\runiform float _Blob_Near_Size_;\runiform float _Blob_Far_Size_;\runiform float _Blob_Near_Distance_;\runiform float _Blob_Far_Distance_;\runiform float _Blob_Fade_Length_;\runiform float _Blob_Pulse_;\runiform float _Blob_Fade_;\runiform sampler2D _Blob_Texture_;\runiform vec3 _Blob_Position_2_;\runiform float _Blob_Near_Size_2_;\runiform float _Blob_Pulse_2_;\runiform float _Blob_Fade_2_;\runiform vec3 _Left_Index_Pos_;\runiform vec3 _Right_Index_Pos_;\runiform vec3 _Left_Index_Middle_Pos_;\runiform vec3 _Right_Index_Middle_Pos_;\runiform sampler2D _Decal_;\runiform vec2 _Decal_Scale_XY_;\runiform bool _Decal_Front_Only_;\runiform float _Rim_Intensity_;\runiform sampler2D _Rim_Texture_;\runiform float _Rim_Hue_Shift_;\runiform float _Rim_Saturation_Shift_;\runiform float _Rim_Value_Shift_;\runiform float _Iridescence_Intensity_;\runiform sampler2D _Iridescence_Texture_;\runiform bool Use_Global_Left_Index;\runiform bool Use_Global_Right_Index;\runiform vec4 Global_Left_Index_Tip_Position;\runiform vec4 Global_Right_Index_Tip_Position;\runiform vec4 Global_Left_Thumb_Tip_Position;\runiform vec4 Global_Right_Thumb_Tip_Position;\runiform float Global_Left_Index_Tip_Proximity;\runiform float Global_Right_Index_Tip_Proximity;\rvarying vec3 vPosition;\rvarying vec3 vNormal;\rvarying vec2 vUV;\rvarying vec3 vTangent;\rvarying vec3 vBinormal;\rvarying vec4 vColor;\rvarying vec4 vExtra1;\rvarying vec4 vExtra2;\rvarying vec4 vExtra3;\rvoid Object_To_World_Pos_B162(\rvec3 Pos_Object,\rout vec3 Pos_World)\r{\rPos_World=(world*vec4(Pos_Object,1.0)).xyz;\r}\rvoid Object_To_World_Normal_B182(\rvec3 Nrm_Object,\rout vec3 Nrm_World)\r{\rNrm_World=(vec4(Nrm_Object,0.0)).xyz;\r}\rvoid Blob_Vertex_B173(\rvec3 Position,\rvec3 Normal,\rvec3 Tangent,\rvec3 Bitangent,\rvec3 Blob_Position,\rfloat Intensity,\rfloat Blob_Near_Size,\rfloat Blob_Far_Size,\rfloat Blob_Near_Distance,\rfloat Blob_Far_Distance,\rfloat Blob_Fade_Length,\rfloat Blob_Pulse,\rfloat Blob_Fade,\rout vec4 Blob_Info)\r{\rvec3 blob= (Use_Global_Left_Index ? Global_Left_Index_Tip_Position.xyz : Blob_Position);\rvec3 delta=blob-Position;\rfloat dist=dot(Normal,delta);\rfloat lerpValue=clamp((abs(dist)-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);\rfloat fadeValue=1.0-clamp((abs(dist)-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);\rfloat size=Blob_Near_Size+(Blob_Far_Size-Blob_Near_Size)*lerpValue;\rvec2 blobXY=vec2(dot(delta,Tangent),dot(delta,Bitangent))/(0.0001+size);\rfloat Fade=fadeValue*Intensity*Blob_Fade;\rfloat Distance=(lerpValue*0.5+0.5)*(1.0-Blob_Pulse);\rBlob_Info=vec4(blobXY.x,blobXY.y,Distance,Fade);\r}\rvoid Blob_Vertex_B174(\rvec3 Position,\rvec3 Normal,\rvec3 Tangent,\rvec3 Bitangent,\rvec3 Blob_Position,\rfloat Intensity,\rfloat Blob_Near_Size,\rfloat Blob_Far_Size,\rfloat Blob_Near_Distance,\rfloat Blob_Far_Distance,\rfloat Blob_Fade_Length,\rfloat Blob_Pulse,\rfloat Blob_Fade,\rout vec4 Blob_Info)\r{\rvec3 blob= (Use_Global_Right_Index ? Global_Right_Index_Tip_Position.xyz : Blob_Position);\rvec3 delta=blob-Position;\rfloat dist=dot(Normal,delta);\rfloat lerpValue=clamp((abs(dist)-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);\rfloat fadeValue=1.0-clamp((abs(dist)-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);\rfloat size=Blob_Near_Size+(Blob_Far_Size-Blob_Near_Size)*lerpValue;\rvec2 blobXY=vec2(dot(delta,Tangent),dot(delta,Bitangent))/(0.0001+size);\rfloat Fade=fadeValue*Intensity*Blob_Fade;\rfloat Distance=(lerpValue*0.5+0.5)*(1.0-Blob_Pulse);\rBlob_Info=vec4(blobXY.x,blobXY.y,Distance,Fade);\r}\rvoid Move_Verts_B280(\rfloat Anisotropy,\rvec3 P,\rfloat Radius,\rfloat Bevel,\rvec3 Normal_Object,\rfloat ScaleZ,\rfloat Stretch,\rout vec3 New_P,\rout vec2 New_UV,\rout float Radial_Gradient,\rout vec3 Radial_Dir,\rout vec3 New_Normal)\r{\rvec2 UV=P.xy*2.0+0.5;\rvec2 center=clamp(UV,0.0,1.0);\rvec2 delta=UV-center;\rfloat deltad=(length(delta)*2.0);\rfloat f=(Bevel+(Radius-Bevel)*Stretch)/Radius;\rfloat innerd=clamp(deltad*2.0,0.0,1.0);\rfloat outerd=clamp(deltad*2.0-1.0,0.0,1.0);\rfloat bevelAngle=outerd*3.14159*0.5;\rfloat sinb=sin(bevelAngle);\rfloat cosb=cos(bevelAngle);\rfloat beveld=(1.0-f)*innerd+f*sinb;\rfloat br=outerd;\rvec2 r2=2.0*vec2(Radius/Anisotropy,Radius);\rfloat dir=P.z<0.0001 ? 1.0 : -1.0;\rNew_UV=center+r2*((0.5-center)+normalize(delta+vec2(0.0,0.000001))*beveld*0.5);\rNew_P=vec3(New_UV-0.5,P.z+dir*(1.0-cosb)*Bevel*ScaleZ);\rRadial_Gradient=clamp((deltad-0.5)*2.0,0.0,1.0);\rRadial_Dir=vec3(delta*r2,0.0);\rvec3 beveledNormal=cosb*Normal_Object+sinb*vec3(delta.x,delta.y,0.0);\rNew_Normal=Normal_Object.z==0.0 ? Normal_Object : beveledNormal;\r}\rvoid Object_To_World_Dir_B210(\rvec3 Dir_Object,\rout vec3 Normal_World,\rout vec3 Normal_World_N,\rout float Normal_Length)\r{\rNormal_World=(world*vec4(Dir_Object,0.0)).xyz;\rNormal_Length=length(Normal_World);\rNormal_World_N=Normal_World/Normal_Length;\r}\rvoid To_XYZ_B228(\rvec3 Vec3,\rout float X,\rout float Y,\rout float Z)\r{\rX=Vec3.x;\rY=Vec3.y;\rZ=Vec3.z;\r}\rvoid Conditional_Float_B243(\rbool Which,\rfloat If_True,\rfloat If_False,\rout float Result)\r{\rResult=Which ? If_True : If_False;\r}\rvoid Object_To_World_Dir_B178(\rvec3 Dir_Object,\rout vec3 Binormal_World,\rout vec3 Binormal_World_N,\rout float Binormal_Length)\r{\rBinormal_World=(world*vec4(Dir_Object,0.0)).xyz;\rBinormal_Length=length(Binormal_World);\rBinormal_World_N=Binormal_World/Binormal_Length;\r}\rvoid Pick_Radius_B219(\rfloat Radius,\rfloat Radius_Top_Left,\rfloat Radius_Top_Right,\rfloat Radius_Bottom_Left,\rfloat Radius_Bottom_Right,\rvec3 Position,\rout float Result)\r{\rbool whichY=Position.y>0.0;\rResult=Position.x<0.0 ? (whichY ? Radius_Top_Left : Radius_Bottom_Left) : (whichY ? Radius_Top_Right : Radius_Bottom_Right);\rResult*=Radius;\r}\rvoid Conditional_Float_B186(\rbool Which,\rfloat If_True,\rfloat If_False,\rout float Result)\r{\rResult=Which ? If_True : If_False;\r}\rvoid Greater_Than_B187(\rfloat Left,\rfloat Right,\rout bool Not_Greater_Than,\rout bool Greater_Than)\r{\rGreater_Than=Left>Right;\rNot_Greater_Than=!Greater_Than;\r}\rvoid Remap_Range_B255(\rfloat In_Min,\rfloat In_Max,\rfloat Out_Min,\rfloat Out_Max,\rfloat In,\rout float Out)\r{\rOut=mix(Out_Min,Out_Max,clamp((In-In_Min)/(In_Max-In_Min),0.0,1.0));\r}\rvoid main()\r{\rvec2 XY_Q235;\rXY_Q235=(uv-vec2(0.5,0.5))*_Decal_Scale_XY_+vec2(0.5,0.5);\rvec3 Tangent_World_Q177;\rvec3 Tangent_World_N_Q177;\rfloat Tangent_Length_Q177;\rTangent_World_Q177=(world*vec4(vec3(1,0,0),0.0)).xyz;\rTangent_Length_Q177=length(Tangent_World_Q177);\rTangent_World_N_Q177=Tangent_World_Q177/Tangent_Length_Q177;\rvec3 Normal_World_Q210;\rvec3 Normal_World_N_Q210;\rfloat Normal_Length_Q210;\rObject_To_World_Dir_B210(vec3(0,0,1),Normal_World_Q210,Normal_World_N_Q210,Normal_Length_Q210);\rfloat X_Q228;\rfloat Y_Q228;\rfloat Z_Q228;\rTo_XYZ_B228(position,X_Q228,Y_Q228,Z_Q228);\rvec3 Nrm_World_Q176;\rNrm_World_Q176=normalize((world*vec4(normal,0.0)).xyz);\rvec3 Binormal_World_Q178;\rvec3 Binormal_World_N_Q178;\rfloat Binormal_Length_Q178;\rObject_To_World_Dir_B178(vec3(0,1,0),Binormal_World_Q178,Binormal_World_N_Q178,Binormal_Length_Q178);\rfloat Anisotropy_Q179=Tangent_Length_Q177/Binormal_Length_Q178;\rfloat Result_Q219;\rPick_Radius_B219(_Radius_,_Radius_Top_Left_,_Radius_Top_Right_,_Radius_Bottom_Left_,_Radius_Bottom_Right_,position,Result_Q219);\rfloat Anisotropy_Q203=Binormal_Length_Q178/Normal_Length_Q210;\rbool Not_Greater_Than_Q187;\rbool Greater_Than_Q187;\rGreater_Than_B187(Z_Q228,0.0,Not_Greater_Than_Q187,Greater_Than_Q187);\rvec4 Linear_Q251;\rLinear_Q251.rgb=clamp(_Left_Color_.rgb*_Left_Color_.rgb,0.0,1.0);\rLinear_Q251.a=_Left_Color_.a;\rvec4 Linear_Q252;\rLinear_Q252.rgb=clamp(_Right_Color_.rgb*_Right_Color_.rgb,0.0,1.0);\rLinear_Q252.a=_Right_Color_.a;\rvec3 Difference_Q211=vec3(0,0,0)-Normal_World_N_Q210;\rvec4 Out_Color_Q184=vec4(X_Q228,Y_Q228,Z_Q228,1);\rfloat Result_Q186;\rConditional_Float_B186(Greater_Than_Q187,_Bevel_Back_,_Bevel_Front_,Result_Q186);\rfloat Result_Q244;\rConditional_Float_B186(Greater_Than_Q187,_Bevel_Back_Stretch_,_Bevel_Front_Stretch_,Result_Q244);\rvec3 New_P_Q280;\rvec2 New_UV_Q280;\rfloat Radial_Gradient_Q280;\rvec3 Radial_Dir_Q280;\rvec3 New_Normal_Q280;\rMove_Verts_B280(Anisotropy_Q179,position,Result_Q219,Result_Q186,normal,Anisotropy_Q203,Result_Q244,New_P_Q280,New_UV_Q280,Radial_Gradient_Q280,Radial_Dir_Q280,New_Normal_Q280);\rfloat X_Q248;\rfloat Y_Q248;\rX_Q248=New_UV_Q280.x;\rY_Q248=New_UV_Q280.y;\rvec3 Pos_World_Q162;\rObject_To_World_Pos_B162(New_P_Q280,Pos_World_Q162);\rvec3 Nrm_World_Q182;\rObject_To_World_Normal_B182(New_Normal_Q280,Nrm_World_Q182);\rvec4 Blob_Info_Q173;\r#if BLOB_ENABLE\nBlob_Vertex_B173(Pos_World_Q162,Nrm_World_Q176,Tangent_World_N_Q177,Binormal_World_N_Q178,_Blob_Position_,_Blob_Intensity_,_Blob_Near_Size_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_,_Blob_Fade_,Blob_Info_Q173);\r#else\nBlob_Info_Q173=vec4(0,0,0,0);\r#endif\nvec4 Blob_Info_Q174;\r#if BLOB_ENABLE_2\nBlob_Vertex_B174(Pos_World_Q162,Nrm_World_Q176,Tangent_World_N_Q177,Binormal_World_N_Q178,_Blob_Position_2_,_Blob_Intensity_,_Blob_Near_Size_2_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_2_,_Blob_Fade_2_,Blob_Info_Q174);\r#else\nBlob_Info_Q174=vec4(0,0,0,0);\r#endif\nfloat Out_Q255;\rRemap_Range_B255(0.0,1.0,0.0,1.0,X_Q248,Out_Q255);\rfloat X_Q236;\rfloat Y_Q236;\rfloat Z_Q236;\rTo_XYZ_B228(Nrm_World_Q182,X_Q236,Y_Q236,Z_Q236);\rvec4 Color_At_T_Q247=mix(Linear_Q251,Linear_Q252,Out_Q255);\rfloat Minus_F_Q237=-Z_Q236;\rfloat R_Q249;\rfloat G_Q249;\rfloat B_Q249;\rfloat A_Q249;\rR_Q249=Color_At_T_Q247.r; G_Q249=Color_At_T_Q247.g; B_Q249=Color_At_T_Q247.b; A_Q249=Color_At_T_Q247.a;\rfloat ClampF_Q238=clamp(0.0,Minus_F_Q237,1.0);\rfloat Result_Q243;\rConditional_Float_B243(_Decal_Front_Only_,ClampF_Q238,1.0,Result_Q243);\rvec4 Vec4_Q239=vec4(Result_Q243,Radial_Gradient_Q280,G_Q249,B_Q249);\rvec3 Position=Pos_World_Q162;\rvec3 Normal=Nrm_World_Q182;\rvec2 UV=XY_Q235;\rvec3 Tangent=Tangent_World_N_Q177;\rvec3 Binormal=Difference_Q211;\rvec4 Color=Out_Color_Q184;\rvec4 Extra1=Vec4_Q239;\rvec4 Extra2=Blob_Info_Q173;\rvec4 Extra3=Blob_Info_Q174;\rgl_Position=viewProjection*vec4(Position,1);\rvPosition=Position;\rvNormal=Normal;\rvUV=UV;\rvTangent=Tangent;\rvBinormal=Binormal;\rvColor=Color;\rvExtra1=Extra1;\rvExtra2=Extra2;\rvExtra3=Extra3;\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlSliderThumbVertexShader = { name, shader };\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { SerializationHelper, serialize } from \"core/Misc/decorators\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Vector2, Vector3, Vector4 } from \"core/Maths/math.vector\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { Color4 } from \"core/Maths/math.color\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { Constants } from \"core/Engines/constants\";\r\n\r\nimport \"./shaders/mrdlSliderThumb.fragment\";\r\nimport \"./shaders/mrdlSliderThumb.vertex\";\r\n\r\n/** @internal */\r\nclass MRDLSliderThumbMaterialDefines extends MaterialDefines {\r\n    /*\r\n        \"SKY_ENABLED\", \"BLOB_ENABLE_2\", \"IRIDESCENCE_ENABLED\"\r\n    */\r\n    public SKY_ENABLED = true;\r\n    public BLOB_ENABLE_2 = true;\r\n    public IRIDESCENCE_ENABLED = true;\r\n\r\n    constructor() {\r\n        super();\r\n        this._needNormals = true;\r\n        this._needUVs = true;\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render Slider Thumb material with MRDL\r\n */\r\nexport class MRDLSliderThumbMaterial extends PushMaterial {\r\n    /**\r\n     * URL pointing to the texture used to define the coloring for the Iridescent Map effect.\r\n     */\r\n    public static BLUE_GRADIENT_TEXTURE_URL = \"https://assets.babylonjs.com/meshes/MRTK/MRDL/mrtk-mrdl-blue-gradient.png\";\r\n    private _blueGradientTexture: Texture;\r\n    private _decalTexture: Texture;\r\n    private _reflectionMapTexture: Texture;\r\n    private _indirectEnvTexture: Texture;\r\n\r\n    /**\r\n     * Gets or sets the corner Radius on the slider thumb.\r\n     */\r\n    @serialize()\r\n    public radius = 0.157;\r\n\r\n    /**\r\n     * Gets or sets the Bevel Front on the slider thumb.\r\n     */\r\n    @serialize()\r\n    public bevelFront = 0.065;\r\n\r\n    /**\r\n     * Gets or sets the Bevel Front Stretch on the slider thumb.\r\n     */\r\n    @serialize()\r\n    public bevelFrontStretch = 0.077;\r\n\r\n    /**\r\n     * Gets or sets the Bevel Back on the slider thumb.\r\n     */\r\n    @serialize()\r\n    public bevelBack = 0.031;\r\n\r\n    /**\r\n     * Gets or sets the Bevel Back Stretch on the slider thumb.\r\n     */\r\n    @serialize()\r\n    public bevelBackStretch = 0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusTopLeft = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusTopRight = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusBottomLeft = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusBottomRight = 1.0;\r\n\r\n    /**\r\n     * Gets or sets whether Bulge is enabled.\r\n     * Default is false.\r\n     */\r\n    @serialize()\r\n    public bulgeEnabled = false;\r\n\r\n    /**\r\n     * Gets or sets the Bulge Height.\r\n     */\r\n    @serialize()\r\n    public bulgeHeight = -0.323;\r\n\r\n    /**\r\n     * Gets or sets the Bulge Radius.\r\n     */\r\n    @serialize()\r\n    public bulgeRadius = 0.73;\r\n\r\n    /**\r\n     * Gets or sets the Sun Intensity.\r\n     */\r\n    @serialize()\r\n    public sunIntensity = 2;\r\n\r\n    /**\r\n     * Gets or sets the Sun Theta.\r\n     */\r\n    @serialize()\r\n    public sunTheta = 0.937;\r\n\r\n    /**\r\n     * Gets or sets the Sun Phi.\r\n     */\r\n    @serialize()\r\n    public sunPhi = 0.555;\r\n\r\n    /**\r\n     * Gets or sets the Indirect Diffuse.\r\n     */\r\n    @serialize()\r\n    public indirectDiffuse = 1;\r\n\r\n    /**\r\n     * Gets or sets the base albedo.\r\n     */\r\n    @serialize()\r\n    public albedo = new Color4(0.0117647, 0.505882, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the Specular value.\r\n     */\r\n    @serialize()\r\n    public specular = 0;\r\n\r\n    /**\r\n     * Gets or sets the Shininess value.\r\n     */\r\n    @serialize()\r\n    public shininess = 10;\r\n\r\n    /**\r\n     * Gets or sets the Sharpness value.\r\n     */\r\n    @serialize()\r\n    public sharpness = 0;\r\n\r\n    /**\r\n     * Gets or sets the Subsurface value.\r\n     */\r\n    @serialize()\r\n    public subsurface = 0.31;\r\n\r\n    /**\r\n     * Gets or sets the left gradient color.\r\n     */\r\n    @serialize()\r\n    public leftGradientColor = new Color4(0.0117647, 0.505882, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the right gradient color.\r\n     */\r\n    @serialize()\r\n    public rightGradientColor = new Color4(0.0117647, 0.505882, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the reflection value.\r\n     */\r\n    @serialize()\r\n    public reflection = 0.749;\r\n\r\n    /**\r\n     * Gets or sets the front reflect value.\r\n     */\r\n    @serialize()\r\n    public frontReflect = 0;\r\n\r\n    /**\r\n     * Gets or sets the edge reflect value.\r\n     */\r\n    @serialize()\r\n    public edgeReflect = 0.09;\r\n\r\n    /**\r\n     * Gets or sets the power value.\r\n     */\r\n    @serialize()\r\n    public power = 8.1;\r\n\r\n    /**\r\n     * Gets or sets the sky color.\r\n     */\r\n    @serialize()\r\n    public skyColor = new Color4(0.0117647, 0.960784, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the horizon color.\r\n     */\r\n    @serialize()\r\n    public horizonColor = new Color4(0.0117647, 0.333333, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the ground color.\r\n     */\r\n    @serialize()\r\n    public groundColor = new Color4(0, 0.254902, 0.996078, 1);\r\n\r\n    /**\r\n     * Gets or sets the horizon power value.\r\n     */\r\n    @serialize()\r\n    public horizonPower = 1;\r\n\r\n    /**\r\n     * Gets or sets the finger occlusion width value.\r\n     */\r\n    @serialize()\r\n    public width = 0.02;\r\n\r\n    /**\r\n     * Gets or sets the finger occlusion fuzz value.\r\n     */\r\n    @serialize()\r\n    public fuzz = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the minimum finger occlusion fuzz value.\r\n     */\r\n    @serialize()\r\n    public minFuzz = 0.001;\r\n\r\n    /**\r\n     * Gets or sets the finger occlusion clip fade value.\r\n     */\r\n    @serialize()\r\n    public clipFade = 0.01;\r\n\r\n    /**\r\n     * Gets or sets the hue shift value.\r\n     */\r\n    @serialize()\r\n    public hueShift = 0;\r\n\r\n    /**\r\n     * Gets or sets the saturation shift value.\r\n     */\r\n    @serialize()\r\n    public saturationShift = 0;\r\n\r\n    /**\r\n     * Gets or sets the value shift.\r\n     */\r\n    @serialize()\r\n    public valueShift = 0;\r\n\r\n    /**\r\n     * Gets or sets the position of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobPosition = new Vector3(0, 0, 0.1);\r\n\r\n    /**\r\n     * Gets or sets the intensity of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the near size of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobNearSize = 0.01;\r\n\r\n    /**\r\n     * Gets or sets the far size of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobFarSize = 0.03;\r\n\r\n    /**\r\n     * Gets or sets the distance considered \"near\" to the mesh, which controls the size of the hover glow effect (see blobNearSize).\r\n     */\r\n    @serialize()\r\n    public blobNearDistance = 0;\r\n\r\n    /**\r\n     * Gets or sets the distance considered \"far\" from the mesh, which controls the size of the hover glow effect (see blobFarSize).\r\n     */\r\n    @serialize()\r\n    public blobFarDistance = 0.08;\r\n\r\n    /**\r\n     * Gets or sets the length of the hover glow effect fade.\r\n     */\r\n    @serialize()\r\n    public blobFadeLength = 0.576;\r\n\r\n    /**\r\n     * Gets or sets the progress of the hover glow effect selection animation corresponding to the left pointer (0.0 - 1.0).\r\n     */\r\n    @serialize()\r\n    public blobPulse = 0;\r\n\r\n    /**\r\n     * Gets or sets the opacity of the hover glow effect corresponding to the left pointer (0.0 - 1.0). Default is 0.\r\n     */\r\n    @serialize()\r\n    public blobFade = 1;\r\n\r\n    /**\r\n     * Gets or sets the position of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobPosition2 = new Vector3(0.2, 0, 0.1);\r\n\r\n    /**\r\n     * Gets or sets the size of the hover glow effect when the right pointer is considered \"near\" to the mesh (see blobNearDistance).\r\n     */\r\n    @serialize()\r\n    public blobNearSize2 = 0.01;\r\n\r\n    /**\r\n     * Gets or sets the progress of the hover glow effect selection animation corresponding to the right pointer (0.0 - 1.0).\r\n     */\r\n    @serialize()\r\n    public blobPulse2 = 0;\r\n\r\n    /**\r\n     * Gets or sets the opacity of the hover glow effect corresponding to the right pointer (0.0 - 1.0). Default is 1.\r\n     */\r\n    @serialize()\r\n    public blobFade2 = 1;\r\n\r\n    /**\r\n     * Gets or sets the texture of the hover glow effect.\r\n     */\r\n    @serialize()\r\n    public blobTexture = new Texture(\"\", this.getScene());\r\n\r\n    /**\r\n     * Gets or sets the finger position for left index.\r\n     */\r\n    @serialize()\r\n    public leftIndexPosition = new Vector3(0, 0, 1);\r\n\r\n    /**\r\n     * Gets or sets the finger position for right index.\r\n     */\r\n    @serialize()\r\n    public rightIndexPosition = new Vector3(-1, -1, -1);\r\n\r\n    /**\r\n     * Gets or sets the finger position for left index middle position.\r\n     */\r\n    @serialize()\r\n    public leftIndexMiddlePosition = new Vector3(0, 0, 0);\r\n\r\n    /**\r\n     * Gets or sets the finger position for right index middle position.\r\n     */\r\n    @serialize()\r\n    public rightIndexMiddlePosition = new Vector3(0, 0, 0);\r\n\r\n    /**\r\n     * Gets or sets the Decal Scale for XY.\r\n     */\r\n    @serialize()\r\n    public decalScaleXY = new Vector2(1.5, 1.5);\r\n\r\n    /**\r\n     * Gets or sets decalFrontOnly\r\n     * Default is true\r\n     */\r\n    @serialize()\r\n    public decalFrontOnly = true;\r\n\r\n    /**\r\n     * Gets or sets the Rim Light intensity.\r\n     */\r\n    @serialize()\r\n    public rimIntensity = 0.287;\r\n\r\n    /**\r\n     * Gets or sets the Rim Light hue shift value.\r\n     */\r\n    @serialize()\r\n    public rimHueShift = 0;\r\n\r\n    /**\r\n     * Gets or sets the Rim Light saturation shift value.\r\n     */\r\n    @serialize()\r\n    public rimSaturationShift = 0;\r\n\r\n    /**\r\n     * Gets or sets the Rim Light value shift.\r\n     */\r\n    @serialize()\r\n    public rimValueShift = -1;\r\n\r\n    /**\r\n     * Gets or sets the intensity of the iridescence effect.\r\n     */\r\n    @serialize()\r\n    public iridescenceIntensity = 0;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public useGlobalLeftIndex = 1.0;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public useGlobalRightIndex = 1.0;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalLeftIndexTipProximity = 0.0;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalRightIndexTipProximity = 0.0;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalLeftIndexTipPosition = new Vector4(0.5, 0.0, -0.55, 1.0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globaRightIndexTipPosition = new Vector4(0.0, 0.0, 0.0, 1.0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalLeftThumbTipPosition = new Vector4(0.5, 0.0, -0.55, 1.0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalRightThumbTipPosition = new Vector4(0.0, 0.0, 0.0, 1.0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalLeftIndexMiddlePosition = new Vector4(0.5, 0.0, -0.55, 1.0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public globalRightIndexMiddlePosition = new Vector4(0.0, 0.0, 0.0, 1.0);\r\n\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n        this.alphaMode = Constants.ALPHA_DISABLE;\r\n        this.backFaceCulling = false;\r\n        this._blueGradientTexture = new Texture(MRDLSliderThumbMaterial.BLUE_GRADIENT_TEXTURE_URL, scene, true, false, Texture.NEAREST_SAMPLINGMODE);\r\n        this._decalTexture = new Texture(\"\", this.getScene());\r\n        this._reflectionMapTexture = new Texture(\"\", this.getScene());\r\n        this._indirectEnvTexture = new Texture(\"\", this.getScene());\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new MRDLSliderThumbMaterialDefines();\r\n        }\r\n\r\n        const defines = <MRDLSliderThumbMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, false);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (defines.TANGENT) {\r\n                attribs.push(VertexBuffer.TangentKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"mrdlSliderThumb\";\r\n            const join = defines.toString();\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"viewProjection\",\r\n                \"cameraPosition\",\r\n                \"_Radius_\",\r\n                \"_Bevel_Front_\",\r\n                \"_Bevel_Front_Stretch_\",\r\n                \"_Bevel_Back_\",\r\n                \"_Bevel_Back_Stretch_\",\r\n                \"_Radius_Top_Left_\",\r\n                \"_Radius_Top_Right_\",\r\n                \"_Radius_Bottom_Left_\",\r\n                \"_Radius_Bottom_Right_\",\r\n                \"_Bulge_Enabled_\",\r\n                \"_Bulge_Height_\",\r\n                \"_Bulge_Radius_\",\r\n                \"_Sun_Intensity_\",\r\n                \"_Sun_Theta_\",\r\n                \"_Sun_Phi_\",\r\n                \"_Indirect_Diffuse_\",\r\n                \"_Albedo_\",\r\n                \"_Specular_\",\r\n                \"_Shininess_\",\r\n                \"_Sharpness_\",\r\n                \"_Subsurface_\",\r\n                \"_Left_Color_\",\r\n                \"_Right_Color_\",\r\n                \"_Reflection_\",\r\n                \"_Front_Reflect_\",\r\n                \"_Edge_Reflect_\",\r\n                \"_Power_\",\r\n                \"_Sky_Color_\",\r\n                \"_Horizon_Color_\",\r\n                \"_Ground_Color_\",\r\n                \"_Horizon_Power_\",\r\n                \"_Reflection_Map_\",\r\n                \"_Indirect_Environment_\",\r\n                \"_Width_\",\r\n                \"_Fuzz_\",\r\n                \"_Min_Fuzz_\",\r\n                \"_Clip_Fade_\",\r\n                \"_Hue_Shift_\",\r\n                \"_Saturation_Shift_\",\r\n                \"_Value_Shift_\",\r\n                \"_Blob_Position_\",\r\n                \"_Blob_Intensity_\",\r\n                \"_Blob_Near_Size_\",\r\n                \"_Blob_Far_Size_\",\r\n                \"_Blob_Near_Distance_\",\r\n                \"_Blob_Far_Distance_\",\r\n                \"_Blob_Fade_Length_\",\r\n                \"_Blob_Pulse_\",\r\n                \"_Blob_Fade_\",\r\n                \"_Blob_Texture_\",\r\n                \"_Blob_Position_2_\",\r\n                \"_Blob_Near_Size_2_\",\r\n                \"_Blob_Pulse_2_\",\r\n                \"_Blob_Fade_2_\",\r\n                \"_Left_Index_Pos_\",\r\n                \"_Right_Index_Pos_\",\r\n                \"_Left_Index_Middle_Pos_\",\r\n                \"_Right_Index_Middle_Pos_\",\r\n                \"_Decal_\",\r\n                \"_Decal_Scale_XY_\",\r\n                \"_Decal_Front_Only_\",\r\n                \"_Rim_Intensity_\",\r\n                \"_Rim_Texture_\",\r\n                \"_Rim_Hue_Shift_\",\r\n                \"_Rim_Saturation_Shift_\",\r\n                \"_Rim_Value_Shift_\",\r\n                \"_Iridescence_Intensity_\",\r\n                \"_Iridescence_Texture_\",\r\n                \"Use_Global_Left_Index\",\r\n                \"Use_Global_Right_Index\",\r\n                \"Global_Left_Index_Tip_Position\",\r\n                \"Global_Right_Index_Tip_Position\",\r\n                \"Global_Left_Thumb_Tip_Position\",\r\n                \"Global_Right_Thumb_Tip_Position\",\r\n                \"Global_Left_Index_Middle_Position;\",\r\n                \"Global_Right_Index_Middle_Position\",\r\n                \"Global_Left_Index_Tip_Proximity\",\r\n                \"Global_Right_Index_Tip_Proximity\",\r\n            ];\r\n            const samplers: string[] = [\"_Rim_Texture_\", \"_Iridescence_Texture_\"];\r\n            const uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: 4 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const defines = <MRDLSliderThumbMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", this.getScene().getTransformMatrix());\r\n        this._activeEffect.setVector3(\"cameraPosition\", this.getScene().activeCamera!.position);\r\n\r\n        // \"Round Rect\"\r\n        this._activeEffect.setFloat(\"_Radius_\", this.radius);\r\n        this._activeEffect.setFloat(\"_Bevel_Front_\", this.bevelFront);\r\n        this._activeEffect.setFloat(\"_Bevel_Front_Stretch_\", this.bevelFrontStretch);\r\n        this._activeEffect.setFloat(\"_Bevel_Back_\", this.bevelBack);\r\n        this._activeEffect.setFloat(\"_Bevel_Back_Stretch_\", this.bevelBackStretch);\r\n\r\n        // \"Radii Multipliers\"\r\n        this._activeEffect.setFloat(\"_Radius_Top_Left_\", this.radiusTopLeft);\r\n        this._activeEffect.setFloat(\"_Radius_Top_Right_\", this.radiusTopRight);\r\n        this._activeEffect.setFloat(\"_Radius_Bottom_Left_\", this.radiusBottomLeft);\r\n        this._activeEffect.setFloat(\"_Radius_Bottom_Right_\", this.radiusBottomRight);\r\n\r\n        // \"Bulge\"\r\n        this._activeEffect.setFloat(\"_Bulge_Enabled_\", this.bulgeEnabled ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Bulge_Height_\", this.bulgeHeight);\r\n        this._activeEffect.setFloat(\"_Bulge_Radius_\", this.bulgeRadius);\r\n\r\n        // \"Sun\"\r\n        this._activeEffect.setFloat(\"_Sun_Intensity_\", this.sunIntensity);\r\n        this._activeEffect.setFloat(\"_Sun_Theta_\", this.sunTheta);\r\n        this._activeEffect.setFloat(\"_Sun_Phi_\", this.sunPhi);\r\n        this._activeEffect.setFloat(\"_Indirect_Diffuse_\", this.indirectDiffuse);\r\n\r\n        // \"Diffuse And Specular\"\r\n        this._activeEffect.setDirectColor4(\"_Albedo_\", this.albedo);\r\n        this._activeEffect.setFloat(\"_Specular_\", this.specular);\r\n        this._activeEffect.setFloat(\"_Shininess_\", this.shininess);\r\n        this._activeEffect.setFloat(\"_Sharpness_\", this.sharpness);\r\n        this._activeEffect.setFloat(\"_Subsurface_\", this.subsurface);\r\n\r\n        // \"Gradient\"\r\n        this._activeEffect.setDirectColor4(\"_Left_Color_\", this.leftGradientColor);\r\n        this._activeEffect.setDirectColor4(\"_Right_Color_\", this.rightGradientColor);\r\n\r\n        // \"Reflection\"\r\n        this._activeEffect.setFloat(\"_Reflection_\", this.reflection);\r\n        this._activeEffect.setFloat(\"_Front_Reflect_\", this.frontReflect);\r\n        this._activeEffect.setFloat(\"_Edge_Reflect_\", this.edgeReflect);\r\n        this._activeEffect.setFloat(\"_Power_\", this.power);\r\n\r\n        // \"Sky Environment\"\r\n        //define SKY_ENABLED true;\r\n        this._activeEffect.setDirectColor4(\"_Sky_Color_\", this.skyColor);\r\n        this._activeEffect.setDirectColor4(\"_Horizon_Color_\", this.horizonColor);\r\n        this._activeEffect.setDirectColor4(\"_Ground_Color_\", this.groundColor);\r\n        this._activeEffect.setFloat(\"_Horizon_Power_\", this.horizonPower);\r\n\r\n        // \"Mapped Environment\"\r\n        //define ENV_ENABLE false;\r\n        this._activeEffect.setTexture(\"_Reflection_Map_\", this._reflectionMapTexture);\r\n        this._activeEffect.setTexture(\"_Indirect_Environment_\", this._indirectEnvTexture);\r\n\r\n        // \"FingerOcclusion\"\r\n        //define OCCLUSION_ENABLED false;\r\n        this._activeEffect.setFloat(\"_Width_\", this.width);\r\n        this._activeEffect.setFloat(\"_Fuzz_\", this.fuzz);\r\n        this._activeEffect.setFloat(\"_Min_Fuzz_\", this.minFuzz);\r\n        this._activeEffect.setFloat(\"_Clip_Fade_\", this.clipFade);\r\n\r\n        // \"View Based Color Shift\"\r\n        this._activeEffect.setFloat(\"_Hue_Shift_\", this.hueShift);\r\n        this._activeEffect.setFloat(\"_Saturation_Shift_\", this.saturationShift);\r\n        this._activeEffect.setFloat(\"_Value_Shift_\", this.valueShift);\r\n\r\n        // \"Blob\"\r\n        //define BLOB_ENABLE false;\r\n        this._activeEffect.setVector3(\"_Blob_Position_\", this.blobPosition);\r\n        this._activeEffect.setFloat(\"_Blob_Intensity_\", this.blobIntensity);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_\", this.blobNearSize);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Size_\", this.blobFarSize);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Distance_\", this.blobNearDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Distance_\", this.blobFarDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_Length_\", this.blobFadeLength);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_\", this.blobPulse);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_\", this.blobFade);\r\n\r\n        // \"Blob Texture\"\r\n        this._activeEffect.setTexture(\"_Blob_Texture_\", this.blobTexture);\r\n\r\n        // \"Blob 2\"\r\n        //define BLOB_ENABLE_2 true;\r\n        this._activeEffect.setVector3(\"_Blob_Position_2_\", this.blobPosition2);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_2_\", this.blobNearSize2);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_2_\", this.blobPulse2);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_2_\", this.blobFade2);\r\n\r\n        // \"Finger Positions\"\r\n        this._activeEffect.setVector3(\"_Left_Index_Pos_\", this.leftIndexPosition);\r\n        this._activeEffect.setVector3(\"_Right_Index_Pos_\", this.rightIndexPosition);\r\n        this._activeEffect.setVector3(\"_Left_Index_Middle_Pos_\", this.leftIndexMiddlePosition);\r\n        this._activeEffect.setVector3(\"_Right_Index_Middle_Pos_\", this.rightIndexMiddlePosition);\r\n\r\n        // \"Decal Texture\"\r\n        //define DECAL_ENABLE false;\r\n        this._activeEffect.setTexture(\"_Decal_\", this._decalTexture);\r\n        this._activeEffect.setVector2(\"_Decal_Scale_XY_\", this.decalScaleXY);\r\n        this._activeEffect.setFloat(\"_Decal_Front_Only_\", this.decalFrontOnly ? 1.0 : 0.0);\r\n\r\n        // \"Rim Light\"\r\n        this._activeEffect.setFloat(\"_Rim_Intensity_\", this.rimIntensity);\r\n        this._activeEffect.setTexture(\"_Rim_Texture_\", this._blueGradientTexture);\r\n        this._activeEffect.setFloat(\"_Rim_Hue_Shift_\", this.rimHueShift);\r\n        this._activeEffect.setFloat(\"_Rim_Saturation_Shift_\", this.rimSaturationShift);\r\n        this._activeEffect.setFloat(\"_Rim_Value_Shift_\", this.rimValueShift);\r\n\r\n        // \"Iridescence\"\r\n        //define IRIDESCENCE_ENABLED true;\r\n        this._activeEffect.setFloat(\"_Iridescence_Intensity_\", this.iridescenceIntensity);\r\n        this._activeEffect.setTexture(\"_Iridescence_Texture_\", this._blueGradientTexture);\r\n\r\n        // Global inputs\r\n        this._activeEffect.setFloat(\"Use_Global_Left_Index\", this.useGlobalLeftIndex);\r\n        this._activeEffect.setFloat(\"Use_Global_Right_Index\", this.useGlobalRightIndex);\r\n\r\n        this._activeEffect.setVector4(\"Global_Left_Index_Tip_Position\", this.globalLeftIndexTipPosition);\r\n        this._activeEffect.setVector4(\"Global_Right_Index_Tip_Position\", this.globaRightIndexTipPosition);\r\n\r\n        this._activeEffect.setVector4(\"Global_Left_Thumb_Tip_Position\", this.globalLeftThumbTipPosition);\r\n        this._activeEffect.setVector4(\"Global_Right_Thumb_Tip_Position\", this.globalRightThumbTipPosition);\r\n\r\n        this._activeEffect.setVector4(\"Global_Left_Index_Middle_Position\", this.globalLeftIndexMiddlePosition);\r\n        this._activeEffect.setVector4(\"Global_Right_Index_Middle_Position\", this.globalRightIndexMiddlePosition);\r\n\r\n        this._activeEffect.setFloat(\"Global_Left_Index_Tip_Proximity\", this.globalLeftIndexTipProximity);\r\n        this._activeEffect.setFloat(\"Global_Right_Index_Tip_Proximity\", this.globalRightIndexTipProximity);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    /**\r\n     * Get the list of animatables in the material.\r\n     * @returns the list of animatables object used in the material\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n        this._reflectionMapTexture.dispose();\r\n        this._indirectEnvTexture.dispose();\r\n        this._blueGradientTexture.dispose();\r\n        this._decalTexture.dispose();\r\n    }\r\n\r\n    public clone(name: string): MRDLSliderThumbMaterial {\r\n        return SerializationHelper.Clone(() => new MRDLSliderThumbMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.MRDLSliderThumbMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"MRDLSliderThumbMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): MRDLSliderThumbMaterial {\r\n        return SerializationHelper.Parse(() => new MRDLSliderThumbMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.MRDLSliderThumbMaterial\", MRDLSliderThumbMaterial);\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"mrdlBackplatePixelShader\";\nconst shader = `uniform vec3 cameraPosition;\rvarying vec3 vPosition;\rvarying vec3 vNormal;\rvarying vec2 vUV;\rvarying vec3 vTangent;\rvarying vec3 vBinormal;\rvarying vec4 vExtra1;\rvarying vec4 vExtra2;\runiform float _Radius_;\runiform float _Line_Width_;\runiform bool _Absolute_Sizes_;\runiform float _Filter_Width_;\runiform vec4 _Base_Color_;\runiform vec4 _Line_Color_;\runiform float _Radius_Top_Left_;\runiform float _Radius_Top_Right_;\runiform float _Radius_Bottom_Left_;\runiform float _Radius_Bottom_Right_;\runiform float _Rate_;\runiform vec4 _Highlight_Color_;\runiform float _Highlight_Width_;\runiform vec4 _Highlight_Transform_;\runiform float _Highlight_;\runiform float _Iridescence_Intensity_;\runiform float _Iridescence_Edge_Intensity_;\runiform vec4 _Iridescence_Tint_;\runiform sampler2D _Iridescent_Map_;\runiform float _Angle_;\runiform bool _Reflected_;\runiform float _Frequency_;\runiform float _Vertical_Offset_;\runiform vec4 _Gradient_Color_;\runiform vec4 _Top_Left_;\runiform vec4 _Top_Right_;\runiform vec4 _Bottom_Left_;\runiform vec4 _Bottom_Right_;\runiform float _Edge_Width_;\runiform float _Edge_Power_;\runiform float _Line_Gradient_Blend_;\runiform float _Fade_Out_;\rvoid FastLinearTosRGB_B353(\rvec4 Linear,\rout vec4 sRGB)\r{\rsRGB.rgb=sqrt(clamp(Linear.rgb,0.0,1.0));\rsRGB.a=Linear.a;\r}\rvoid Round_Rect_Fragment_B332(\rfloat Radius,\rfloat Line_Width,\rvec4 Line_Color,\rfloat Filter_Width,\rvec2 UV,\rfloat Line_Visibility,\rvec4 Rect_Parms,\rvec4 Fill_Color,\rout vec4 Color)\r{\rfloat d=length(max(abs(UV)-Rect_Parms.xy,0.0));\rfloat dx=max(fwidth(d)*Filter_Width,0.00001);\rfloat g=min(Rect_Parms.z,Rect_Parms.w);\rfloat dgrad=max(fwidth(g)*Filter_Width,0.00001);\rfloat Inside_Rect=clamp(g/dgrad,0.0,1.0);\rfloat inner=clamp((d+dx*0.5-max(Radius-Line_Width,d-dx*0.5))/dx,0.0,1.0);\rColor=clamp(mix(Fill_Color,Line_Color,inner),0.0,1.0)*Inside_Rect;\r}\rvoid Iridescence_B343(\rvec3 Position,\rvec3 Normal,\rvec2 UV,\rvec3 Axis,\rvec3 Eye,\rvec4 Tint,\rsampler2D Texture,\rbool Reflected,\rfloat Frequency,\rfloat Vertical_Offset,\rout vec4 Color)\r{\rvec3 i=normalize(Position-Eye);\rvec3 r=reflect(i,Normal);\rfloat idota=dot(i,Axis);\rfloat idotr=dot(i,r);\rfloat x=Reflected ? idotr : idota;\rvec2 xy;\rxy.x=fract((x*Frequency+1.0)*0.5+UV.y*Vertical_Offset);\rxy.y=0.5;\rColor=texture(Texture,xy);\rColor.rgb*=Tint.rgb;\r}\rvoid Scale_RGB_B346(\rvec4 Color,\rfloat Scalar,\rout vec4 Result)\r{\rResult=vec4(Scalar,Scalar,Scalar,1)*Color;\r}\rvoid Scale_RGB_B344(\rfloat Scalar,\rvec4 Color,\rout vec4 Result)\r{\rResult=vec4(Scalar,Scalar,Scalar,1)*Color;\r}\rvoid Line_Fragment_B362(\rvec4 Base_Color,\rvec4 Highlight_Color,\rfloat Highlight_Width,\rvec3 Line_Vertex,\rfloat Highlight,\rout vec4 Line_Color)\r{\rfloat k2=1.0-clamp(abs(Line_Vertex.y/Highlight_Width),0.0,1.0);\rLine_Color=mix(Base_Color,Highlight_Color,Highlight*k2);\r}\rvoid Edge_B356(\rvec4 RectParms,\rfloat Radius,\rfloat Line_Width,\rvec2 UV,\rfloat Edge_Width,\rfloat Edge_Power,\rout float Result)\r{\rfloat d=length(max(abs(UV)-RectParms.xy,0.0));\rfloat edge=1.0-clamp((1.0-d/(Radius-Line_Width))/Edge_Width,0.0,1.0);\rResult=pow(edge,Edge_Power);\r}\rvoid Gradient_B355(\rvec4 Gradient_Color,\rvec4 Top_Left,\rvec4 Top_Right,\rvec4 Bottom_Left,\rvec4 Bottom_Right,\rvec2 UV,\rout vec4 Result)\r{\rvec3 top=Top_Left.rgb+(Top_Right.rgb-Top_Left.rgb)*UV.x;\rvec3 bottom=Bottom_Left.rgb+(Bottom_Right.rgb-Bottom_Left.rgb)*UV.x;\rResult.rgb=Gradient_Color.rgb*(bottom+(top-bottom)*UV.y);\rResult.a=1.0;\r}\rvoid main()\r{\rfloat X_Q338;\rfloat Y_Q338;\rfloat Z_Q338;\rfloat W_Q338;\rX_Q338=vExtra2.x;\rY_Q338=vExtra2.y;\rZ_Q338=vExtra2.z;\rW_Q338=vExtra2.w;\rvec4 Color_Q343;\r#if IRIDESCENCE_ENABLE\nIridescence_B343(vPosition,vNormal,vUV,vBinormal,cameraPosition,_Iridescence_Tint_,_Iridescent_Map_,_Reflected_,_Frequency_,_Vertical_Offset_,Color_Q343);\r#else\nColor_Q343=vec4(0,0,0,0);\r#endif\nvec4 Result_Q344;\rScale_RGB_B344(_Iridescence_Intensity_,Color_Q343,Result_Q344);\rvec4 Line_Color_Q362;\rLine_Fragment_B362(_Line_Color_,_Highlight_Color_,_Highlight_Width_,vTangent,_Highlight_,Line_Color_Q362);\rfloat Result_Q356;\r#if EDGE_ONLY\nEdge_B356(vExtra1,Z_Q338,W_Q338,vUV,_Edge_Width_,_Edge_Power_,Result_Q356);\r#else\nResult_Q356=1.0;\r#endif\nvec2 Vec2_Q339=vec2(X_Q338,Y_Q338);\rvec4 Result_Q355;\rGradient_B355(_Gradient_Color_,_Top_Left_,_Top_Right_,_Bottom_Left_,_Bottom_Right_,Vec2_Q339,Result_Q355);\rvec4 Linear_Q348;\rLinear_Q348.rgb=clamp(Result_Q355.rgb*Result_Q355.rgb,0.0,1.0);\rLinear_Q348.a=Result_Q355.a;\rvec4 Result_Q346;\rScale_RGB_B346(Linear_Q348,Result_Q356,Result_Q346);\rvec4 Sum_Q345=Result_Q346+Result_Q344;\rvec4 Color_At_T_Q347=mix(Line_Color_Q362,Result_Q346,_Line_Gradient_Blend_);\rvec4 Base_And_Iridescent_Q350;\rBase_And_Iridescent_Q350=_Base_Color_+vec4(Sum_Q345.rgb,0.0);\rvec4 Sum_Q349=Color_At_T_Q347+_Iridescence_Edge_Intensity_*Color_Q343;\rvec4 Result_Q351=Sum_Q349; Result_Q351.a=1.0;\rvec4 Color_Q332;\rRound_Rect_Fragment_B332(Z_Q338,W_Q338,Result_Q351,_Filter_Width_,vUV,1.0,vExtra1,Base_And_Iridescent_Q350,Color_Q332);\rvec4 Result_Q354=_Fade_Out_*Color_Q332;\rvec4 sRGB_Q353;\rFastLinearTosRGB_B353(Result_Q354,sRGB_Q353);\rvec4 Out_Color=sRGB_Q353;\rfloat Clip_Threshold=0.001;\rbool To_sRGB=false;\rgl_FragColor=Out_Color;\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlBackplatePixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"mrdlBackplateVertexShader\";\nconst shader = `uniform mat4 world;\runiform mat4 viewProjection;\runiform vec3 cameraPosition;\rattribute vec3 position;\rattribute vec3 normal;\rattribute vec3 tangent;\runiform float _Radius_;\runiform float _Line_Width_;\runiform bool _Absolute_Sizes_;\runiform float _Filter_Width_;\runiform vec4 _Base_Color_;\runiform vec4 _Line_Color_;\runiform float _Radius_Top_Left_;\runiform float _Radius_Top_Right_;\runiform float _Radius_Bottom_Left_;\runiform float _Radius_Bottom_Right_;\runiform float _Rate_;\runiform vec4 _Highlight_Color_;\runiform float _Highlight_Width_;\runiform vec4 _Highlight_Transform_;\runiform float _Highlight_;\runiform float _Iridescence_Intensity_;\runiform float _Iridescence_Edge_Intensity_;\runiform vec4 _Iridescence_Tint_;\runiform sampler2D _Iridescent_Map_;\runiform float _Angle_;\runiform bool _Reflected_;\runiform float _Frequency_;\runiform float _Vertical_Offset_;\runiform vec4 _Gradient_Color_;\runiform vec4 _Top_Left_;\runiform vec4 _Top_Right_;\runiform vec4 _Bottom_Left_;\runiform vec4 _Bottom_Right_;\runiform float _Edge_Width_;\runiform float _Edge_Power_;\runiform float _Line_Gradient_Blend_;\runiform float _Fade_Out_;\rvarying vec3 vPosition;\rvarying vec3 vNormal;\rvarying vec2 vUV;\rvarying vec3 vTangent;\rvarying vec3 vBinormal;\rvarying vec4 vExtra1;\rvarying vec4 vExtra2;\rvoid Object_To_World_Pos_B314(\rvec3 Pos_Object,\rout vec3 Pos_World)\r{\rPos_World=(world*vec4(Pos_Object,1.0)).xyz;\r}\rvoid Round_Rect_Vertex_B357(\rvec2 UV,\rfloat Radius,\rfloat Margin,\rfloat Anisotropy,\rfloat Gradient1,\rfloat Gradient2,\rvec3 Normal,\rvec4 Color_Scale_Translate,\rout vec2 Rect_UV,\rout vec4 Rect_Parms,\rout vec2 Scale_XY,\rout vec2 Line_UV,\rout vec2 Color_UV_Info)\r{\rScale_XY=vec2(Anisotropy,1.0);\rLine_UV=(UV-vec2(0.5,0.5));\rRect_UV=Line_UV*Scale_XY;\rRect_Parms.xy=Scale_XY*0.5-vec2(Radius,Radius)-vec2(Margin,Margin);\rRect_Parms.z=Gradient1; \rRect_Parms.w=Gradient2;\rColor_UV_Info=(Line_UV+vec2(0.5,0.5))*Color_Scale_Translate.xy+Color_Scale_Translate.zw;\r}\rvoid Line_Vertex_B333(\rvec2 Scale_XY,\rvec2 UV,\rfloat Time,\rfloat Rate,\rvec4 Highlight_Transform,\rout vec3 Line_Vertex)\r{\rfloat angle2=(Rate*Time)*2.0*3.1416;\rfloat sinAngle2=sin(angle2);\rfloat cosAngle2=cos(angle2);\rvec2 xformUV=UV*Highlight_Transform.xy+Highlight_Transform.zw;\rLine_Vertex.x=0.0;\rLine_Vertex.y=cosAngle2*xformUV.x-sinAngle2*xformUV.y;\rLine_Vertex.z=0.0; \r}\rvoid PickDir_B334(\rfloat Degrees,\rvec3 DirX,\rvec3 DirY,\rout vec3 Dir)\r{\rfloat a=Degrees*3.14159/180.0;\rDir=cos(a)*DirX+sin(a)*DirY;\r}\rvoid Move_Verts_B327(\rfloat Anisotropy,\rvec3 P,\rfloat Radius,\rout vec3 New_P,\rout vec2 New_UV,\rout float Radial_Gradient,\rout vec3 Radial_Dir)\r{\rvec2 UV=P.xy*2.0+0.5;\rvec2 center=clamp(UV,0.0,1.0);\rvec2 delta=UV-center;\rvec2 r2=2.0*vec2(Radius/Anisotropy,Radius);\rNew_UV=center+r2*(UV-2.0*center+0.5);\rNew_P=vec3(New_UV-0.5,P.z);\rRadial_Gradient=1.0-length(delta)*2.0;\rRadial_Dir=vec3(delta*r2,0.0);\r}\rvoid Pick_Radius_B336(\rfloat Radius,\rfloat Radius_Top_Left,\rfloat Radius_Top_Right,\rfloat Radius_Bottom_Left,\rfloat Radius_Bottom_Right,\rvec3 Position,\rout float Result)\r{\rbool whichY=Position.y>0.0;\rResult=Position.x<0.0 ? (whichY ? Radius_Top_Left : Radius_Bottom_Left) : (whichY ? Radius_Top_Right : Radius_Bottom_Right);\rResult*=Radius;\r}\rvoid Edge_AA_Vertex_B328(\rvec3 Position_World,\rvec3 Position_Object,\rvec3 Normal_Object,\rvec3 Eye,\rfloat Radial_Gradient,\rvec3 Radial_Dir,\rvec3 Tangent,\rout float Gradient1,\rout float Gradient2)\r{\rvec3 I=(Eye-Position_World);\rvec3 T=(vec4(Tangent,0.0)).xyz;\rfloat g=(dot(T,I)<0.0) ? 0.0 : 1.0;\rif (Normal_Object.z==0.0) { \rGradient1=Position_Object.z>0.0 ? g : 1.0;\rGradient2=Position_Object.z>0.0 ? 1.0 : g;\r} else {\rGradient1=g+(1.0-g)*(Radial_Gradient);\rGradient2=1.0;\r}\r}\rvoid Object_To_World_Dir_B330(\rvec3 Dir_Object,\rout vec3 Binormal_World,\rout vec3 Binormal_World_N,\rout float Binormal_Length)\r{\rBinormal_World=(world*vec4(Dir_Object,0.0)).xyz;\rBinormal_Length=length(Binormal_World);\rBinormal_World_N=Binormal_World/Binormal_Length;\r}\rvoid RelativeOrAbsoluteDetail_B341(\rfloat Nominal_Radius,\rfloat Nominal_LineWidth,\rbool Absolute_Measurements,\rfloat Height,\rout float Radius,\rout float Line_Width)\r{\rfloat scale=Absolute_Measurements ? 1.0/Height : 1.0;\rRadius=Nominal_Radius*scale;\rLine_Width=Nominal_LineWidth*scale;\r}\rvoid main()\r{\rvec3 Nrm_World_Q326;\rNrm_World_Q326=normalize((world*vec4(normal,0.0)).xyz);\rvec3 Tangent_World_Q329;\rvec3 Tangent_World_N_Q329;\rfloat Tangent_Length_Q329;\rTangent_World_Q329=(world*vec4(vec3(1,0,0),0.0)).xyz;\rTangent_Length_Q329=length(Tangent_World_Q329);\rTangent_World_N_Q329=Tangent_World_Q329/Tangent_Length_Q329;\rvec3 Binormal_World_Q330;\rvec3 Binormal_World_N_Q330;\rfloat Binormal_Length_Q330;\rObject_To_World_Dir_B330(vec3(0,1,0),Binormal_World_Q330,Binormal_World_N_Q330,Binormal_Length_Q330);\rfloat Radius_Q341;\rfloat Line_Width_Q341;\rRelativeOrAbsoluteDetail_B341(_Radius_,_Line_Width_,_Absolute_Sizes_,Binormal_Length_Q330,Radius_Q341,Line_Width_Q341);\rvec3 Dir_Q334;\rPickDir_B334(_Angle_,Tangent_World_N_Q329,Binormal_World_N_Q330,Dir_Q334);\rfloat Result_Q336;\rPick_Radius_B336(Radius_Q341,_Radius_Top_Left_,_Radius_Top_Right_,_Radius_Bottom_Left_,_Radius_Bottom_Right_,position,Result_Q336);\rfloat Anisotropy_Q331=Tangent_Length_Q329/Binormal_Length_Q330;\rvec4 Out_Color_Q337=vec4(Result_Q336,Line_Width_Q341,0,1);\rvec3 New_P_Q327;\rvec2 New_UV_Q327;\rfloat Radial_Gradient_Q327;\rvec3 Radial_Dir_Q327;\rMove_Verts_B327(Anisotropy_Q331,position,Result_Q336,New_P_Q327,New_UV_Q327,Radial_Gradient_Q327,Radial_Dir_Q327);\rvec3 Pos_World_Q314;\rObject_To_World_Pos_B314(New_P_Q327,Pos_World_Q314);\rfloat Gradient1_Q328;\rfloat Gradient2_Q328;\r#if SMOOTH_EDGES\nEdge_AA_Vertex_B328(Pos_World_Q314,position,normal,cameraPosition,Radial_Gradient_Q327,Radial_Dir_Q327,tangent,Gradient1_Q328,Gradient2_Q328);\r#else\nGradient1_Q328=1.0;\rGradient2_Q328=1.0;\r#endif\nvec2 Rect_UV_Q357;\rvec4 Rect_Parms_Q357;\rvec2 Scale_XY_Q357;\rvec2 Line_UV_Q357;\rvec2 Color_UV_Info_Q357;\rRound_Rect_Vertex_B357(New_UV_Q327,Result_Q336,0.0,Anisotropy_Q331,Gradient1_Q328,Gradient2_Q328,normal,vec4(1,1,0,0),Rect_UV_Q357,Rect_Parms_Q357,Scale_XY_Q357,Line_UV_Q357,Color_UV_Info_Q357);\rvec3 Line_Vertex_Q333;\rLine_Vertex_B333(Scale_XY_Q357,Line_UV_Q357,(20.0),_Rate_,_Highlight_Transform_,Line_Vertex_Q333);\rfloat X_Q359;\rfloat Y_Q359;\rX_Q359=Color_UV_Info_Q357.x;\rY_Q359=Color_UV_Info_Q357.y;\rvec4 Vec4_Q358=vec4(X_Q359,Y_Q359,Result_Q336,Line_Width_Q341);\rvec3 Position=Pos_World_Q314;\rvec3 Normal=Nrm_World_Q326;\rvec2 UV=Rect_UV_Q357;\rvec3 Tangent=Line_Vertex_Q333;\rvec3 Binormal=Dir_Q334;\rvec4 Color=Out_Color_Q337;\rvec4 Extra1=Rect_Parms_Q357;\rvec4 Extra2=Vec4_Q358;\rvec4 Extra3=vec4(0,0,0,0);\rgl_Position=viewProjection*vec4(Position,1);\rvPosition=Position;\rvNormal=Normal;\rvUV=UV;\rvTangent=Tangent;\rvBinormal=Binormal;\rvExtra1=Extra1;\rvExtra2=Extra2;\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlBackplateVertexShader = { name, shader };\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { SerializationHelper, serialize } from \"core/Misc/decorators\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Vector4 } from \"core/Maths/math.vector\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { Color4 } from \"core/Maths/math.color\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { Constants } from \"core/Engines/constants\";\r\n\r\nimport \"./shaders/mrdlBackplate.fragment\";\r\nimport \"./shaders/mrdlBackplate.vertex\";\r\n\r\n/** @internal */\r\nclass MRDLBackplateMaterialDefines extends MaterialDefines {\r\n    /*\r\n        \"IRIDESCENCE_ENABLE\", \"SMOOTH_EDGES\"\r\n    */\r\n    public IRIDESCENCE_ENABLE = true;\r\n    public SMOOTH_EDGES = true;\r\n\r\n    constructor() {\r\n        super();\r\n        this._needNormals = true;\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render backplate material with MRDL\r\n */\r\nexport class MRDLBackplateMaterial extends PushMaterial {\r\n    /**\r\n     * URL pointing to the texture used to define the coloring for the Iridescent Map effect.\r\n     */\r\n    public static IRIDESCENT_MAP_TEXTURE_URL = \"https://assets.babylonjs.com/meshes/MRTK/MRDL/mrtk-mrdl-backplate-iridescence.png\";\r\n    private _iridescentMapTexture: Texture;\r\n\r\n    /**\r\n     * Gets or sets the corner radius on the backplate. If this value is changed, update the lineWidth to match.\r\n     */\r\n    @serialize()\r\n    public radius = 0.3;\r\n\r\n    /**\r\n     * Gets or sets the line width of the backplate.\r\n     */\r\n    @serialize()\r\n    public lineWidth = 0.003;\r\n\r\n    /**\r\n     * Gets or sets whether to use absolute sizes when calculating effects on the backplate.\r\n     * Since desktop and VR/AR have different relative sizes, it's usually best to keep this false.\r\n     */\r\n    @serialize()\r\n    public absoluteSizes = false;\r\n\r\n    /** @internal */\r\n    public _filterWidth = 1;\r\n\r\n    /**\r\n     * Gets or sets the base color of the backplate.\r\n     */\r\n    @serialize()\r\n    public baseColor = new Color4(0, 0, 0, 1);\r\n\r\n    /**\r\n     * Gets or sets the line color of the backplate.\r\n     */\r\n    @serialize()\r\n    public lineColor = new Color4(0.2, 0.262745, 0.4, 1);\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusTopLeft = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusTopRight = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusBottomLeft = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the top left Radii Multiplier.\r\n     */\r\n    @serialize()\r\n    public radiusBottomRight = 1.0;\r\n\r\n    /** @internal */\r\n    public _rate = 0;\r\n\r\n    /**\r\n     * Gets or sets the color of the highlights on the backplate line.\r\n     */\r\n    @serialize()\r\n    public highlightColor = new Color4(0.239216, 0.435294, 0.827451, 1);\r\n\r\n    /**\r\n     * Gets or sets the width of the highlights on the backplate line.\r\n     */\r\n    @serialize()\r\n    public highlightWidth = 0;\r\n\r\n    /** @internal */\r\n    public _highlightTransform = new Vector4(1, 1, 0, 0);\r\n\r\n    /** @internal */\r\n    public _highlight = 1;\r\n\r\n    /**\r\n     * Gets or sets the intensity of the iridescence effect.\r\n     */\r\n    @serialize()\r\n    public iridescenceIntensity = 0.45;\r\n\r\n    /**\r\n     * Gets or sets the intensity of the iridescence effect on the backplate edges.\r\n     */\r\n    @serialize()\r\n    public iridescenceEdgeIntensity = 1;\r\n\r\n    /**\r\n     * Gets or sets the Tint of the iridescence effect on the backplate.\r\n     */\r\n    @serialize()\r\n    public iridescenceTint = new Color4(1, 1, 1, 1);\r\n\r\n    /** @internal */\r\n    public _angle = -45;\r\n\r\n    /**\r\n     * Gets or sets the opacity of the backplate (0.0 - 1.0).\r\n     */\r\n    @serialize()\r\n    public fadeOut = 1;\r\n\r\n    /** @internal */\r\n    public _reflected = true;\r\n\r\n    /** @internal */\r\n    public _frequency = 1;\r\n\r\n    /** @internal */\r\n    public _verticalOffset = 0;\r\n\r\n    /**\r\n     * Gets or sets the gradient color effect on the backplate.\r\n     */\r\n    @serialize()\r\n    public gradientColor = new Color4(0.74902, 0.74902, 0.74902, 1);\r\n\r\n    /**\r\n     * Gets or sets the top left gradient color effect on the backplate.\r\n     */\r\n    @serialize()\r\n    public topLeftGradientColor = new Color4(0.00784314, 0.294118, 0.580392, 1);\r\n\r\n    /**\r\n     * Gets or sets the top right gradient color effect on the backplate.\r\n     */\r\n    @serialize()\r\n    public topRightGradientColor = new Color4(0.305882, 0, 1, 1);\r\n\r\n    /**\r\n     * Gets or sets the bottom left gradient color effect on the backplate.\r\n     */\r\n    @serialize()\r\n    public bottomLeftGradientColor = new Color4(0.133333, 0.258824, 0.992157, 1);\r\n\r\n    /**\r\n     * Gets or sets the bottom right gradient color effect on the backplate.\r\n     */\r\n    @serialize()\r\n    public bottomRightGradientColor = new Color4(0.176471, 0.176471, 0.619608, 1);\r\n\r\n    /**\r\n     * Gets or sets the edge width of the backplate.\r\n     */\r\n    @serialize()\r\n    public edgeWidth = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the edge width of the backplate.\r\n     */\r\n    @serialize()\r\n    public edgePower = 1;\r\n\r\n    /**\r\n     * Gets or sets the edge width of the backplate.\r\n     */\r\n    @serialize()\r\n    public edgeLineGradientBlend = 0.5;\r\n\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n        this.alphaMode = Constants.ALPHA_DISABLE;\r\n        this.backFaceCulling = false;\r\n\r\n        this._iridescentMapTexture = new Texture(MRDLBackplateMaterial.IRIDESCENT_MAP_TEXTURE_URL, this.getScene(), true, false, Texture.NEAREST_SAMPLINGMODE);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new MRDLBackplateMaterialDefines();\r\n        }\r\n\r\n        const defines = <MRDLBackplateMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, false);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (defines.TANGENT) {\r\n                attribs.push(VertexBuffer.TangentKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"mrdlBackplate\";\r\n            const join = defines.toString();\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"viewProjection\",\r\n                \"cameraPosition\",\r\n                \"_Radius_\",\r\n                \"_Line_Width_\",\r\n                \"_Absolute_Sizes_\",\r\n                \"_Filter_Width_\",\r\n                \"_Base_Color_\",\r\n                \"_Line_Color_\",\r\n                \"_Radius_Top_Left_\",\r\n                \"_Radius_Top_Right_\",\r\n                \"_Radius_Bottom_Left_\",\r\n                \"_Radius_Bottom_Right_\",\r\n                \"_Rate_\",\r\n                \"_Highlight_Color_\",\r\n                \"_Highlight_Width_\",\r\n                \"_Highlight_Transform_\",\r\n                \"_Highlight_\",\r\n                \"_Iridescence_Intensity_\",\r\n                \"_Iridescence_Edge_Intensity_\",\r\n                \"_Iridescence_Tint_\",\r\n                \"_Iridescent_Map_\",\r\n                \"_Angle_\",\r\n                \"_Reflected_\",\r\n                \"_Frequency_\",\r\n                \"_Vertical_Offset_\",\r\n                \"_Gradient_Color_\",\r\n                \"_Top_Left_\",\r\n                \"_Top_Right_\",\r\n                \"_Bottom_Left_\",\r\n                \"_Bottom_Right_\",\r\n                \"_Edge_Width_\",\r\n                \"_Edge_Power_\",\r\n                \"_Line_Gradient_Blend_\",\r\n                \"_Fade_Out_\",\r\n            ];\r\n            const samplers: string[] = [\"_Iridescent_Map_\"];\r\n            const uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: 4 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const defines = <MRDLBackplateMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", this.getScene().getTransformMatrix());\r\n        this._activeEffect.setVector3(\"cameraPosition\", this.getScene().activeCamera!.position);\r\n\r\n        // \"Round Rect\"\r\n        this._activeEffect.setFloat(\"_Radius_\", this.radius);\r\n        this._activeEffect.setFloat(\"_Line_Width_\", this.lineWidth);\r\n        this._activeEffect.setFloat(\"_Absolute_Sizes_\", this.absoluteSizes ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Filter_Width_\", this._filterWidth);\r\n        this._activeEffect.setDirectColor4(\"_Base_Color_\", this.baseColor);\r\n        this._activeEffect.setDirectColor4(\"_Line_Color_\", this.lineColor);\r\n\r\n        // \"Radii Multipliers\"\r\n        this._activeEffect.setFloat(\"_Radius_Top_Left_\", this.radiusTopLeft);\r\n        this._activeEffect.setFloat(\"_Radius_Top_Right_\", this.radiusTopRight);\r\n        this._activeEffect.setFloat(\"_Radius_Bottom_Left_\", this.radiusBottomLeft);\r\n        this._activeEffect.setFloat(\"_Radius_Bottom_Right_\", this.radiusBottomRight);\r\n\r\n        // \"Line Highlight\"\r\n        this._activeEffect.setFloat(\"_Rate_\", this._rate);\r\n        this._activeEffect.setDirectColor4(\"_Highlight_Color_\", this.highlightColor);\r\n        this._activeEffect.setFloat(\"_Highlight_Width_\", this.highlightWidth);\r\n        this._activeEffect.setVector4(\"_Highlight_Transform_\", this._highlightTransform);\r\n        this._activeEffect.setFloat(\"_Highlight_\", this._highlight);\r\n\r\n        // \"Iridescence\"\r\n        //define IRIDESCENCE_ENABLE true;\r\n        this._activeEffect.setFloat(\"_Iridescence_Intensity_\", this.iridescenceIntensity);\r\n        this._activeEffect.setFloat(\"_Iridescence_Edge_Intensity_\", this.iridescenceEdgeIntensity);\r\n        this._activeEffect.setDirectColor4(\"_Iridescence_Tint_\", this.iridescenceTint);\r\n        this._activeEffect.setTexture(\"_Iridescent_Map_\", this._iridescentMapTexture);\r\n        this._activeEffect.setFloat(\"_Angle_\", this._angle);\r\n        this._activeEffect.setFloat(\"_Reflected_\", this._reflected ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Frequency_\", this._frequency);\r\n        this._activeEffect.setFloat(\"_Vertical_Offset_\", this._verticalOffset);\r\n\r\n        // \"Gradient\"\r\n        this._activeEffect.setDirectColor4(\"_Gradient_Color_\", this.gradientColor);\r\n        this._activeEffect.setDirectColor4(\"_Top_Left_\", this.topLeftGradientColor);\r\n        this._activeEffect.setDirectColor4(\"_Top_Right_\", this.topRightGradientColor);\r\n        this._activeEffect.setDirectColor4(\"_Bottom_Left_\", this.bottomLeftGradientColor);\r\n        this._activeEffect.setDirectColor4(\"_Bottom_Right_\", this.bottomRightGradientColor);\r\n        //define EDGE_ONLY false;\r\n        this._activeEffect.setFloat(\"_Edge_Width_\", this.edgeWidth);\r\n        this._activeEffect.setFloat(\"_Edge_Power_\", this.edgePower);\r\n        this._activeEffect.setFloat(\"_Line_Gradient_Blend_\", this.edgeLineGradientBlend);\r\n\r\n        // \"Fade\"\r\n        this._activeEffect.setFloat(\"_Fade_Out_\", this.fadeOut);\r\n\r\n        // \"Antialiasing\"\r\n        //define SMOOTH_EDGES true;\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    /**\r\n     * Get the list of animatables in the material.\r\n     * @returns the list of animatables object used in the material\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): MRDLBackplateMaterial {\r\n        return SerializationHelper.Clone(() => new MRDLBackplateMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.MRDLBackplateMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"MRDLBackplateMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): MRDLBackplateMaterial {\r\n        return SerializationHelper.Parse(() => new MRDLBackplateMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.MRDLBackplateMaterial\", MRDLBackplateMaterial);\r\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport { PointerDragBehavior } from \"core/Behaviors/Meshes/pointerDragBehavior\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { SceneLoader } from \"core/Loading/sceneLoader\";\r\nimport { MRDLSliderBarMaterial } from \"../materials/mrdl/mrdlSliderBarMaterial\";\r\nimport { MRDLSliderThumbMaterial } from \"../materials/mrdl/mrdlSliderThumbMaterial\";\r\nimport { MRDLBackplateMaterial } from \"../materials/mrdl/mrdlBackplateMaterial\";\r\n\r\nconst SLIDER_MIN: number = 0;\r\nconst SLIDER_MAX: number = 100;\r\nconst SLIDER_VAL: number = 50;\r\nconst SLIDER_STEP: number = 0;\r\nconst SLIDER_SCALING: number = 1.0;\r\nconst SLIDER_MARGIN: number = 0.2;\r\n\r\n/**\r\n * Class used to create a slider in 3D\r\n */\r\nexport class Slider3D extends Control3D {\r\n    /**\r\n     * Base Url for the models.\r\n     */\r\n    public static MODEL_BASE_URL: string = \"https://assets.babylonjs.com/meshes/MRTK/\";\r\n\r\n    /**\r\n     * File name for the 8x4 model.\r\n     */\r\n    public static MODEL_FILENAME: string = \"mrtk-fluent-backplate.glb\";\r\n\r\n    private _sliderBackplate: AbstractMesh;\r\n    private _sliderBackplateMaterial: MRDLBackplateMaterial;\r\n    private _sliderBarMaterial: MRDLSliderBarMaterial;\r\n    private _sliderThumbMaterial: MRDLSliderThumbMaterial;\r\n    private _sliderThumb: AbstractMesh;\r\n    private _sliderBar: AbstractMesh;\r\n    private _sliderBackplateVisible: boolean;\r\n\r\n    private _minimum: number;\r\n    private _maximum: number;\r\n    private _value: number;\r\n    private _step: number;\r\n\r\n    private _draggedPosition: number;\r\n\r\n    /** Observable raised when the sldier value changes */\r\n    public onValueChangedObservable = new Observable<number>();\r\n\r\n    /**\r\n     * Creates a new slider\r\n     * @param name defines the control name\r\n     * @param sliderBackplateVisible defines if the control has a backplate, default is false\r\n     */\r\n    constructor(name?: string, sliderBackplateVisible?: boolean) {\r\n        super(name);\r\n        this._sliderBackplateVisible = sliderBackplateVisible || false;\r\n\r\n        this._minimum = SLIDER_MIN;\r\n        this._maximum = SLIDER_MAX;\r\n        this._step = SLIDER_STEP;\r\n        this._value = SLIDER_VAL;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        if (this.node) {\r\n            return this._sliderThumb;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** Gets or sets minimum value */\r\n    public get minimum(): number {\r\n        return this._minimum;\r\n    }\r\n\r\n    public set minimum(value: number) {\r\n        if (this._minimum === value) {\r\n            return;\r\n        }\r\n\r\n        this._minimum = Math.max(value, SLIDER_MIN);\r\n        this._value = Math.max(Math.min(this._value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets maximum value */\r\n    public get maximum(): number {\r\n        return this._maximum;\r\n    }\r\n\r\n    public set maximum(value: number) {\r\n        if (this._maximum === value) {\r\n            return;\r\n        }\r\n\r\n        this._maximum = Math.max(value, this._minimum);\r\n        this._value = Math.max(Math.min(this._value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets step value */\r\n    public get step(): number {\r\n        return this._step;\r\n    }\r\n\r\n    public set step(value: number) {\r\n        if (this._step === value) {\r\n            return;\r\n        }\r\n\r\n        this._step = Math.max(Math.min(value, this._maximum - this._minimum), SLIDER_STEP);\r\n    }\r\n\r\n    /** Gets or sets current value */\r\n    public get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: number) {\r\n        if (this._value === value) {\r\n            return;\r\n        }\r\n\r\n        this._value = Math.max(Math.min(value, this._maximum), this._minimum);\r\n        if (this._sliderThumb) {\r\n            this._sliderThumb.position.x = this._convertToPosition(this.value);\r\n        }\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    protected get start(): number {\r\n        if (!this.node) {\r\n            return -SLIDER_SCALING / 2;\r\n        }\r\n\r\n        return this._sliderBar.position.x - this._sliderBar.scaling.x / 2;\r\n    }\r\n\r\n    protected get end(): number {\r\n        if (!this.node) {\r\n            return SLIDER_SCALING / 2;\r\n        }\r\n\r\n        return this._sliderBar.position.x + this._sliderBar.scaling.x / 2;\r\n    }\r\n\r\n    /**\r\n     * Gets the slider bar material used by this control\r\n     */\r\n    public get sliderBarMaterial(): MRDLSliderBarMaterial {\r\n        return this._sliderBarMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the slider thumb material used by this control\r\n     */\r\n    public get sliderThumbMaterial(): MRDLSliderThumbMaterial {\r\n        return this._sliderThumbMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the slider backplate material used by this control\r\n     */\r\n    public get sliderBackplateMaterial(): MRDLBackplateMaterial {\r\n        return this._sliderBackplateMaterial;\r\n    }\r\n\r\n    /** Sets a boolean indicating if the control is visible */\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n\r\n        this.node?.setEnabled(value);\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        const sliderBackplate = CreateBox(\r\n            `${this.name}_sliderbackplate`,\r\n            {\r\n                width: 1.0,\r\n                height: 1.0,\r\n                depth: 1.0,\r\n            },\r\n            scene\r\n        );\r\n        sliderBackplate.isPickable = false;\r\n        sliderBackplate.visibility = 0;\r\n        sliderBackplate.scaling = new Vector3(1, 0.5, 0.8);\r\n\r\n        SceneLoader.ImportMeshAsync(undefined, Slider3D.MODEL_BASE_URL, Slider3D.MODEL_FILENAME, scene).then((result) => {\r\n            // make all meshes not pickable. Required meshes' pickable state will be set later.\r\n            result.meshes.forEach((m) => {\r\n                m.isPickable = false;\r\n            });\r\n            const sliderBackplateModel = result.meshes[1];\r\n            const sliderBarModel = result.meshes[1].clone(`${this.name}_sliderbar`, sliderBackplate);\r\n            const sliderThumbModel = result.meshes[1].clone(`${this.name}_sliderthumb`, sliderBackplate);\r\n            sliderBackplateModel.visibility = 0;\r\n\r\n            if (this._sliderBackplateVisible) {\r\n                sliderBackplateModel.visibility = 1;\r\n                sliderBackplateModel.name = `${this.name}_sliderbackplate`;\r\n                sliderBackplateModel.scaling.x = 1;\r\n                sliderBackplateModel.scaling.z = 0.2;\r\n                sliderBackplateModel.parent = sliderBackplate;\r\n                if (this._sliderBackplateMaterial) {\r\n                    sliderBackplateModel.material = this._sliderBackplateMaterial;\r\n                }\r\n                this._sliderBackplate = sliderBackplateModel;\r\n            }\r\n\r\n            if (sliderBarModel) {\r\n                sliderBarModel.parent = sliderBackplate;\r\n                sliderBarModel.position.z = -0.1;\r\n                sliderBarModel.scaling = new Vector3(SLIDER_SCALING - SLIDER_MARGIN, 0.04, 0.3);\r\n                if (this._sliderBarMaterial) {\r\n                    sliderBarModel.material = this._sliderBarMaterial;\r\n                }\r\n                this._sliderBar = sliderBarModel;\r\n            }\r\n\r\n            if (sliderThumbModel) {\r\n                sliderThumbModel.parent = sliderBackplate;\r\n                sliderThumbModel.isPickable = true;\r\n                sliderThumbModel.position.z = -0.115;\r\n                sliderThumbModel.scaling = new Vector3(0.025, 0.3, 0.6);\r\n                sliderThumbModel.position.x = this._convertToPosition(this.value);\r\n                sliderThumbModel.addBehavior(this._createBehavior());\r\n                if (this._sliderThumbMaterial) {\r\n                    sliderThumbModel.material = this._sliderThumbMaterial;\r\n                }\r\n                this._sliderThumb = sliderThumbModel;\r\n            }\r\n\r\n            this._injectGUI3DReservedDataStore(sliderBackplate).control = this;\r\n            sliderBackplate.getChildMeshes().forEach((mesh) => {\r\n                this._injectGUI3DReservedDataStore(mesh).control = this;\r\n            });\r\n        });\r\n\r\n        this._affectMaterial(sliderBackplate);\r\n        return sliderBackplate;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        this._sliderBackplateMaterial = this._sliderBackplateMaterial ?? new MRDLBackplateMaterial(`${this.name}_sliderbackplate_material`, mesh.getScene());\r\n        this._sliderBarMaterial = this._sliderBarMaterial ?? new MRDLSliderBarMaterial(`${this.name}_sliderbar_material`, mesh.getScene());\r\n        this._sliderThumbMaterial = this._sliderThumbMaterial ?? new MRDLSliderThumbMaterial(`${this.name}_sliderthumb_material`, mesh.getScene());\r\n    }\r\n\r\n    private _createBehavior(): PointerDragBehavior {\r\n        const pointerDragBehavior = new PointerDragBehavior({ dragAxis: Vector3.Right() });\r\n        pointerDragBehavior.moveAttached = false;\r\n\r\n        pointerDragBehavior.onDragStartObservable.add(() => {\r\n            this._draggedPosition = this._sliderThumb.position.x;\r\n        });\r\n\r\n        pointerDragBehavior.onDragObservable.add((event) => {\r\n            this._draggedPosition += event.dragDistance / this.scaling.x;\r\n            this.value = this._convertToValue(this._draggedPosition);\r\n        });\r\n\r\n        return pointerDragBehavior;\r\n    }\r\n\r\n    private _convertToPosition(value: number): number {\r\n        const position = ((value - this.minimum) / (this.maximum - this.minimum)) * (this.end - this.start) + this.start;\r\n        return Math.min(Math.max(position, this.start), this.end);\r\n    }\r\n\r\n    private _convertToValue(position: number): number {\r\n        let value = ((position - this.start) / (this.end - this.start)) * (this.maximum - this.minimum);\r\n        value = this.step ? Math.round(value / this.step) * this.step : value;\r\n\r\n        return Math.max(Math.min(this.minimum + value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n        this._sliderBar?.dispose();\r\n        this._sliderThumb?.dispose();\r\n        this._sliderBarMaterial?.dispose();\r\n        this._sliderThumbMaterial?.dispose();\r\n        this._sliderBackplate?.dispose();\r\n        this._sliderBackplateMaterial?.dispose();\r\n    }\r\n}\r\n","import { Tools } from \"core/Misc/tools\";\r\nimport { Matrix, TmpVectors, Vector3 } from \"core/Maths/math.vector\";\r\nimport type { float } from \"core/types\";\r\n\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport type { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\nimport { Axis, Space } from \"core/Maths/math.axis\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a sphere\r\n */\r\nexport class SpherePanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the sphere where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        const mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        const newPos = this._sphericalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new Vector3(2 * newPos.x, 2 * newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(-newPos.x, -newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(Axis.Y, Math.PI, Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _sphericalMapping(source: Vector3) {\r\n        const newPos = new Vector3(0, 0, this._radius);\r\n\r\n        const xAngle = source.y / this._radius;\r\n        const yAngle = -(source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, xAngle, 0, TmpVectors.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, TmpVectors.Matrix[0]);\r\n    }\r\n}\r\n","import { Tools } from \"core/Misc/tools\";\r\nimport { Matrix, TmpVectors, Vector3 } from \"core/Maths/math.vector\";\r\n\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a stack panel in 3D on XY plane\r\n */\r\nexport class StackPanel3D extends Container3D {\r\n    private _isVertical = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the stack panel is vertical or horizontal (horizontal by default)\r\n     */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0.1;\r\n\r\n    /**\r\n     * Creates new StackPanel\r\n     * @param isVertical\r\n     */\r\n    public constructor(isVertical = false) {\r\n        super();\r\n\r\n        this._isVertical = isVertical;\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        let width = 0;\r\n        let height = 0;\r\n        let controlCount = 0;\r\n        const extendSizes = [];\r\n\r\n        const currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (const child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, TmpVectors.Matrix[0]);\r\n\r\n            const boundingBox = child.mesh.getBoundingInfo().boundingBox;\r\n            const extendSize = Vector3.TransformNormal(boundingBox.extendSize, TmpVectors.Matrix[0]);\r\n            extendSizes.push(extendSize);\r\n\r\n            if (this._isVertical) {\r\n                height += extendSize.y;\r\n            } else {\r\n                width += extendSize.x;\r\n            }\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            height += ((controlCount - 1) * this.margin) / 2;\r\n        } else {\r\n            width += ((controlCount - 1) * this.margin) / 2;\r\n        }\r\n\r\n        // Arrange\r\n        let offset: number;\r\n        if (this._isVertical) {\r\n            offset = -height;\r\n        } else {\r\n            offset = -width;\r\n        }\r\n\r\n        let index = 0;\r\n        for (const child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n            controlCount--;\r\n            const extendSize = extendSizes[index++];\r\n\r\n            if (this._isVertical) {\r\n                child.position.y = offset + extendSize.y;\r\n                child.position.x = 0;\r\n                offset += extendSize.y * 2;\r\n            } else {\r\n                child.position.x = offset + extendSize.x;\r\n                child.position.y = 0;\r\n                offset += extendSize.x * 2;\r\n            }\r\n\r\n            offset += controlCount > 0 ? this.margin : 0;\r\n        }\r\n    }\r\n}\r\n","import type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\n\r\nimport { TouchButton3D } from \"./touchButton3D\";\r\n\r\n/**\r\n * Class used to create an interactable object. It's a touchable 3D button using a mesh coming from the current scene\r\n * @since 5.0.0\r\n */\r\nexport class TouchMeshButton3D extends TouchButton3D {\r\n    /** @internal */\r\n    protected _currentMesh: Mesh;\r\n\r\n    /**\r\n     * Creates a new 3D button based on a mesh\r\n     * @param mesh mesh to become a 3D button. By default this is also the mesh for near interaction collision checking\r\n     * @param name defines the control name\r\n     */\r\n    constructor(mesh: Mesh, name?: string) {\r\n        super(name, mesh);\r\n\r\n        this._currentMesh = mesh;\r\n\r\n        /**\r\n         * Provides a default behavior on hover/out & up/down\r\n         * Override those function to create your own desired behavior specific to your mesh\r\n         */\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.1);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 1.1);\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TouchMeshButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(): TransformNode {\r\n        this._currentMesh.getChildMeshes().forEach((mesh) => {\r\n            this._injectGUI3DReservedDataStore(mesh).control = this;\r\n        });\r\n\r\n        return this._currentMesh;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _affectMaterial(mesh: AbstractMesh) {}\r\n}\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"mrdlBackglowPixelShader\";\nconst shader = `uniform vec3 cameraPosition;\rvarying vec3 vNormal;\rvarying vec2 vUV;\runiform float _Bevel_Radius_;\runiform float _Line_Width_;\runiform bool _Absolute_Sizes_;\runiform float _Tuning_Motion_;\runiform float _Motion_;\runiform float _Max_Intensity_;\runiform float _Intensity_Fade_In_Exponent_;\runiform float _Outer_Fuzz_Start_;\runiform float _Outer_Fuzz_End_;\runiform vec4 _Color_;\runiform vec4 _Inner_Color_;\runiform float _Blend_Exponent_;\runiform float _Falloff_;\runiform float _Bias_;\rfloat BiasFunc(float b,float v) {\rreturn pow(v,log(clamp(b,0.001,0.999))/log(0.5));\r}\rvoid Fuzzy_Round_Rect_B33(\rfloat Size_X,\rfloat Size_Y,\rfloat Radius_X,\rfloat Radius_Y,\rfloat Line_Width,\rvec2 UV,\rfloat Outer_Fuzz,\rfloat Max_Outer_Fuzz,\rout float Rect_Distance,\rout float Inner_Distance)\r{\rvec2 halfSize=vec2(Size_X,Size_Y)*0.5;\rvec2 r=max(min(vec2(Radius_X,Radius_Y),halfSize),vec2(0.001,0.001));\rfloat radius=min(r.x,r.y)-Max_Outer_Fuzz;\rvec2 v=abs(UV);\rvec2 nearestp=min(v,halfSize-r);\rfloat d=distance(nearestp,v);\rInner_Distance=clamp(1.0-(radius-d)/Line_Width,0.0,1.0);\rRect_Distance=clamp(1.0-(d-radius)/Outer_Fuzz,0.0,1.0)*Inner_Distance;\r}\rvoid main()\r{\rfloat X_Q42;\rfloat Y_Q42;\rX_Q42=vNormal.x;\rY_Q42=vNormal.y;\rfloat MaxAB_Q24=max(_Tuning_Motion_,_Motion_);\rfloat Sqrt_F_Q27=sqrt(MaxAB_Q24);\rfloat Power_Q43=pow(MaxAB_Q24,_Intensity_Fade_In_Exponent_);\rfloat Value_At_T_Q26=mix(_Outer_Fuzz_Start_,_Outer_Fuzz_End_,Sqrt_F_Q27);\rfloat Product_Q23=_Max_Intensity_*Power_Q43;\rfloat Rect_Distance_Q33;\rfloat Inner_Distance_Q33;\rFuzzy_Round_Rect_B33(X_Q42,Y_Q42,_Bevel_Radius_,_Bevel_Radius_,_Line_Width_,vUV,Value_At_T_Q26,_Outer_Fuzz_Start_,Rect_Distance_Q33,Inner_Distance_Q33);\rfloat Power_Q44=pow(Inner_Distance_Q33,_Blend_Exponent_);\rfloat Result_Q45=pow(BiasFunc(_Bias_,Rect_Distance_Q33),_Falloff_);\rvec4 Color_At_T_Q25=mix(_Inner_Color_,_Color_,Power_Q44);\rfloat Product_Q22=Result_Q45*Product_Q23;\rvec4 Result_Q28=Product_Q22*Color_At_T_Q25;\rvec4 Out_Color=Result_Q28;\rfloat Clip_Threshold=0.0;\rgl_FragColor=Out_Color;\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlBackglowPixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"mrdlBackglowVertexShader\";\nconst shader = `uniform mat4 world;\runiform mat4 viewProjection;\runiform vec3 cameraPosition;\rattribute vec3 position;\rattribute vec3 normal;\rattribute vec2 uv;\rattribute vec3 tangent;\runiform float _Bevel_Radius_;\runiform float _Line_Width_;\runiform bool _Absolute_Sizes_;\runiform float _Tuning_Motion_;\runiform float _Motion_;\runiform float _Max_Intensity_;\runiform float _Intensity_Fade_In_Exponent_;\runiform float _Outer_Fuzz_Start_;\runiform float _Outer_Fuzz_End_;\runiform vec4 _Color_;\runiform vec4 _Inner_Color_;\runiform float _Blend_Exponent_;\runiform float _Falloff_;\runiform float _Bias_;\rvarying vec3 vNormal;\rvarying vec2 vUV;\rvoid main()\r{\rvec3 Dir_World_Q41=(world*vec4(tangent,0.0)).xyz;\rvec3 Dir_World_Q40=(world*vec4((cross(normal,tangent)),0.0)).xyz;\rfloat MaxAB_Q24=max(_Tuning_Motion_,_Motion_);\rfloat Length_Q16=length(Dir_World_Q41);\rfloat Length_Q17=length(Dir_World_Q40);\rbool Greater_Than_Q37=MaxAB_Q24>0.0;\rvec3 Sizes_Q35;\rvec2 XY_Q35;\rSizes_Q35=(_Absolute_Sizes_ ? vec3(Length_Q16,Length_Q17,0) : vec3(Length_Q16/Length_Q17,1,0));\rXY_Q35=(uv-vec2(0.5,0.5))*Sizes_Q35.xy;\rvec3 Result_Q38=Greater_Than_Q37 ? position : vec3(0,0,0);\rvec3 Pos_World_Q39=(world*vec4(Result_Q38,1.0)).xyz;\rvec3 Position=Pos_World_Q39;\rvec3 Normal=Sizes_Q35;\rvec2 UV=XY_Q35;\rvec3 Tangent=vec3(0,0,0);\rvec3 Binormal=vec3(0,0,0);\rvec4 Color=vec4(1,1,1,1);\rgl_Position=viewProjection*vec4(Position,1);\rvNormal=Normal;\rvUV=UV;\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlBackglowVertexShader = { name, shader };\n","import type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\n\r\nimport { Color4 } from \"core/Maths/math.color\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { SerializationHelper, serialize } from \"core/Misc/decorators\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\n\r\nimport \"./shaders/mrdlBackglow.fragment\";\r\nimport \"./shaders/mrdlBackglow.vertex\";\r\n\r\n/** @hidden */\r\nclass MRDLBackglowMaterialDefines extends MaterialDefines {\r\n    constructor() {\r\n        super();\r\n        this._needNormals = true;\r\n        this._needUVs = true;\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class MRDLBackglowMaterial extends PushMaterial {\r\n    /**\r\n     * Gets or sets the bevel radius on the backglow. If this value is changed, update the lineWidth to match.\r\n     */\r\n    @serialize()\r\n    public bevelRadius = 0.16;\r\n\r\n    /**\r\n     * Gets or sets the line width of the backglow.\r\n     */\r\n    @serialize()\r\n    public lineWidth = 0.16;\r\n\r\n    /**\r\n     * Gets or sets whether to use absolute sizes when calculating effects on the backglow.\r\n     * Since desktop and VR/AR have different relative sizes, it's usually best to keep this false.\r\n     */\r\n    @serialize()\r\n    public absoluteSizes = false;\r\n\r\n    /**\r\n     * Gets or sets the tuning motion of the backglow.\r\n     */\r\n    @serialize()\r\n    public tuningMotion = 0.0;\r\n\r\n    /**\r\n     * Gets or sets the motion of the backglow.\r\n     */\r\n    @serialize()\r\n    public motion = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the maximum intensity of the backglow.\r\n     */\r\n    @serialize()\r\n    public maxIntensity = 0.7;\r\n\r\n    /**\r\n     * Gets or sets the fade-in exponent of the intensity of the backglow.\r\n     */\r\n    @serialize()\r\n    public intensityFadeInExponent = 2.0;\r\n\r\n    /**\r\n     * Gets or sets the start of the outer fuzz effect on the backglow.\r\n     */\r\n    @serialize()\r\n    public outerFuzzStart = 0.04;\r\n\r\n    /**\r\n     * Gets or sets the end of the outer fuzz effect on the backglow.\r\n     */\r\n    @serialize()\r\n    public outerFuzzEnd = 0.04;\r\n\r\n    /**\r\n     * Gets or sets the color of the backglow.\r\n     */\r\n    @serialize()\r\n    public color: Color4 = new Color4(0.682353, 0.698039, 1, 1);\r\n\r\n    /**\r\n     * Gets or sets the inner color of the backglow.\r\n     */\r\n    @serialize()\r\n    public innerColor: Color4 = new Color4(0.356863, 0.392157, 0.796078, 1);\r\n\r\n    /**\r\n     * Gets or sets the blend exponent of the backglow.\r\n     */\r\n    @serialize()\r\n    public blendExponent = 1.5;\r\n\r\n    /**\r\n     * Gets or sets the falloff of the backglow.\r\n     */\r\n    @serialize()\r\n    public falloff = 2.0;\r\n\r\n    /**\r\n     * Gets or sets the bias of the backglow.\r\n     */\r\n    @serialize()\r\n    public bias = 0.5;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n        this.alphaMode = Constants.ALPHA_ADD;\r\n        this.disableDepthWrite = true;\r\n        this.backFaceCulling = false;\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new MRDLBackglowMaterialDefines();\r\n        }\r\n\r\n        const defines = <MRDLBackglowMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, false);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (defines.TANGENT) {\r\n                attribs.push(VertexBuffer.TangentKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"mrdlBackglow\";\r\n            const join = defines.toString();\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"worldView\",\r\n                \"worldViewProjection\",\r\n                \"view\",\r\n                \"projection\",\r\n                \"viewProjection\",\r\n                \"cameraPosition\",\r\n                \"_Bevel_Radius_\",\r\n                \"_Line_Width_\",\r\n                \"_Absolute_Sizes_\",\r\n                \"_Tuning_Motion_\",\r\n                \"_Motion_\",\r\n                \"_Max_Intensity_\",\r\n                \"_Intensity_Fade_In_Exponent_\",\r\n                \"_Outer_Fuzz_Start_\",\r\n                \"_Outer_Fuzz_End_\",\r\n                \"_Color_\",\r\n                \"_Inner_Color_\",\r\n                \"_Blend_Exponent_\",\r\n                \"_Falloff_\",\r\n                \"_Bias_\",\r\n            ];\r\n            const samplers: string[] = [];\r\n            const uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: 4 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <MRDLBackglowMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n        this._activeEffect.setVector3(\"cameraPosition\", scene.activeCamera!.position);\r\n\r\n        // \"Rounded Rectangle\"\r\n        this._activeEffect.setFloat(\"_Bevel_Radius_\", this.bevelRadius);\r\n        this._activeEffect.setFloat(\"_Line_Width_\", this.lineWidth);\r\n        this._activeEffect.setFloat(\"_Absolute_Sizes_\", this.absoluteSizes ? 1.0 : 0.0);\r\n\r\n        // \"Animation\"\r\n        this._activeEffect.setFloat(\"_Tuning_Motion_\", this.tuningMotion);\r\n        this._activeEffect.setFloat(\"_Motion_\", this.motion);\r\n        this._activeEffect.setFloat(\"_Max_Intensity_\", this.maxIntensity);\r\n        this._activeEffect.setFloat(\"_Intensity_Fade_In_Exponent_\", this.intensityFadeInExponent);\r\n        this._activeEffect.setFloat(\"_Outer_Fuzz_Start_\", this.outerFuzzStart);\r\n        this._activeEffect.setFloat(\"_Outer_Fuzz_End_\", this.outerFuzzEnd);\r\n\r\n        // \"Color\"\r\n        this._activeEffect.setDirectColor4(\"_Color_\", this.color);\r\n        this._activeEffect.setDirectColor4(\"_Inner_Color_\", this.innerColor);\r\n        this._activeEffect.setFloat(\"_Blend_Exponent_\", this.blendExponent);\r\n\r\n        // \"Inner Transition\"\r\n        this._activeEffect.setFloat(\"_Falloff_\", this.falloff);\r\n        this._activeEffect.setFloat(\"_Bias_\", this.bias);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    /**\r\n     * Get the list of animatables in the material.\r\n     * @returns the list of animatables object used in the material\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): MRDLBackglowMaterial {\r\n        return SerializationHelper.Clone(() => new MRDLBackglowMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): unknown {\r\n        const serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.MRDLBackglowMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"MRDLBackglowMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): MRDLBackglowMaterial {\r\n        return SerializationHelper.Parse(() => new MRDLBackglowMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.MRDLBackglowMaterial\", MRDLBackglowMaterial);\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"mrdlFrontplatePixelShader\";\nconst shader = `uniform vec3 cameraPosition;\rvarying vec3 vNormal;\rvarying vec2 vUV;\rvarying vec3 vTangent;\rvarying vec4 vExtra1;\rvarying vec4 vExtra2;\rvarying vec4 vExtra3;\runiform float _Radius_;\runiform float _Line_Width_;\runiform bool _Relative_To_Height_;\runiform float _Filter_Width_;\runiform vec4 _Edge_Color_;\runiform float _Fade_Out_;\runiform bool _Smooth_Edges_;\runiform bool _Blob_Enable_;\runiform vec3 _Blob_Position_;\runiform float _Blob_Intensity_;\runiform float _Blob_Near_Size_;\runiform float _Blob_Far_Size_;\runiform float _Blob_Near_Distance_;\runiform float _Blob_Far_Distance_;\runiform float _Blob_Fade_Length_;\runiform float _Blob_Inner_Fade_;\runiform float _Blob_Pulse_;\runiform float _Blob_Fade_;\runiform float _Blob_Pulse_Max_Size_;\runiform bool _Blob_Enable_2_;\runiform vec3 _Blob_Position_2_;\runiform float _Blob_Near_Size_2_;\runiform float _Blob_Inner_Fade_2_;\runiform float _Blob_Pulse_2_;\runiform float _Blob_Fade_2_;\runiform float _Gaze_Intensity_;\runiform float _Gaze_Focus_;\runiform sampler2D _Blob_Texture_;\runiform float _Selection_Fuzz_;\runiform float _Selected_;\runiform float _Selection_Fade_;\runiform float _Selection_Fade_Size_;\runiform float _Selected_Distance_;\runiform float _Selected_Fade_Length_;\runiform float _Proximity_Max_Intensity_;\runiform float _Proximity_Far_Distance_;\runiform float _Proximity_Near_Radius_;\runiform float _Proximity_Anisotropy_;\runiform bool _Use_Global_Left_Index_;\runiform bool _Use_Global_Right_Index_;\runiform vec4 Global_Left_Index_Tip_Position;\runiform vec4 Global_Right_Index_Tip_Position;\rvoid Scale_Color_B54(\rvec4 Color,\rfloat Scalar,\rout vec4 Result)\r{\rResult=Scalar*Color;\r}\rvoid Scale_RGB_B50(\rvec4 Color,\rfloat Scalar,\rout vec4 Result)\r{\rResult=vec4(Scalar,Scalar,Scalar,1)*Color;\r}\rvoid Proximity_Fragment_B51(\rfloat Proximity_Max_Intensity,\rfloat Proximity_Near_Radius,\rvec4 Deltas,\rfloat Show_Selection,\rfloat Distance_Fade1,\rfloat Distance_Fade2,\rfloat Strength,\rout float Proximity)\r{\rfloat proximity1=(1.0-clamp(length(Deltas.xy)/Proximity_Near_Radius,0.0,1.0))*Distance_Fade1;\rfloat proximity2=(1.0-clamp(length(Deltas.zw)/Proximity_Near_Radius,0.0,1.0))*Distance_Fade2;\rProximity=Strength*(Proximity_Max_Intensity*max(proximity1,proximity2) *(1.0-Show_Selection)+Show_Selection);\r}\rvoid Blob_Fragment_B56(\rvec2 UV,\rvec3 Blob_Info,\rsampler2D Blob_Texture,\rout vec4 Blob_Color)\r{\rfloat k=dot(UV,UV);\rBlob_Color=Blob_Info.y*texture(Blob_Texture,vec2(vec2(sqrt(k),Blob_Info.x).x,1.0-vec2(sqrt(k),Blob_Info.x).y))*(1.0-clamp(k,0.0,1.0));\r}\rvoid Round_Rect_Fragment_B61(\rfloat Radius,\rvec4 Line_Color,\rfloat Filter_Width,\rfloat Line_Visibility,\rvec4 Fill_Color,\rbool Smooth_Edges,\rvec4 Rect_Parms,\rout float Inside_Rect)\r{\rfloat d=length(max(abs(Rect_Parms.zw)-Rect_Parms.xy,0.0));\rfloat dx=max(fwidth(d)*Filter_Width,0.00001);\rInside_Rect=Smooth_Edges ? clamp((Radius-d)/dx,0.0,1.0) : 1.0-step(Radius,d);\r}\rvoid main()\r{\rfloat Is_Quad_Q53;\rIs_Quad_Q53=vNormal.z;\rvec4 Blob_Color_Q56;\rBlob_Fragment_B56(vUV,vTangent,_Blob_Texture_,Blob_Color_Q56);\rfloat X_Q52;\rfloat Y_Q52;\rfloat Z_Q52;\rfloat W_Q52;\rX_Q52=vExtra3.x;\rY_Q52=vExtra3.y;\rZ_Q52=vExtra3.z;\rW_Q52=vExtra3.w;\rfloat Proximity_Q51;\rProximity_Fragment_B51(_Proximity_Max_Intensity_,_Proximity_Near_Radius_,vExtra2,X_Q52,Y_Q52,Z_Q52,1.0,Proximity_Q51);\rfloat Inside_Rect_Q61;\rRound_Rect_Fragment_B61(W_Q52,vec4(1,1,1,1),_Filter_Width_,1.0,vec4(0,0,0,0),_Smooth_Edges_,vExtra1,Inside_Rect_Q61);\rvec4 Result_Q50;\rScale_RGB_B50(_Edge_Color_,Proximity_Q51,Result_Q50);\rvec4 Result_Q47=Inside_Rect_Q61*Blob_Color_Q56;\rvec4 Color_At_T_Q48=mix(Result_Q50,Result_Q47,Is_Quad_Q53);\rvec4 Result_Q54;\rScale_Color_B54(Color_At_T_Q48,_Fade_Out_,Result_Q54);\rvec4 Out_Color=Result_Q54;\rfloat Clip_Threshold=0.001;\rbool To_sRGB=false;\rgl_FragColor=Out_Color;\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlFrontplatePixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"mrdlFrontplateVertexShader\";\nconst shader = `uniform mat4 world;\runiform mat4 viewProjection;\runiform vec3 cameraPosition;\rattribute vec3 position;\rattribute vec3 normal;\rattribute vec2 uv;\rattribute vec3 tangent;\rattribute vec4 color;\runiform float _Radius_;\runiform float _Line_Width_;\runiform bool _Relative_To_Height_;\runiform float _Filter_Width_;\runiform vec4 _Edge_Color_;\runiform float _Fade_Out_;\runiform bool _Smooth_Edges_;\runiform bool _Blob_Enable_;\runiform vec3 _Blob_Position_;\runiform float _Blob_Intensity_;\runiform float _Blob_Near_Size_;\runiform float _Blob_Far_Size_;\runiform float _Blob_Near_Distance_;\runiform float _Blob_Far_Distance_;\runiform float _Blob_Fade_Length_;\runiform float _Blob_Inner_Fade_;\runiform float _Blob_Pulse_;\runiform float _Blob_Fade_;\runiform float _Blob_Pulse_Max_Size_;\runiform bool _Blob_Enable_2_;\runiform vec3 _Blob_Position_2_;\runiform float _Blob_Near_Size_2_;\runiform float _Blob_Inner_Fade_2_;\runiform float _Blob_Pulse_2_;\runiform float _Blob_Fade_2_;\runiform float _Gaze_Intensity_;\runiform float _Gaze_Focus_;\runiform sampler2D _Blob_Texture_;\runiform float _Selection_Fuzz_;\runiform float _Selected_;\runiform float _Selection_Fade_;\runiform float _Selection_Fade_Size_;\runiform float _Selected_Distance_;\runiform float _Selected_Fade_Length_;\runiform float _Proximity_Max_Intensity_;\runiform float _Proximity_Far_Distance_;\runiform float _Proximity_Near_Radius_;\runiform float _Proximity_Anisotropy_;\runiform bool _Use_Global_Left_Index_;\runiform bool _Use_Global_Right_Index_;\runiform vec4 Global_Left_Index_Tip_Position;\runiform vec4 Global_Right_Index_Tip_Position;\rvarying vec3 vNormal;\rvarying vec2 vUV;\rvarying vec3 vTangent;\rvarying vec4 vExtra1;\rvarying vec4 vExtra2;\rvarying vec4 vExtra3;\rvoid Blob_Vertex_B40(\rvec3 Position,\rvec3 Normal,\rvec3 Tangent,\rvec3 Bitangent,\rvec3 Blob_Position,\rfloat Intensity,\rfloat Blob_Near_Size,\rfloat Blob_Far_Size,\rfloat Blob_Near_Distance,\rfloat Blob_Far_Distance,\rvec4 Vx_Color,\rvec2 UV,\rvec3 Face_Center,\rvec2 Face_Size,\rvec2 In_UV,\rfloat Blob_Fade_Length,\rfloat Selection_Fade,\rfloat Selection_Fade_Size,\rfloat Inner_Fade,\rfloat Blob_Pulse,\rfloat Blob_Fade,\rfloat Blob_Enabled,\rfloat DistanceOffset,\rout vec3 Out_Position,\rout vec2 Out_UV,\rout vec3 Blob_Info,\rout vec2 Blob_Relative_UV)\r{\rfloat blobSize,fadeIn;\rvec3 Hit_Position;\rBlob_Info=vec3(0.0,0.0,0.0);\rfloat Hit_Distance=dot(Blob_Position-Face_Center,Normal)+DistanceOffset*Blob_Far_Distance;\rHit_Position=Blob_Position-Hit_Distance*Normal;\rfloat absD=abs(Hit_Distance);\rfloat lerpVal=clamp((absD-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);\rfadeIn=1.0-clamp((absD-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);\rfloat innerFade=1.0-clamp(-Hit_Distance/Inner_Fade,0.0,1.0);\rfloat farClip=clamp(1.0-step(Blob_Far_Distance+Blob_Fade_Length,absD),0.0,1.0);\rfloat size=mix(Blob_Near_Size,Blob_Far_Size,lerpVal)*farClip;\rblobSize=mix(size,Selection_Fade_Size,Selection_Fade)*innerFade*Blob_Enabled;\rBlob_Info.x=lerpVal*0.5+0.5;\rBlob_Info.y=fadeIn*Intensity*(1.0-Selection_Fade)*Blob_Fade;\rBlob_Info.x*=(1.0-Blob_Pulse);\rvec3 delta=Hit_Position-Face_Center;\rvec2 blobCenterXY=vec2(dot(delta,Tangent),dot(delta,Bitangent));\rvec2 quadUVin=2.0*UV-1.0; \rvec2 blobXY=blobCenterXY+quadUVin*blobSize;\rvec2 blobClipped=clamp(blobXY,-Face_Size*0.5,Face_Size*0.5);\rvec2 blobUV=(blobClipped-blobCenterXY)/max(blobSize,0.0001)*2.0;\rvec3 blobCorner=Face_Center+blobClipped.x*Tangent+blobClipped.y*Bitangent;\rOut_Position=mix(Position,blobCorner,Vx_Color.rrr);\rOut_UV=mix(In_UV,blobUV,Vx_Color.rr);\rBlob_Relative_UV=blobClipped/Face_Size.y;\r}\rvoid Round_Rect_Vertex_B36(\rvec2 UV,\rvec3 Tangent,\rvec3 Binormal,\rfloat Radius,\rfloat Anisotropy,\rvec2 Blob_Center_UV,\rout vec2 Rect_UV,\rout vec2 Scale_XY,\rout vec4 Rect_Parms)\r{\rScale_XY=vec2(Anisotropy,1.0);\rRect_UV=(UV-vec2(0.5,0.5))*Scale_XY;\rRect_Parms.xy=Scale_XY*0.5-vec2(Radius,Radius);\rRect_Parms.zw=Blob_Center_UV;\r}\rvec2 ProjectProximity(\rvec3 blobPosition,\rvec3 position,\rvec3 center,\rvec3 dir,\rvec3 xdir,\rvec3 ydir,\rout float vdistance\r)\r{\rvec3 delta=blobPosition-position;\rvec2 xy=vec2(dot(delta,xdir),dot(delta,ydir));\rvdistance=abs(dot(delta,dir));\rreturn xy;\r}\rvoid Proximity_Vertex_B33(\rvec3 Blob_Position,\rvec3 Blob_Position_2,\rvec3 Face_Center,\rvec3 Position,\rfloat Proximity_Far_Distance,\rfloat Relative_Scale,\rfloat Proximity_Anisotropy,\rvec3 Normal,\rvec3 Tangent,\rvec3 Binormal,\rout vec4 Extra,\rout float Distance_To_Face,\rout float Distance_Fade1,\rout float Distance_Fade2)\r{\rfloat distz1,distz2;\rExtra.xy=ProjectProximity(Blob_Position,Position,Face_Center,Normal,Tangent*Proximity_Anisotropy,Binormal,distz1)/Relative_Scale;\rExtra.zw=ProjectProximity(Blob_Position_2,Position,Face_Center,Normal,Tangent*Proximity_Anisotropy,Binormal,distz2)/Relative_Scale;\rDistance_To_Face=dot(Normal,Position-Face_Center);\rDistance_Fade1=1.0-clamp(distz1/Proximity_Far_Distance,0.0,1.0);\rDistance_Fade2=1.0-clamp(distz2/Proximity_Far_Distance,0.0,1.0);\r}\rvoid Object_To_World_Pos_B12(\rvec3 Pos_Object,\rout vec3 Pos_World)\r{\rPos_World=(world*vec4(Pos_Object,1.0)).xyz;\r}\rvoid Choose_Blob_B27(\rvec4 Vx_Color,\rvec3 Position1,\rvec3 Position2,\rbool Blob_Enable_1,\rbool Blob_Enable_2,\rfloat Near_Size_1,\rfloat Near_Size_2,\rfloat Blob_Inner_Fade_1,\rfloat Blob_Inner_Fade_2,\rfloat Blob_Pulse_1,\rfloat Blob_Pulse_2,\rfloat Blob_Fade_1,\rfloat Blob_Fade_2,\rout vec3 Position,\rout float Near_Size,\rout float Inner_Fade,\rout float Blob_Enable,\rout float Fade,\rout float Pulse)\r{\rPosition=Position1*(1.0-Vx_Color.g)+Vx_Color.g*Position2;\rfloat b1=Blob_Enable_1 ? 1.0 : 0.0;\rfloat b2=Blob_Enable_2 ? 1.0 : 0.0;\rBlob_Enable=b1+(b2-b1)*Vx_Color.g;\rPulse=Blob_Pulse_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Pulse_2;\rFade=Blob_Fade_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Fade_2;\rNear_Size=Near_Size_1*(1.0-Vx_Color.g)+Vx_Color.g*Near_Size_2;\rInner_Fade=Blob_Inner_Fade_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Inner_Fade_2;\r}\rvoid Move_Verts_B32(\rvec2 UV,\rfloat Radius,\rfloat Anisotropy,\rfloat Line_Width,\rfloat Visible,\rout vec3 New_P,\rout vec2 New_UV)\r{\rvec2 xy=2.0*UV-vec2(0.5,0.5);\rvec2 center=clamp(xy,0.0,1.0);\rvec2 delta=2.0*(xy-center);\rfloat deltaLength=length(delta);\rvec2 aniso=vec2(1.0/Anisotropy,1.0);\rcenter=(center-vec2(0.5,0.5))*(1.0-2.0*Radius*aniso);\rNew_UV=vec2((2.0-2.0*deltaLength)*Visible,0.0);\rfloat deltaRadius= (Radius-Line_Width*New_UV.x);\rNew_P.xy=(center+deltaRadius/deltaLength *aniso*delta);\rNew_P.z=0.0;\r}\rvoid Object_To_World_Dir_B14(\rvec3 Dir_Object,\rout vec3 Binormal_World)\r{\rBinormal_World=(world*vec4(Dir_Object,0.0)).xyz;\r}\rvoid Proximity_Visibility_B55(\rfloat Selection,\rvec3 Proximity_Center,\rvec3 Proximity_Center_2,\rfloat Proximity_Far_Distance,\rfloat Proximity_Radius,\rvec3 Face_Center,\rvec3 Normal,\rvec2 Face_Size,\rfloat Gaze,\rout float Width)\r{\rfloat boxMaxSize=length(Face_Size)*0.5;\rfloat d1=dot(Proximity_Center-Face_Center,Normal);\rvec3 blob1=Proximity_Center-d1*Normal;\rfloat d2=dot(Proximity_Center_2-Face_Center,Normal);\rvec3 blob2=Proximity_Center_2-d2*Normal;\rvec3 delta1=blob1-Face_Center;\rvec3 delta2=blob2-Face_Center;\rfloat dist1=dot(delta1,delta1);\rfloat dist2=dot(delta2,delta2);\rfloat nearestProxDist=sqrt(min(dist1,dist2));\rWidth=(1.0-step(boxMaxSize+Proximity_Radius,nearestProxDist))*(1.0-step(Proximity_Far_Distance,min(d1,d2))*(1.0-step(0.0001,Selection)));\rWidth=max(Gaze,Width);\r}\rvec2 ramp2(vec2 start,vec2 end,vec2 x)\r{\rreturn clamp((x-start)/(end-start),vec2(0.0,0.0),vec2(1.0,1.0));\r}\rfloat computeSelection(\rvec3 blobPosition,\rvec3 normal,\rvec3 tangent,\rvec3 bitangent,\rvec3 faceCenter,\rvec2 faceSize,\rfloat selectionFuzz,\rfloat farDistance,\rfloat fadeLength\r)\r{\rvec3 delta=blobPosition-faceCenter;\rfloat absD=abs(dot(delta,normal));\rfloat fadeIn=1.0-clamp((absD-farDistance)/fadeLength,0.0,1.0);\rvec2 blobCenterXY=vec2(dot(delta,tangent),dot(delta,bitangent));\rvec2 innerFace=faceSize*(1.0-selectionFuzz)*0.5;\rvec2 selectPulse=ramp2(-faceSize*0.5,-innerFace,blobCenterXY)-ramp2(innerFace,faceSize*0.5,blobCenterXY);\rreturn selectPulse.x*selectPulse.y*fadeIn;\r}\rvoid Selection_Vertex_B31(\rvec3 Blob_Position,\rvec3 Blob_Position_2,\rvec3 Face_Center,\rvec2 Face_Size,\rvec3 Normal,\rvec3 Tangent,\rvec3 Bitangent,\rfloat Selection_Fuzz,\rfloat Selected,\rfloat Far_Distance,\rfloat Fade_Length,\rvec3 Active_Face_Dir,\rout float Show_Selection)\r{\rfloat select1=computeSelection(Blob_Position,Normal,Tangent,Bitangent,Face_Center,Face_Size,Selection_Fuzz,Far_Distance,Fade_Length);\rfloat select2=computeSelection(Blob_Position_2,Normal,Tangent,Bitangent,Face_Center,Face_Size,Selection_Fuzz,Far_Distance,Fade_Length);\rShow_Selection=mix(max(select1,select2),1.0,Selected);\r}\rvoid main()\r{\rvec3 Vec3_Q29=vec3(vec2(0,0).x,vec2(0,0).y,color.r);\rvec3 Nrm_World_Q24;\rNrm_World_Q24=normalize((world*vec4(normal,0.0)).xyz);\rvec3 Face_Center_Q30;\rFace_Center_Q30=(world*vec4(vec3(0,0,0),1.0)).xyz;\rvec3 Tangent_World_Q13;\rTangent_World_Q13=(world*vec4(tangent,0.0)).xyz;\rvec3 Result_Q42;\rResult_Q42=_Use_Global_Left_Index_ ? Global_Left_Index_Tip_Position.xyz : _Blob_Position_;\rvec3 Result_Q43;\rResult_Q43=_Use_Global_Right_Index_ ? Global_Right_Index_Tip_Position.xyz : _Blob_Position_2_;\rfloat Value_At_T_Q58=mix(_Blob_Near_Size_,_Blob_Pulse_Max_Size_,_Blob_Pulse_);\rfloat Value_At_T_Q59=mix(_Blob_Near_Size_2_,_Blob_Pulse_Max_Size_,_Blob_Pulse_2_);\rvec3 Cross_Q70=cross(normal,tangent);\rfloat Product_Q45=_Gaze_Intensity_*_Gaze_Focus_;\rfloat Step_Q46=step(0.0001,Product_Q45);\rvec3 Tangent_World_N_Q15=normalize(Tangent_World_Q13);\rvec3 Position_Q27;\rfloat Near_Size_Q27;\rfloat Inner_Fade_Q27;\rfloat Blob_Enable_Q27;\rfloat Fade_Q27;\rfloat Pulse_Q27;\rChoose_Blob_B27(color,Result_Q42,Result_Q43,_Blob_Enable_,_Blob_Enable_2_,Value_At_T_Q58,Value_At_T_Q59,_Blob_Inner_Fade_,_Blob_Inner_Fade_2_,_Blob_Pulse_,_Blob_Pulse_2_,_Blob_Fade_,_Blob_Fade_2_,Position_Q27,Near_Size_Q27,Inner_Fade_Q27,Blob_Enable_Q27,Fade_Q27,Pulse_Q27);\rvec3 Binormal_World_Q14;\rObject_To_World_Dir_B14(Cross_Q70,Binormal_World_Q14);\rfloat Anisotropy_Q21=length(Tangent_World_Q13)/length(Binormal_World_Q14);\rvec3 Binormal_World_N_Q16=normalize(Binormal_World_Q14);\rvec2 Face_Size_Q35;\rfloat ScaleY_Q35;\rFace_Size_Q35=vec2(length(Tangent_World_Q13),length(Binormal_World_Q14));\rScaleY_Q35=Face_Size_Q35.y;\rfloat Out_Radius_Q38;\rfloat Out_Line_Width_Q38;\rOut_Radius_Q38=_Relative_To_Height_ ? _Radius_ : _Radius_/ScaleY_Q35;\rOut_Line_Width_Q38=_Relative_To_Height_ ? _Line_Width_ : _Line_Width_/ScaleY_Q35;\rfloat Show_Selection_Q31;\rSelection_Vertex_B31(Result_Q42,Result_Q43,Face_Center_Q30,Face_Size_Q35,Nrm_World_Q24,Tangent_World_N_Q15,Binormal_World_N_Q16,_Selection_Fuzz_,_Selected_,_Selected_Distance_,_Selected_Fade_Length_,vec3(0,0,-1),Show_Selection_Q31);\rfloat MaxAB_Q41=max(Show_Selection_Q31,Product_Q45);\rfloat Width_Q55;\rProximity_Visibility_B55(Show_Selection_Q31,Result_Q42,Result_Q43,_Proximity_Far_Distance_,_Proximity_Near_Radius_,Face_Center_Q30,Nrm_World_Q24,Face_Size_Q35,Step_Q46,Width_Q55);\rvec3 New_P_Q32;\rvec2 New_UV_Q32;\rMove_Verts_B32(uv,Out_Radius_Q38,Anisotropy_Q21,Out_Line_Width_Q38,Width_Q55,New_P_Q32,New_UV_Q32);\rvec3 Pos_World_Q12;\rObject_To_World_Pos_B12(New_P_Q32,Pos_World_Q12);\rvec3 Out_Position_Q40;\rvec2 Out_UV_Q40;\rvec3 Blob_Info_Q40;\rvec2 Blob_Relative_UV_Q40;\rBlob_Vertex_B40(Pos_World_Q12,Nrm_World_Q24,Tangent_World_N_Q15,Binormal_World_N_Q16,Position_Q27,_Blob_Intensity_,Near_Size_Q27,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,color,uv,Face_Center_Q30,Face_Size_Q35,New_UV_Q32,_Blob_Fade_Length_,_Selection_Fade_,_Selection_Fade_Size_,Inner_Fade_Q27,Pulse_Q27,Fade_Q27,Blob_Enable_Q27,0.0,Out_Position_Q40,Out_UV_Q40,Blob_Info_Q40,Blob_Relative_UV_Q40);\rvec2 Rect_UV_Q36;\rvec2 Scale_XY_Q36;\rvec4 Rect_Parms_Q36;\rRound_Rect_Vertex_B36(New_UV_Q32,Tangent_World_Q13,Binormal_World_Q14,Out_Radius_Q38,Anisotropy_Q21,Blob_Relative_UV_Q40,Rect_UV_Q36,Scale_XY_Q36,Rect_Parms_Q36);\rvec4 Extra_Q33;\rfloat Distance_To_Face_Q33;\rfloat Distance_Fade1_Q33;\rfloat Distance_Fade2_Q33;\rProximity_Vertex_B33(Result_Q42,Result_Q43,Face_Center_Q30,Pos_World_Q12,_Proximity_Far_Distance_,1.0,_Proximity_Anisotropy_,Nrm_World_Q24,Tangent_World_N_Q15,Binormal_World_N_Q16,Extra_Q33,Distance_To_Face_Q33,Distance_Fade1_Q33,Distance_Fade2_Q33);\rvec4 Vec4_Q37=vec4(MaxAB_Q41,Distance_Fade1_Q33,Distance_Fade2_Q33,Out_Radius_Q38);\rvec3 Position=Out_Position_Q40;\rvec3 Normal=Vec3_Q29;\rvec2 UV=Out_UV_Q40;\rvec3 Tangent=Blob_Info_Q40;\rvec3 Binormal=vec3(0,0,0);\rvec4 Color=vec4(1,1,1,1);\rvec4 Extra1=Rect_Parms_Q36;\rvec4 Extra2=Extra_Q33;\rvec4 Extra3=Vec4_Q37;\rgl_Position=viewProjection*vec4(Position,1);\rvNormal=Normal;\rvUV=UV;\rvTangent=Tangent;\rvExtra1=Extra1;\rvExtra2=Extra2;\rvExtra3=Extra3;\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlFrontplateVertexShader = { name, shader };\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\n\r\nimport { Color4 } from \"core/Maths/math.color\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { SerializationHelper, serialize } from \"core/Misc/decorators\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\n\r\nimport \"./shaders/mrdlFrontplate.fragment\";\r\nimport \"./shaders/mrdlFrontplate.vertex\";\r\n\r\n/** @hidden */\r\nclass MRDLFrontplateMaterialDefines extends MaterialDefines {\r\n    /**\r\n     * Sets default value for \"SMOOTH_EDGES\"\r\n     */\r\n    public SMOOTH_EDGES = true;\r\n\r\n    constructor() {\r\n        super();\r\n        this._needNormals = true;\r\n        this._needUVs = true;\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class MRDLFrontplateMaterial extends PushMaterial {\r\n    /**\r\n     * Gets or sets the corner radius on the frontplate. If this value is changed, update the lineWidth to match.\r\n     */\r\n    @serialize()\r\n    public radius = 0.12;\r\n\r\n    /**\r\n     * Gets or sets the line width of the frontplate.\r\n     */\r\n    @serialize()\r\n    public lineWidth = 0.01;\r\n\r\n    /**\r\n     * Gets or sets whether the scale is relative to the frontplate height.\r\n     */\r\n    @serialize()\r\n    public relativeToHeight = false;\r\n\r\n    /** @hidden */\r\n    public _filterWidth = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the edge color of the frontplate.\r\n     */\r\n    @serialize()\r\n    public edgeColor: Color4 = new Color4(0.53, 0.53, 0.53, 1);\r\n\r\n    /**\r\n     * Gets or sets whether to enable blob effects on the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobEnable = true;\r\n\r\n    /**\r\n     * Gets or sets the blob position on the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobPosition: Vector3 = new Vector3(100, 100, 100);\r\n\r\n    /**\r\n     * Gets or sets the blob intensity of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the blob near size of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobNearSize = 0.032;\r\n\r\n    /**\r\n     * Gets or sets the blob far size of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobFarSize = 0.048;\r\n\r\n    /**\r\n     * Gets or sets the blob near distance of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobNearDistance = 0.008;\r\n\r\n    /**\r\n     * Gets or sets the blob far distance of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobFarDistance = 0.064;\r\n\r\n    /**\r\n     * Gets or sets the blob fade length of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobFadeLength = 0.04;\r\n\r\n    /**\r\n     * Gets or sets the blob inner fade of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobInnerFade = 0.01;\r\n\r\n    /**\r\n     * Gets or sets the blob pulse of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobPulse = 0.0;\r\n\r\n    /**\r\n     * Gets or sets the blob fade effect on the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobFade = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the maximum size of the blob pulse on the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobPulseMaxSize = 0.05;\r\n\r\n    /**\r\n     * Gets or sets whether to enable extra blob effects of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobEnable2 = true;\r\n\r\n    /**\r\n     * Gets or sets blob2 position of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobPosition2: Vector3 = new Vector3(10, 10.1, -0.6);\r\n\r\n    /**\r\n     * Gets or sets the blob2 near size of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobNearSize2 = 0.008;\r\n\r\n    /**\r\n     * Gets or sets the blob2 inner fade of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobInnerFade2 = 0.1;\r\n\r\n    /**\r\n     * Gets or sets the blob2 pulse of the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobPulse2 = 0.0;\r\n\r\n    /**\r\n     * Gets or sets the blob2 fade effect on the frontplate.\r\n     */\r\n    @serialize()\r\n    public blobFade2 = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the gaze intensity of the frontplate.\r\n     */\r\n    @serialize()\r\n    public gazeIntensity = 0.8;\r\n\r\n    /**\r\n     * Gets or sets the gaze focus of the frontplate.\r\n     */\r\n    @serialize()\r\n    public gazeFocus = 0.0;\r\n\r\n    /**\r\n     * Gets or sets the selection fuzz of the frontplate.\r\n     */\r\n    @serialize()\r\n    public selectionFuzz = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the fade intensity of the frontplate.\r\n     */\r\n    @serialize()\r\n    public selected = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the selection fade intensity of the frontplate.\r\n     */\r\n    @serialize()\r\n    public selectionFade = 0.2;\r\n\r\n    /**\r\n     * Gets or sets the selection fade size of the frontplate.\r\n     */\r\n    @serialize()\r\n    public selectionFadeSize = 0.0;\r\n\r\n    /**\r\n     * Gets or sets the selected distance of the frontplate.\r\n     */\r\n    @serialize()\r\n    public selectedDistance = 0.08;\r\n\r\n    /**\r\n     * Gets or sets the selected fade length of the frontplate.\r\n     */\r\n    @serialize()\r\n    public selectedFadeLength = 0.08;\r\n\r\n    /**\r\n     * Gets or sets the proximity maximum intensity of the frontplate.\r\n     */\r\n    @serialize()\r\n    public proximityMaxIntensity = 0.45;\r\n\r\n    /**\r\n     * Gets or sets the proximity far distance of the frontplate.\r\n     */\r\n    @serialize()\r\n    public proximityFarDistance = 0.16;\r\n\r\n    /**\r\n     * Gets or sets the proximity near radius of the frontplate.\r\n     */\r\n    @serialize()\r\n    public proximityNearRadius = 0.016;\r\n\r\n    /**\r\n     * Gets or sets the proximity anisotropy of the frontplate.\r\n     */\r\n    @serialize()\r\n    public proximityAnisotropy = 1.0;\r\n\r\n    /**\r\n     * Gets or sets whether to use global left index on the frontplate.\r\n     */\r\n    @serialize()\r\n    public useGlobalLeftIndex = true;\r\n\r\n    /**\r\n     * Gets or sets  whether to use global right index of the frontplate.\r\n     */\r\n    @serialize()\r\n    public useGlobalRightIndex = true;\r\n\r\n    /**\r\n     * URL pointing to the texture used to define the coloring for the BLOB.\r\n     */\r\n    public static BLOB_TEXTURE_URL = \"\";\r\n\r\n    /**\r\n     * Gets or sets the opacity of the frontplate (0.0 - 1.0).\r\n     */\r\n    public fadeOut = 1.0;\r\n\r\n    private _blobTexture: Texture;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n        this.alphaMode = Constants.ALPHA_ADD;\r\n        this.disableDepthWrite = true;\r\n        this.backFaceCulling = false;\r\n        this._blobTexture = new Texture(MRDLFrontplateMaterial.BLOB_TEXTURE_URL, scene, true, false, Texture.NEAREST_SAMPLINGMODE);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new MRDLFrontplateMaterialDefines();\r\n        }\r\n\r\n        const defines = <MRDLFrontplateMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, false);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (defines.TANGENT) {\r\n                attribs.push(VertexBuffer.TangentKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"mrdlFrontplate\";\r\n            const join = defines.toString();\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"worldView\",\r\n                \"worldViewProjection\",\r\n                \"view\",\r\n                \"projection\",\r\n                \"viewProjection\",\r\n                \"cameraPosition\",\r\n                \"_Radius_\",\r\n                \"_Line_Width_\",\r\n                \"_Relative_To_Height_\",\r\n                \"_Filter_Width_\",\r\n                \"_Edge_Color_\",\r\n                \"_Fade_Out_\",\r\n                \"_Smooth_Edges_\",\r\n                \"_Blob_Enable_\",\r\n                \"_Blob_Position_\",\r\n                \"_Blob_Intensity_\",\r\n                \"_Blob_Near_Size_\",\r\n                \"_Blob_Far_Size_\",\r\n                \"_Blob_Near_Distance_\",\r\n                \"_Blob_Far_Distance_\",\r\n                \"_Blob_Fade_Length_\",\r\n                \"_Blob_Inner_Fade_\",\r\n                \"_Blob_Pulse_\",\r\n                \"_Blob_Fade_\",\r\n                \"_Blob_Pulse_Max_Size_\",\r\n                \"_Blob_Enable_2_\",\r\n                \"_Blob_Position_2_\",\r\n                \"_Blob_Near_Size_2_\",\r\n                \"_Blob_Inner_Fade_2_\",\r\n                \"_Blob_Pulse_2_\",\r\n                \"_Blob_Fade_2_\",\r\n                \"_Gaze_Intensity_\",\r\n                \"_Gaze_Focus_\",\r\n                \"_Blob_Texture_\",\r\n                \"_Selection_Fuzz_\",\r\n                \"_Selected_\",\r\n                \"_Selection_Fade_\",\r\n                \"_Selection_Fade_Size_\",\r\n                \"_Selected_Distance_\",\r\n                \"_Selected_Fade_Length_\",\r\n                \"_Proximity_Max_Intensity_\",\r\n                \"_Proximity_Far_Distance_\",\r\n                \"_Proximity_Near_Radius_\",\r\n                \"_Proximity_Anisotropy_\",\r\n                \"Global_Left_Index_Tip_Position\",\r\n                \"Global_Right_Index_Tip_Position\",\r\n                \"_Use_Global_Left_Index_\",\r\n                \"_Use_Global_Right_Index_\",\r\n            ];\r\n            const samplers: string[] = [];\r\n            const uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: 4 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <MRDLFrontplateMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n        this._activeEffect.setVector3(\"cameraPosition\", scene.activeCamera!.position);\r\n\r\n        // \"Round Rect\"\r\n        this._activeEffect.setFloat(\"_Radius_\", this.radius);\r\n        this._activeEffect.setFloat(\"_Line_Width_\", this.lineWidth);\r\n        this._activeEffect.setFloat(\"_Relative_To_Height_\", this.relativeToHeight ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Filter_Width_\", this._filterWidth);\r\n        this._activeEffect.setDirectColor4(\"_Edge_Color_\", this.edgeColor);\r\n\r\n        // \"Fade\"\r\n        this._activeEffect.setFloat(\"_Fade_Out_\", this.fadeOut);\r\n\r\n        // \"Blob\"\r\n        this._activeEffect.setFloat(\"_Blob_Enable_\", this.blobEnable ? 1.0 : 0.0);\r\n        this._activeEffect.setVector3(\"_Blob_Position_\", this.blobPosition);\r\n        this._activeEffect.setFloat(\"_Blob_Intensity_\", this.blobIntensity);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_\", this.blobNearSize);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Size_\", this.blobFarSize);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Distance_\", this.blobNearDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Far_Distance_\", this.blobFarDistance);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_Length_\", this.blobFadeLength);\r\n        this._activeEffect.setFloat(\"_Blob_Inner_Fade_\", this.blobInnerFade);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_\", this.blobPulse);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_\", this.blobFade);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_Max_Size_\", this.blobPulseMaxSize);\r\n\r\n        // \"Blob 2\"\r\n        this._activeEffect.setFloat(\"_Blob_Enable_2_\", this.blobEnable2 ? 1.0 : 0.0);\r\n        this._activeEffect.setVector3(\"_Blob_Position_2_\", this.blobPosition2);\r\n        this._activeEffect.setFloat(\"_Blob_Near_Size_2_\", this.blobNearSize2);\r\n        this._activeEffect.setFloat(\"_Blob_Inner_Fade_2_\", this.blobInnerFade2);\r\n        this._activeEffect.setFloat(\"_Blob_Pulse_2_\", this.blobPulse2);\r\n        this._activeEffect.setFloat(\"_Blob_Fade_2_\", this.blobFade2);\r\n\r\n        // \"Gaze\"\r\n        this._activeEffect.setFloat(\"_Gaze_Intensity_\", this.gazeIntensity);\r\n        this._activeEffect.setFloat(\"_Gaze_Focus_\", this.gazeFocus);\r\n\r\n        // \"Blob Texture\"\r\n        this._activeEffect.setTexture(\"_Blob_Texture_\", this._blobTexture);\r\n\r\n        // \"Selection\"\r\n        this._activeEffect.setFloat(\"_Selection_Fuzz_\", this.selectionFuzz);\r\n        this._activeEffect.setFloat(\"_Selected_\", this.selected);\r\n        this._activeEffect.setFloat(\"_Selection_Fade_\", this.selectionFade);\r\n        this._activeEffect.setFloat(\"_Selection_Fade_Size_\", this.selectionFadeSize);\r\n        this._activeEffect.setFloat(\"_Selected_Distance_\", this.selectedDistance);\r\n        this._activeEffect.setFloat(\"_Selected_Fade_Length_\", this.selectedFadeLength);\r\n\r\n        // \"Proximity\"\r\n        this._activeEffect.setFloat(\"_Proximity_Max_Intensity_\", this.proximityMaxIntensity);\r\n        this._activeEffect.setFloat(\"_Proximity_Far_Distance_\", this.proximityFarDistance);\r\n        this._activeEffect.setFloat(\"_Proximity_Near_Radius_\", this.proximityNearRadius);\r\n        this._activeEffect.setFloat(\"_Proximity_Anisotropy_\", this.proximityAnisotropy);\r\n\r\n        // \"Global\"\r\n        this._activeEffect.setFloat(\"_Use_Global_Left_Index_\", this.useGlobalLeftIndex ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Use_Global_Right_Index_\", this.useGlobalRightIndex ? 1.0 : 0.0);\r\n\r\n        // \"Antialiasing\"\r\n        //define SMOOTH_EDGES true;\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    /**\r\n     * Get the list of animatables in the material.\r\n     * @returns the list of animatables object used in the material\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): MRDLFrontplateMaterial {\r\n        return SerializationHelper.Clone(() => new MRDLFrontplateMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): unknown {\r\n        const serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.MRDLFrontplateMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"MRDLFrontplateMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): MRDLFrontplateMaterial {\r\n        return SerializationHelper.Parse(() => new MRDLFrontplateMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.MRDLFrontplateMaterial\", MRDLFrontplateMaterial);\r\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"mrdlInnerquadPixelShader\";\nconst shader = `uniform vec3 cameraPosition;\rvarying vec2 vUV;\rvarying vec3 vTangent;\runiform vec4 _Color_;\runiform float _Radius_;\runiform bool _Fixed_Radius_;\runiform float _Filter_Width_;\runiform float _Glow_Fraction_;\runiform float _Glow_Max_;\runiform float _Glow_Falloff_;\rfloat FilterStep_Bid194(float edge,float x,float filterWidth)\r{\rfloat dx=max(1.0E-5,fwidth(x)*filterWidth);\rreturn max((x+dx*0.5-max(edge,x-dx*0.5))/dx,0.0);\r}\rvoid Round_Rect_B194(\rfloat Size_X,\rfloat Size_Y,\rfloat Radius,\rvec4 Rect_Color,\rfloat Filter_Width,\rvec2 UV,\rfloat Glow_Fraction,\rfloat Glow_Max,\rfloat Glow_Falloff,\rout vec4 Color)\r{\rvec2 halfSize=vec2(Size_X,Size_Y)*0.5;\rvec2 r=max(min(vec2(Radius,Radius),halfSize),vec2(0.01,0.01));\rvec2 v=abs(UV);\rvec2 nearestp=min(v,halfSize-r);\rvec2 delta=(v-nearestp)/max(vec2(0.01,0.01),r);\rfloat Distance=length(delta);\rfloat insideRect=1.0-FilterStep_Bid194(1.0-Glow_Fraction,Distance,Filter_Width);\rfloat glow=clamp((1.0-Distance)/Glow_Fraction,0.0,1.0);\rglow=pow(glow,Glow_Falloff);\rColor=Rect_Color*max(insideRect,glow*Glow_Max);\r}\rvoid main()\r{\rfloat X_Q192;\rfloat Y_Q192;\rfloat Z_Q192;\rX_Q192=vTangent.x;\rY_Q192=vTangent.y;\rZ_Q192=vTangent.z;\rvec4 Color_Q194;\rRound_Rect_B194(X_Q192,1.0,Y_Q192,_Color_,_Filter_Width_,vUV,_Glow_Fraction_,_Glow_Max_,_Glow_Falloff_,Color_Q194);\rvec4 Out_Color=Color_Q194;\rfloat Clip_Threshold=0.0;\rgl_FragColor=Out_Color;\r}\r`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlInnerquadPixelShader = { name, shader };\n","// Do not edit.\nimport { ShaderStore } from \"core/Engines/shaderStore\";\n\nconst name = \"mrdlInnerquadVertexShader\";\nconst shader = `uniform mat4 world;\runiform mat4 viewProjection;\runiform vec3 cameraPosition;\rattribute vec3 position;\rattribute vec3 normal;\rattribute vec2 uv;\rattribute vec3 tangent;\rattribute vec4 color;\runiform vec4 _Color_;\runiform float _Radius_;\runiform bool _Fixed_Radius_;\runiform float _Filter_Width_;\runiform float _Glow_Fraction_;\runiform float _Glow_Max_;\runiform float _Glow_Falloff_;\rvarying vec2 vUV;\rvarying vec3 vTangent;\rvoid main()\r{\rvec3 Pos_World_Q189;\rPos_World_Q189=(world*vec4(position,1.0)).xyz;\rvec3 Dir_World_Q190;\rDir_World_Q190=(world*vec4(tangent,0.0)).xyz;\rvec3 Dir_World_Q191;\rDir_World_Q191=(world*vec4((cross(normal,tangent)),0.0)).xyz;\rfloat Length_Q180=length(Dir_World_Q190);\rfloat Length_Q181=length(Dir_World_Q191);\rfloat Quotient_Q184=Length_Q180/Length_Q181;\rfloat Quotient_Q195=_Radius_/Length_Q181;\rvec2 Result_Q193;\rResult_Q193=vec2((uv.x-0.5)*Length_Q180/Length_Q181,(uv.y-0.5));\rfloat Result_Q198=_Fixed_Radius_ ? Quotient_Q195 : _Radius_;\rvec3 Vec3_Q183=vec3(Quotient_Q184,Result_Q198,0);\rvec3 Position=Pos_World_Q189;\rvec3 Normal=vec3(0,0,0);\rvec2 UV=Result_Q193;\rvec3 Tangent=Vec3_Q183;\rvec3 Binormal=vec3(0,0,0);\rvec4 Color=color;\rgl_Position=viewProjection*vec4(Position,1);\rvUV=UV;\rvTangent=Tangent;\r}\r`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const mrdlInnerquadVertexShader = { name, shader };\n","import type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\n\r\nimport { Color4 } from \"core/Maths/math.color\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport { MaterialHelper } from \"core/Materials/materialHelper\";\r\nimport { PushMaterial } from \"core/Materials/pushMaterial\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { SerializationHelper, serialize } from \"core/Misc/decorators\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\n\r\nimport \"./shaders/mrdlInnerquad.fragment\";\r\nimport \"./shaders/mrdlInnerquad.vertex\";\r\n\r\nclass MRDLInnerquadMaterialDefines extends MaterialDefines {\r\n    constructor() {\r\n        super();\r\n        this._needNormals = true;\r\n        this._needUVs = true;\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class MRDLInnerquadMaterial extends PushMaterial {\r\n    /**\r\n     * Gets or sets the color of the innerquad.\r\n     */\r\n    @serialize()\r\n    public color: Color4 = new Color4(1, 1, 1, 0.05);\r\n    /**\r\n     * Gets or sets the corner radius on the innerquad. If this value is changed, update the lineWidth to match.\r\n     */\r\n    @serialize()\r\n    public radius = 0.12;\r\n\r\n    /**\r\n     * Gets or sets whether the radius of the innerquad should be fixed.\r\n     */\r\n    @serialize()\r\n    public fixedRadius = true;\r\n\r\n    /** @hidden */\r\n    public _filterWidth = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the glow fraction of the innerquad.\r\n     */\r\n    @serialize()\r\n    public glowFraction = 0.0;\r\n\r\n    /**\r\n     * Gets or sets the maximum glow intensity of the innerquad.\r\n     */\r\n    @serialize()\r\n    public glowMax = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the glow falloff effect of the innerquad.\r\n     */\r\n    @serialize()\r\n    public glowFalloff = 2.0;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n        this.alphaMode = Constants.ALPHA_COMBINE;\r\n        this.backFaceCulling = false;\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh): boolean {\r\n        if (this.isFrozen) {\r\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            subMesh.materialDefines = new MRDLInnerquadMaterialDefines();\r\n        }\r\n\r\n        const defines = <MRDLInnerquadMaterialDefines>subMesh.materialDefines;\r\n        const scene = this.getScene();\r\n\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, false);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (defines.TANGENT) {\r\n                attribs.push(VertexBuffer.TangentKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            const shaderName = \"mrdlInnerquad\";\r\n            const join = defines.toString();\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"worldView\",\r\n                \"worldViewProjection\",\r\n                \"view\",\r\n                \"projection\",\r\n                \"viewProjection\",\r\n                \"cameraPosition\",\r\n                \"_Color_\",\r\n                \"_Radius_\",\r\n                \"_Fixed_Radius_\",\r\n                \"_Filter_Width_\",\r\n                \"_Glow_Fraction_\",\r\n                \"_Glow_Max_\",\r\n                \"_Glow_Falloff_\",\r\n            ];\r\n            const samplers: string[] = [];\r\n            const uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4,\r\n            });\r\n\r\n            subMesh.setEffect(\r\n                scene.getEngine().createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: this.onCompiled,\r\n                        onError: this.onError,\r\n                        indexParameters: { maxSimultaneousLights: 4 },\r\n                    },\r\n                    engine\r\n                ),\r\n                defines\r\n            );\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <MRDLInnerquadMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n        this._activeEffect.setVector3(\"cameraPosition\", scene.activeCamera!.position);\r\n\r\n        // \"Color\"\r\n        this._activeEffect.setDirectColor4(\"_Color_\", this.color);\r\n\r\n        // \"Shape\"\r\n        this._activeEffect.setFloat(\"_Radius_\", this.radius);\r\n        this._activeEffect.setFloat(\"_Fixed_Radius_\", this.fixedRadius ? 1.0 : 0.0);\r\n        this._activeEffect.setFloat(\"_Filter_Width_\", this._filterWidth);\r\n\r\n        // \"Glow\"\r\n        this._activeEffect.setFloat(\"_Glow_Fraction_\", this.glowFraction);\r\n        this._activeEffect.setFloat(\"_Glow_Max_\", this.glowMax);\r\n        this._activeEffect.setFloat(\"_Glow_Falloff_\", this.glowFalloff);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    /**\r\n     * Get the list of animatables in the material.\r\n     * @returns the list of animatables object used in the material\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): MRDLInnerquadMaterial {\r\n        return SerializationHelper.Clone(() => new MRDLInnerquadMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): unknown {\r\n        const serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.MRDLInnerquadMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"MRDLInnerquadMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): MRDLInnerquadMaterial {\r\n        return SerializationHelper.Parse(() => new MRDLInnerquadMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.MRDLInnerquadMaterial\", MRDLInnerquadMaterial);\r\n","import type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { Control3D } from \"../control3D\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { Vector3WithInfo } from \"../../vector3WithInfo\";\r\n\r\nimport { AdvancedDynamicTexture } from \"../../../2D/advancedDynamicTexture\";\r\nimport { Animation } from \"core/Animations/animation\";\r\nimport { AnimationGroup } from \"core/Animations/animationGroup\";\r\nimport { Color3, Color4 } from \"core/Maths/math.color\";\r\nimport { Control } from \"../../../2D/controls/control\";\r\nimport { CreatePlane } from \"core/Meshes/Builders/planeBuilder\";\r\nimport { CreateBox } from \"core/Meshes/Builders/boxBuilder\";\r\nimport { DomManagement } from \"core/Misc/domManagement\";\r\nimport { FadeInOutBehavior } from \"core/Behaviors/Meshes/fadeInOutBehavior\";\r\nimport { Grid } from \"../../../2D/controls/grid\";\r\nimport { Image } from \"../../../2D/controls/image\";\r\nimport { MRDLBackglowMaterial } from \"../../materials/mrdl/mrdlBackglowMaterial\";\r\nimport { MRDLBackplateMaterial } from \"../../materials/mrdl/mrdlBackplateMaterial\";\r\nimport { MRDLFrontplateMaterial } from \"../../materials/mrdl/mrdlFrontplateMaterial\";\r\nimport { MRDLInnerquadMaterial } from \"../../materials/mrdl/mrdlInnerquadMaterial\";\r\nimport { Rectangle } from \"../../../2D/controls/rectangle\";\r\nimport { SceneLoader } from \"core/Loading/sceneLoader\";\r\nimport { StackPanel } from \"../../../2D/controls/stackPanel\";\r\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\r\nimport { TextBlock } from \"../../../2D/controls/textBlock\";\r\nimport { TouchButton3D } from \"../touchButton3D\";\r\nimport { TransformNode } from \"core/Meshes/transformNode\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\n\r\n/**\r\n * Class used to create the mrtkv3 button\r\n */\r\nexport class TouchHolographicButton extends TouchButton3D {\r\n    /**\r\n     * Base Url for the frontplate model.\r\n     */\r\n    public static MRTK_ASSET_BASE_URL = \"https://assets.babylonjs.com/meshes/MRTK/\";\r\n\r\n    /**\r\n     * File name for the frontplate model.\r\n     */\r\n    public static FRONTPLATE_MODEL_FILENAME = \"mrtk-fluent-frontplate.glb\";\r\n\r\n    /**\r\n     * File name for the backplate model.\r\n     */\r\n    public static BACKPLATE_MODEL_FILENAME = \"mrtk-fluent-backplate.glb\";\r\n\r\n    /**\r\n     * File name for the backglow model.\r\n     */\r\n    public static BACKGLOW_MODEL_FILENAME = \"mrtk-fluent-button.glb\";\r\n\r\n    /**\r\n     * File name for the innerquad model.\r\n     */\r\n    public static INNERQUAD_MODEL_FILENAME = \"SlateProximity.glb\";\r\n\r\n    /**\r\n     * Gets or sets the horizontal scaling for the button.\r\n     */\r\n    public width = 1;\r\n\r\n    /**\r\n     * Gets or sets the vertical scaling for the button.\r\n     */\r\n    public height = 1;\r\n\r\n    /**\r\n     * Gets or sets the bevel radius for the button.\r\n     */\r\n    public radius = 0.14;\r\n\r\n    /**\r\n     * Gets or sets the font size of the button text in pixels.\r\n     * This is only adjustable for a button with width to height ratio greater than 1.\r\n     */\r\n    public textSizeInPixels = 18;\r\n\r\n    /**\r\n     * Gets or sets the size of the button image in pixels.\r\n     * This is only adjustable for a button with width to height ratio greater than 1.\r\n     */\r\n    public imageSizeInPixels = 40;\r\n\r\n    /**\r\n     * Gets or sets the color of the button plate.\r\n     */\r\n    public plateMaterialColor = new Color3(0.4, 0.4, 0.4);\r\n\r\n    // Shared variables for meshes\r\n    /**\r\n     * Gets or sets the depth of the button's front plate.\r\n     * This variable determines the z scaling and z position for some of the button's meshes.\r\n     */\r\n    public frontPlateDepth = 0.2;\r\n\r\n    /**\r\n     * Gets or sets the depth of the button's back plate.\r\n     * This variable determines the z scaling and z position for some of the button's meshes.\r\n     */\r\n    public backPlateDepth = 0.04;\r\n\r\n    /**\r\n     * Gets or sets the offset value for button's back glow.\r\n     * This variable determines the x, y scaling of the button's meshes.\r\n     */\r\n    public backGlowOffset = 0.1;\r\n\r\n    /**\r\n     * Gets or sets the value that determines the z scaling and z position for the innerQuad and BackGlow meshes.\r\n     */\r\n    public flatPlaneDepth = 0.001;\r\n\r\n    /**\r\n     * Gets or sets the radius for FrontMaterial and innerQuadMaterial.\r\n     */\r\n    public innerQuadRadius = this.radius - 0.04;\r\n\r\n    /**\r\n     * Gets or sets the color for innerQuadMaterial.\r\n     */\r\n    public innerQuadColor = new Color4(0, 0, 0, 0);\r\n\r\n    /**\r\n     * Gets or sets the color for innerQuadMaterial for when it is toggled.\r\n     */\r\n    public innerQuadToggledColor = new Color4(0.5197843, 0.6485234, 0.9607843, 0.6);\r\n\r\n    /**\r\n     * Gets or sets the color for innerQuadMaterial for when it is hovered.\r\n     */\r\n    public innerQuadHoverColor = new Color4(1, 1, 1, 0.05);\r\n\r\n    /**\r\n     * Gets or sets the color for innerQuadMaterial for when it is toggled and hovered.\r\n     */\r\n    public innerQuadToggledHoverColor = new Color4(0.5197843, 0.6485234, 0.9607843, 1);\r\n\r\n    // Meshes\r\n    private _backPlate: AbstractMesh;\r\n    private _textPlate: Mesh;\r\n    private _frontPlate: AbstractMesh;\r\n    private _backGlow: AbstractMesh;\r\n    private _innerQuad: AbstractMesh;\r\n    private _collisionPlate: AbstractMesh;\r\n    private _frontPlateCollisionMesh: AbstractMesh;\r\n    private _isBackplateVisible = true;\r\n\r\n    // Content\r\n    private _text: string;\r\n    private _subtext: string;\r\n    private _imageUrl: string;\r\n\r\n    // Materials\r\n    private _shareMaterials = true;\r\n    private _frontMaterial: MRDLFrontplateMaterial;\r\n    private _backMaterial: MRDLBackplateMaterial;\r\n    private _backGlowMaterial: MRDLBackglowMaterial;\r\n    private _innerQuadMaterial: MRDLInnerquadMaterial;\r\n    private _plateMaterial: StandardMaterial;\r\n\r\n    // Events\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n    private _pointerClickObserver: Nullable<Observer<Vector3WithInfo>>;\r\n    private _pointerEnterObserver: Nullable<Observer<Control3D>>;\r\n    private _pointerOutObserver: Nullable<Observer<Control3D>>;\r\n    private _toggleObserver: Nullable<Observer<boolean>>;\r\n\r\n    // Tooltip\r\n    private _tooltipFade: Nullable<FadeInOutBehavior>;\r\n    private _tooltipTextBlock: Nullable<TextBlock>;\r\n    private _tooltipTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _tooltipMesh: Nullable<Mesh>;\r\n    private _tooltipHoverObserver: Nullable<Observer<Control3D>>;\r\n    private _tooltipOutObserver: Nullable<Observer<Control3D>>;\r\n\r\n    private _disposeTooltip() {\r\n        this._tooltipFade = null;\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.dispose();\r\n        }\r\n        if (this._tooltipTexture) {\r\n            this._tooltipTexture.dispose();\r\n        }\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.dispose();\r\n        }\r\n        this.onPointerEnterObservable.remove(this._tooltipHoverObserver);\r\n        this.onPointerOutObservable.remove(this._tooltipOutObserver);\r\n    }\r\n\r\n    /**\r\n     * Rendering ground id of all the mesh in the button\r\n     */\r\n    public set renderingGroupId(id: number) {\r\n        this._backPlate.renderingGroupId = id;\r\n        this._textPlate.renderingGroupId = id;\r\n        this._frontPlate.renderingGroupId = id;\r\n        this._backGlow.renderingGroupId = id;\r\n        this._innerQuad.renderingGroupId = id;\r\n\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.renderingGroupId = id;\r\n        }\r\n    }\r\n    public get renderingGroupId(): number {\r\n        return this._backPlate.renderingGroupId;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._backPlate as AbstractMesh;\r\n    }\r\n\r\n    /**\r\n     * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)\r\n     * Set this property after adding the button to the GUI3DManager\r\n     */\r\n    public set tooltipText(text: Nullable<string>) {\r\n        if (!text) {\r\n            this._disposeTooltip();\r\n            return;\r\n        }\r\n        if (!this._tooltipFade) {\r\n            const rightHandedScene = this._backPlate._scene.useRightHandedSystem;\r\n            // Create tooltip with mesh and text\r\n            this._tooltipMesh = CreatePlane(\"\", { size: 1 }, this._backPlate._scene);\r\n            this._tooltipMesh.position = Vector3.Down().scale(0.7).add(Vector3.Forward(rightHandedScene).scale(-0.15));\r\n            this._tooltipMesh.isPickable = false;\r\n            this._tooltipMesh.parent = this._frontPlateCollisionMesh;\r\n\r\n            // Create text texture for the tooltip\r\n            this._tooltipTexture = AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);\r\n            const tooltipBackground = new Rectangle();\r\n            tooltipBackground.height = 0.25;\r\n            tooltipBackground.width = 0.8;\r\n            tooltipBackground.cornerRadius = 25;\r\n            tooltipBackground.color = \"#ffffff\";\r\n            tooltipBackground.thickness = 20;\r\n            tooltipBackground.background = \"#060668\";\r\n            this._tooltipTexture.addControl(tooltipBackground);\r\n\r\n            this._tooltipTextBlock = new TextBlock();\r\n            this._tooltipTextBlock.color = \"white\";\r\n            this._tooltipTextBlock.fontSize = 100;\r\n            this._tooltipTexture.addControl(this._tooltipTextBlock);\r\n\r\n            // Add hover action to tooltip\r\n            this._tooltipFade = new FadeInOutBehavior();\r\n            this._tooltipFade.delay = 500;\r\n            this._tooltipMesh.addBehavior(this._tooltipFade);\r\n            this._tooltipHoverObserver = this.onPointerEnterObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(true);\r\n                }\r\n            });\r\n            this._tooltipOutObserver = this.onPointerOutObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(false);\r\n                }\r\n            });\r\n        }\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.text = text;\r\n        }\r\n    }\r\n\r\n    public get tooltipText() {\r\n        return this._tooltipTextBlock?.text || null;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text for the button\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n\r\n        this._text = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets subtext for a button with larger width\r\n     */\r\n    public get subtext(): string {\r\n        return this._subtext;\r\n    }\r\n\r\n    public set subtext(value: string) {\r\n        if (this._subtext === value) {\r\n            return;\r\n        }\r\n\r\n        this._subtext = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image url for the button\r\n     */\r\n    public get imageUrl(): string {\r\n        return this._imageUrl;\r\n    }\r\n\r\n    public set imageUrl(value: string) {\r\n        if (this._imageUrl === value) {\r\n            return;\r\n        }\r\n\r\n        this._imageUrl = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets the back material used by this button\r\n     */\r\n    public get backMaterial(): MRDLBackplateMaterial {\r\n        return this._backMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the front material used by this button\r\n     */\r\n    public get frontMaterial(): MRDLFrontplateMaterial {\r\n        return this._frontMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the back glow material used by this button\r\n     */\r\n    public get backGlowMaterial(): MRDLBackglowMaterial {\r\n        return this._backGlowMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the inner quad material used by this button\r\n     */\r\n    public get innerQuadMaterial(): MRDLInnerquadMaterial {\r\n        return this._innerQuadMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the plate material used by this button\r\n     */\r\n    public get plateMaterial(): StandardMaterial {\r\n        return this._plateMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this button shares its material with other V3 Buttons\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Sets whether the backplate is visible or hidden. Hiding the backplate is not recommended without some sort of replacement\r\n     */\r\n    public set isBackplateVisible(isVisible: boolean) {\r\n        if (this.mesh && this._backMaterial) {\r\n            if (isVisible && !this._isBackplateVisible) {\r\n                this._backPlate.visibility = 1;\r\n            } else if (!isVisible && this._isBackplateVisible) {\r\n                this._backPlate.visibility = 0;\r\n            }\r\n        }\r\n\r\n        this._isBackplateVisible = isVisible;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     * @param shareMaterials\r\n     */\r\n    constructor(name?: string, shareMaterials = true) {\r\n        super(name);\r\n\r\n        this._shareMaterials = shareMaterials;\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            if (this._frontPlate && this._textPlate && !this.isToggleButton) {\r\n                this._performEnterExitAnimation(1);\r\n            }\r\n\r\n            if (this.isToggleButton && this._innerQuadMaterial) {\r\n                if (this.isToggled) {\r\n                    this._innerQuadMaterial.color = this.innerQuadToggledHoverColor;\r\n                } else {\r\n                    this._innerQuadMaterial.color = this.innerQuadHoverColor;\r\n                }\r\n            }\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (this._frontPlate && this._textPlate && !this.isToggleButton) {\r\n                this._performEnterExitAnimation(-0.8);\r\n            }\r\n\r\n            if (this.isToggleButton && this._innerQuadMaterial) {\r\n                this._onToggle(this.isToggled);\r\n            }\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            // Do nothing\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            // Do nothing\r\n        };\r\n\r\n        this._pointerClickObserver = this.onPointerClickObservable.add(() => {\r\n            if (this._frontPlate && this._backGlow && !this.isActiveNearInteraction) {\r\n                this._performClickAnimation();\r\n            }\r\n\r\n            if (this.isToggleButton && this._innerQuadMaterial) {\r\n                this._onToggle(this.isToggled);\r\n            }\r\n        });\r\n\r\n        this._pointerEnterObserver = this.onPointerEnterObservable.add(() => {\r\n            this.pointerEnterAnimation();\r\n        });\r\n\r\n        this._pointerOutObserver = this.onPointerOutObservable.add(() => {\r\n            this.pointerOutAnimation();\r\n        });\r\n\r\n        this._toggleObserver = this.onToggleObservable.add((isToggled) => {\r\n            if (isToggled) {\r\n                this._innerQuadMaterial.color = this.innerQuadToggledColor;\r\n            } else {\r\n                this._innerQuadMaterial.color = this.innerQuadColor;\r\n            }\r\n        });\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TouchHolographicButton\";\r\n    }\r\n\r\n    private _rebuildContent(): void {\r\n        let content: Control;\r\n\r\n        if (this._getAspectRatio() <= 1) {\r\n            // align text and image vertically\r\n            content = this._alignContentVertically();\r\n        } else {\r\n            // align text and image horizontally\r\n            content = this._alignContentHorizontally();\r\n        }\r\n\r\n        this.content = content;\r\n    }\r\n\r\n    private _getAspectRatio() {\r\n        return this.width / this.height;\r\n    }\r\n\r\n    private _alignContentVertically() {\r\n        const panel = new StackPanel();\r\n        panel.isVertical = true;\r\n\r\n        if (DomManagement.IsDocumentAvailable() && !!document.createElement) {\r\n            if (this._imageUrl) {\r\n                const image = new Image();\r\n                image.source = this._imageUrl;\r\n                image.heightInPixels = 180;\r\n                image.widthInPixels = 100;\r\n                image.paddingTopInPixels = 40;\r\n                image.paddingBottomInPixels = 40;\r\n                panel.addControl(image);\r\n            }\r\n        }\r\n\r\n        if (this._text) {\r\n            const text = new TextBlock();\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.heightInPixels = 30;\r\n            text.fontSize = 24;\r\n            panel.addControl(text);\r\n        }\r\n\r\n        return panel;\r\n    }\r\n\r\n    private _alignContentHorizontally() {\r\n        let totalPanelWidthInPixels = 240;\r\n        const padding = 15;\r\n\r\n        const contentContainer = new Rectangle();\r\n        contentContainer.widthInPixels = totalPanelWidthInPixels;\r\n        contentContainer.heightInPixels = totalPanelWidthInPixels;\r\n        contentContainer.color = \"transparent\";\r\n        contentContainer.setPaddingInPixels(padding, padding, padding, padding);\r\n        totalPanelWidthInPixels -= padding * 2;\r\n\r\n        const panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.scaleY = this._getAspectRatio();\r\n\r\n        if (DomManagement.IsDocumentAvailable() && !!document.createElement) {\r\n            if (this._imageUrl) {\r\n                const imageContainer = new Rectangle(`${this.name}_image`);\r\n                imageContainer.widthInPixels = this.imageSizeInPixels;\r\n                imageContainer.heightInPixels = this.imageSizeInPixels;\r\n                imageContainer.color = \"transparent\";\r\n                totalPanelWidthInPixels -= this.imageSizeInPixels;\r\n\r\n                const image = new Image();\r\n                image.source = this._imageUrl;\r\n\r\n                imageContainer.addControl(image);\r\n                panel.addControl(imageContainer);\r\n            }\r\n        }\r\n\r\n        if (this._text) {\r\n            const text = new TextBlock(`${this.name}_text`);\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.fontSize = this.textSizeInPixels;\r\n            text.widthInPixels = totalPanelWidthInPixels;\r\n\r\n            if (this._imageUrl) {\r\n                text.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n                text.paddingLeftInPixels = padding;\r\n            }\r\n\r\n            if (this._subtext) {\r\n                const textContainer = new Grid();\r\n                textContainer.addColumnDefinition(1);\r\n                textContainer.addRowDefinition(0.5);\r\n                textContainer.addRowDefinition(0.5);\r\n                textContainer.widthInPixels = totalPanelWidthInPixels;\r\n                textContainer.heightInPixels = 45;\r\n\r\n                const subtext = new TextBlock(`${this.name}_subtext`);\r\n                subtext.text = this._subtext;\r\n                subtext.color = \"#EEEEEEAB\";\r\n                subtext.fontSize = this.textSizeInPixels * 0.75;\r\n                subtext.fontWeight = \"600\";\r\n\r\n                if (this._imageUrl) {\r\n                    subtext.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n                    subtext.paddingLeftInPixels = padding;\r\n                }\r\n\r\n                textContainer.addControl(text, 0);\r\n                textContainer.addControl(subtext, 1);\r\n                panel.addControl(textContainer);\r\n            } else {\r\n                panel.addControl(text);\r\n            }\r\n        }\r\n\r\n        contentContainer.addControl(panel);\r\n        return contentContainer;\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this.name = this.name ?? \"TouchHolographicButton\";\r\n\r\n        const backPlateMesh = this._createBackPlate(scene);\r\n        const collisionMesh = this._createFrontPlate(scene);\r\n        const innerQuadMesh = this._createInnerQuad(scene);\r\n        const backGlowMesh = this._createBackGlow(scene);\r\n\r\n        this._frontPlateCollisionMesh = collisionMesh;\r\n        this._textPlate = <Mesh>super._createNode(scene);\r\n        this._textPlate.name = `${this.name}_textPlate`;\r\n        this._textPlate.isPickable = false;\r\n        this._textPlate.scaling.x = this.width;\r\n        this._textPlate.parent = collisionMesh;\r\n\r\n        this._backPlate = backPlateMesh;\r\n        this._backPlate.position = Vector3.Forward(scene.useRightHandedSystem).scale(this.backPlateDepth / 2);\r\n        this._backPlate.isPickable = false;\r\n\r\n        this._backPlate.addChild(collisionMesh);\r\n        this._backPlate.addChild(innerQuadMesh);\r\n\r\n        if (backGlowMesh) {\r\n            this._backPlate.addChild(backGlowMesh);\r\n        }\r\n\r\n        const tn = new TransformNode(`${this.name}_root`, scene);\r\n        this._backPlate.setParent(tn);\r\n\r\n        this.collisionMesh = collisionMesh;\r\n        this.collidableFrontDirection = this._backPlate.forward.negate(); // Mesh is facing the wrong way\r\n\r\n        return tn;\r\n    }\r\n\r\n    private _createBackPlate(scene: Scene) {\r\n        const backPlateMesh = CreateBox(`${this.name}_backPlate`, {}, scene);\r\n        backPlateMesh.isPickable = false;\r\n        backPlateMesh.visibility = 0;\r\n        backPlateMesh.scaling.z = 0.2;\r\n\r\n        SceneLoader.ImportMeshAsync(undefined, TouchHolographicButton.MRTK_ASSET_BASE_URL, TouchHolographicButton.BACKPLATE_MODEL_FILENAME, scene).then((result) => {\r\n            const backPlateModel = result.meshes[1];\r\n            backPlateModel.visibility = 0;\r\n\r\n            if (this._isBackplateVisible) {\r\n                backPlateModel.visibility = 1;\r\n                backPlateModel.name = `${this.name}_backPlate`;\r\n                backPlateModel.isPickable = false;\r\n                backPlateModel.scaling.x = this.width;\r\n                backPlateModel.scaling.y = this.height;\r\n                backPlateModel.parent = backPlateMesh;\r\n            }\r\n\r\n            if (this._backMaterial) {\r\n                backPlateModel.material = this._backMaterial;\r\n            }\r\n\r\n            this._backPlate = backPlateModel;\r\n        });\r\n\r\n        return backPlateMesh;\r\n    }\r\n\r\n    private _createFrontPlate(scene: Scene) {\r\n        const collisionMesh = CreateBox(\r\n            `${this.name}_frontPlate`,\r\n            {\r\n                width: this.width,\r\n                height: this.height,\r\n                depth: this.frontPlateDepth,\r\n            },\r\n            scene\r\n        );\r\n        collisionMesh.isPickable = true;\r\n        collisionMesh.isNearPickable = true;\r\n        collisionMesh.visibility = 0;\r\n        collisionMesh.position = Vector3.Forward(scene.useRightHandedSystem).scale((this.backPlateDepth - this.frontPlateDepth) / 2);\r\n\r\n        SceneLoader.ImportMeshAsync(undefined, TouchHolographicButton.MRTK_ASSET_BASE_URL, TouchHolographicButton.FRONTPLATE_MODEL_FILENAME, scene).then((result) => {\r\n            const collisionPlate = CreateBox(\r\n                `${this.name}_collisionPlate`,\r\n                {\r\n                    width: this.width,\r\n                    height: this.height,\r\n                },\r\n                scene\r\n            );\r\n            collisionPlate.isPickable = false;\r\n            collisionPlate.scaling.z = this.frontPlateDepth;\r\n            collisionPlate.visibility = 0;\r\n            collisionPlate.parent = collisionMesh;\r\n            this._collisionPlate = collisionPlate;\r\n\r\n            const frontPlateModel = result.meshes[1];\r\n            frontPlateModel.name = `${this.name}_frontPlate`;\r\n            frontPlateModel.isPickable = false;\r\n            frontPlateModel.scaling.x = this.width - this.backGlowOffset;\r\n            frontPlateModel.scaling.y = this.height - this.backGlowOffset;\r\n            frontPlateModel.position = Vector3.Forward(scene.useRightHandedSystem).scale(-0.5);\r\n            frontPlateModel.parent = collisionPlate;\r\n\r\n            if (this.isToggleButton) {\r\n                frontPlateModel.visibility = 0;\r\n            }\r\n\r\n            if (this._frontMaterial) {\r\n                frontPlateModel.material = this._frontMaterial;\r\n            }\r\n\r\n            this._textPlate.scaling.x = 1;\r\n            this._textPlate.parent = frontPlateModel;\r\n            this._frontPlate = frontPlateModel;\r\n        });\r\n\r\n        return collisionMesh;\r\n    }\r\n\r\n    private _createInnerQuad(scene: Scene) {\r\n        const innerQuadMesh = CreateBox(`${this.name}_innerQuad`, {}, scene);\r\n        innerQuadMesh.isPickable = false;\r\n        innerQuadMesh.visibility = 0;\r\n        innerQuadMesh.scaling.z = this.flatPlaneDepth;\r\n        innerQuadMesh.position.z += this.backPlateDepth / 2 - this.flatPlaneDepth;\r\n\r\n        SceneLoader.ImportMeshAsync(undefined, TouchHolographicButton.MRTK_ASSET_BASE_URL, TouchHolographicButton.INNERQUAD_MODEL_FILENAME, scene).then((result) => {\r\n            const innerQuadModel = result.meshes[1];\r\n            innerQuadModel.name = `${this.name}_innerQuad`;\r\n            innerQuadModel.isPickable = false;\r\n            innerQuadModel.scaling.x = this.width - this.backGlowOffset;\r\n            innerQuadModel.scaling.y = this.height - this.backGlowOffset;\r\n            innerQuadModel.parent = innerQuadMesh;\r\n\r\n            if (this._innerQuadMaterial) {\r\n                innerQuadModel.material = this._innerQuadMaterial;\r\n            }\r\n\r\n            this._innerQuad = innerQuadModel;\r\n        });\r\n\r\n        return innerQuadMesh;\r\n    }\r\n\r\n    private _createBackGlow(scene: Scene) {\r\n        if (this.isToggleButton) {\r\n            return;\r\n        }\r\n\r\n        const backGlowMesh = CreateBox(`${this.name}_backGlow`, {}, scene);\r\n        backGlowMesh.isPickable = false;\r\n        backGlowMesh.visibility = 0;\r\n        backGlowMesh.scaling.z = this.flatPlaneDepth;\r\n        backGlowMesh.position.z += this.backPlateDepth / 2 - this.flatPlaneDepth * 2;\r\n\r\n        SceneLoader.ImportMeshAsync(undefined, TouchHolographicButton.MRTK_ASSET_BASE_URL, TouchHolographicButton.BACKGLOW_MODEL_FILENAME, scene).then((result) => {\r\n            const backGlowModel = result.meshes[1];\r\n            backGlowModel.name = `${this.name}_backGlow`;\r\n            backGlowModel.isPickable = false;\r\n            backGlowModel.scaling.x = this.width - this.backGlowOffset;\r\n            backGlowModel.scaling.y = this.height - this.backGlowOffset;\r\n            backGlowModel.parent = backGlowMesh;\r\n\r\n            if (this._backGlowMaterial) {\r\n                backGlowModel.material = this._backGlowMaterial;\r\n            }\r\n\r\n            this._backGlow = backGlowModel;\r\n        });\r\n\r\n        return backGlowMesh;\r\n    }\r\n\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._plateMaterial.emissiveTexture = facadeTexture;\r\n        this._plateMaterial.opacityTexture = facadeTexture;\r\n        this._plateMaterial.diffuseColor = this.plateMaterialColor;\r\n    }\r\n\r\n    private _performClickAnimation() {\r\n        const frameRate = 60;\r\n        const animationGroup = new AnimationGroup(\"Click Animation Group\");\r\n\r\n        const animations = [\r\n            {\r\n                name: \"backGlowMotion\",\r\n                mesh: this._backGlow,\r\n                property: \"material.motion\",\r\n                keys: [\r\n                    {\r\n                        frame: 0,\r\n                        values: [0, 0, 0],\r\n                    },\r\n                    {\r\n                        frame: 20,\r\n                        values: [1, 0.0144, 0.0144],\r\n                    },\r\n                    {\r\n                        frame: 40,\r\n                        values: [0.0027713229489760476, 0, 0],\r\n                    },\r\n                    {\r\n                        frame: 45,\r\n                        values: [0.0027713229489760476],\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                name: \"_collisionPlateZSlide\",\r\n                mesh: this._collisionPlate,\r\n                property: \"position.z\",\r\n                keys: [\r\n                    {\r\n                        frame: 0,\r\n                        values: [0.0, 0.0, 0.0],\r\n                    },\r\n                    {\r\n                        frame: 20,\r\n                        values: [Vector3.Forward(this._collisionPlate._scene.useRightHandedSystem).scale(this.frontPlateDepth / 2).z, 0.0, 0.0],\r\n                    },\r\n                    {\r\n                        frame: 40,\r\n                        values: [0.0, 0.005403332496794331],\r\n                    },\r\n                    {\r\n                        frame: 45,\r\n                        values: [0.0],\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                name: \"_collisionPlateZScale\",\r\n                mesh: this._collisionPlate,\r\n                property: \"scaling.z\",\r\n                keys: [\r\n                    {\r\n                        frame: 0,\r\n                        values: [this.frontPlateDepth, 0.0, 0.0],\r\n                    },\r\n                    {\r\n                        frame: 20,\r\n                        values: [this.backPlateDepth, 0.0, 0.0],\r\n                    },\r\n                    {\r\n                        frame: 40,\r\n                        values: [this.frontPlateDepth, 0.0054],\r\n                    },\r\n                    {\r\n                        frame: 45,\r\n                        values: [this.frontPlateDepth],\r\n                    },\r\n                ],\r\n            },\r\n        ];\r\n\r\n        for (const animation of animations) {\r\n            const anim = new Animation(animation.name, animation.property, frameRate, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CYCLE);\r\n            const animkeyFrames = [];\r\n\r\n            for (const key of animation.keys) {\r\n                animkeyFrames.push({\r\n                    frame: key.frame,\r\n                    value: key.values[0],\r\n                    inTangent: key.values[1],\r\n                    outTangent: key.values[2],\r\n                    interpolation: key.values[3],\r\n                });\r\n            }\r\n\r\n            anim.setKeys(animkeyFrames);\r\n\r\n            if (!animation.mesh) {\r\n                continue;\r\n            }\r\n\r\n            animationGroup.addTargetedAnimation(anim, animation.mesh);\r\n        }\r\n\r\n        animationGroup.normalize(0, 45);\r\n        animationGroup.speedRatio = 1;\r\n\r\n        animationGroup.play();\r\n    }\r\n\r\n    private _performEnterExitAnimation(speedRatio: number) {\r\n        const frameRate = 60;\r\n        const animationGroup = new AnimationGroup(\"Enter Exit Animation Group\");\r\n\r\n        const animations = [\r\n            {\r\n                name: \"frontPlateFadeOut\",\r\n                mesh: this._frontPlate,\r\n                property: \"material.fadeOut\",\r\n                keys: [\r\n                    {\r\n                        frame: 0,\r\n                        values: [0, 0, 0.025045314830017686, 0],\r\n                    },\r\n                    {\r\n                        frame: 40,\r\n                        values: [1.00205599570012, 0.025045314830017686, 0, 0],\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                name: \"textPlateZSlide\",\r\n                mesh: this._textPlate,\r\n                property: \"position.z\",\r\n                keys: [\r\n                    {\r\n                        frame: 0,\r\n                        values: [0, 0.0, 0.0],\r\n                    },\r\n                    {\r\n                        frame: 40,\r\n                        values: [Vector3.Forward(this._textPlate._scene.useRightHandedSystem).scale(-0.15).z, 0.0, 0.0],\r\n                    },\r\n                ],\r\n            },\r\n        ];\r\n\r\n        for (const animation of animations) {\r\n            const anim = new Animation(animation.name, animation.property, frameRate, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CYCLE);\r\n            const animkeyFrames = [];\r\n\r\n            for (const key of animation.keys) {\r\n                animkeyFrames.push({\r\n                    frame: key.frame,\r\n                    value: key.values[0],\r\n                    inTangent: key.values[1],\r\n                    outTangent: key.values[2],\r\n                    interpolation: key.values[3],\r\n                });\r\n            }\r\n\r\n            anim.setKeys(animkeyFrames);\r\n\r\n            if (!animation.mesh) {\r\n                continue;\r\n            }\r\n\r\n            animationGroup.addTargetedAnimation(anim, animation.mesh);\r\n        }\r\n\r\n        animationGroup.normalize(0, 45);\r\n        animationGroup.speedRatio = speedRatio;\r\n\r\n        animationGroup.play();\r\n    }\r\n\r\n    private _createBackMaterial(mesh: Mesh) {\r\n        this._backMaterial = this._backMaterial ?? new MRDLBackplateMaterial(this.name + \"backPlateMaterial\", mesh.getScene());\r\n        this._backMaterial.absoluteSizes = true;\r\n        this._backMaterial.radius = this.radius;\r\n        this._backMaterial.lineWidth = 0.02;\r\n    }\r\n\r\n    private _createFrontMaterial(mesh: Mesh) {\r\n        this._frontMaterial = this._frontMaterial ?? new MRDLFrontplateMaterial(this.name + \"Front Material\", mesh.getScene());\r\n        this.frontMaterial.radius = this.innerQuadRadius;\r\n        this.frontMaterial.fadeOut = 0.0;\r\n    }\r\n\r\n    private _createBackGlowMaterial(mesh: Mesh) {\r\n        const glowRadius = this.radius + 0.04;\r\n        this._backGlowMaterial = this._backGlowMaterial ?? new MRDLBackglowMaterial(this.name + \"Back Glow Material\", mesh.getScene());\r\n        this._backGlowMaterial.bevelRadius = glowRadius;\r\n        this._backGlowMaterial.lineWidth = glowRadius;\r\n        this._backGlowMaterial.motion = 0.0;\r\n    }\r\n\r\n    private _createInnerQuadMaterial(mesh: Mesh) {\r\n        this._innerQuadMaterial = this._innerQuadMaterial ?? new MRDLInnerquadMaterial(\"inner_quad\", mesh.getScene());\r\n        this._innerQuadMaterial.radius = this.innerQuadRadius;\r\n\r\n        if (this.isToggleButton) {\r\n            this._innerQuadMaterial.color = this.innerQuadColor;\r\n        }\r\n    }\r\n\r\n    private _createPlateMaterial(mesh: Mesh) {\r\n        this._plateMaterial = this._plateMaterial ?? new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\r\n        this._plateMaterial.specularColor = Color3.Black();\r\n    }\r\n\r\n    protected _onToggle(newState: boolean) {\r\n        super._onToggle(newState);\r\n    }\r\n\r\n    protected _affectMaterial(mesh: Mesh) {\r\n        if (this._shareMaterials) {\r\n            // Back\r\n            if (!this._host._touchSharedMaterials[\"mrdlBackplateMaterial\"]) {\r\n                this._createBackMaterial(mesh);\r\n                this._host._touchSharedMaterials[\"mrdlBackplateMaterial\"] = this._backMaterial;\r\n            } else {\r\n                this._backMaterial = this._host._touchSharedMaterials[\"mrdlBackplateMaterial\"] as MRDLBackplateMaterial;\r\n            }\r\n\r\n            // Front\r\n            if (!this._host._touchSharedMaterials[\"mrdlFrontplateMaterial\"]) {\r\n                this._createFrontMaterial(mesh);\r\n                this._host._touchSharedMaterials[\"mrdlFrontplateMaterial\"] = this._frontMaterial;\r\n            } else {\r\n                this._frontMaterial = this._host._touchSharedMaterials[\"mrdlFrontplateMaterial\"] as MRDLFrontplateMaterial;\r\n            }\r\n\r\n            // Back glow\r\n            if (!this._host._touchSharedMaterials[\"mrdlBackglowMaterial\"]) {\r\n                this._createBackGlowMaterial(mesh);\r\n                this._host._touchSharedMaterials[\"mrdlBackglowMaterial\"] = this._backGlowMaterial;\r\n            } else {\r\n                this._backGlowMaterial = this._host._touchSharedMaterials[\"mrdlBackglowMaterial\"] as MRDLBackglowMaterial;\r\n            }\r\n\r\n            // Inner quad\r\n            if (!this._host._touchSharedMaterials[\"mrdlInnerQuadMaterial\"]) {\r\n                this._createInnerQuadMaterial(mesh);\r\n                this._host._touchSharedMaterials[\"mrdlInnerQuadMaterial\"] = this._innerQuadMaterial;\r\n            } else {\r\n                this._innerQuadMaterial = this._host._touchSharedMaterials[\"mrdlInnerQuadMaterial\"] as MRDLInnerquadMaterial;\r\n            }\r\n        } else {\r\n            this._createBackMaterial(mesh);\r\n            this._createFrontMaterial(mesh);\r\n            this._createBackGlowMaterial(mesh);\r\n            this._createInnerQuadMaterial(mesh);\r\n        }\r\n\r\n        this._createPlateMaterial(mesh);\r\n        this._backPlate.material = this._backMaterial;\r\n        this._textPlate.material = this._plateMaterial;\r\n\r\n        if (!this._isBackplateVisible) {\r\n            this._backPlate.visibility = 0;\r\n        }\r\n\r\n        if (this._frontPlate) {\r\n            this._frontPlate.material = this._frontMaterial;\r\n        }\r\n\r\n        if (this._backGlow) {\r\n            this._backGlow.material = this._backGlowMaterial;\r\n        }\r\n\r\n        if (this._innerQuad) {\r\n            this._innerQuad.material = this._innerQuadMaterial;\r\n        }\r\n\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        this._disposeTooltip();\r\n        this.onPointerClickObservable.remove(this._pointerClickObserver);\r\n        this.onPointerEnterObservable.remove(this._pointerEnterObserver);\r\n        this.onPointerOutObservable.remove(this._pointerOutObserver);\r\n        this.onToggleObservable.remove(this._toggleObserver);\r\n\r\n        if (!this.shareMaterials) {\r\n            this._backMaterial.dispose();\r\n            this._frontMaterial.dispose();\r\n            this._plateMaterial.dispose();\r\n            this._backGlowMaterial.dispose();\r\n            this._innerQuadMaterial.dispose();\r\n\r\n            if (this._pickedPointObserver) {\r\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n                this._pickedPointObserver = null;\r\n            }\r\n        }\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport type { PointerInfo } from \"core/Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"core/Events/pointerEvents\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { HemisphericLight } from \"core/Lights/hemisphericLight\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { UtilityLayerRenderer } from \"core/Rendering/utilityLayerRenderer\";\r\nimport { EngineStore } from \"core/Engines/engineStore\";\r\nimport type { IDisposable, Scene } from \"core/scene\";\r\n\r\nimport { Container3D } from \"./controls/container3D\";\r\nimport type { Control3D } from \"./controls/control3D\";\r\nimport type { IPointerEvent } from \"core/Events/deviceInputEvents\";\r\n\r\n/**\r\n * Class used to manage 3D user interface\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui3D\r\n */\r\nexport class GUI3DManager implements IDisposable {\r\n    private _scene: Scene;\r\n    private _sceneDisposeObserver: Nullable<Observer<Scene>>;\r\n    private _utilityLayer: Nullable<UtilityLayerRenderer>;\r\n    private _rootContainer: Container3D;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _pointerOutObserver: Nullable<Observer<number>>;\r\n    private _customControlScaling = 1.0;\r\n    /** @internal */\r\n    public _lastPickedControl: Control3D;\r\n    /** @internal */\r\n    public _lastControlOver: { [pointerId: number]: Control3D } = {};\r\n    /** @internal */\r\n    public _lastControlDown: { [pointerId: number]: Control3D } = {};\r\n\r\n    protected static MRTK_REALISTIC_SCALING: number = 0.032;\r\n\r\n    /**\r\n     * Observable raised when the point picked by the pointer events changed\r\n     */\r\n    public onPickedPointChangedObservable = new Observable<Nullable<Vector3>>();\r\n\r\n    /**\r\n     * Observable raised when a picking happens\r\n     */\r\n    public onPickingObservable = new Observable<Nullable<AbstractMesh>>();\r\n\r\n    // Shared resources\r\n    /** @internal */\r\n    public _sharedMaterials: { [key: string]: Material } = {};\r\n\r\n    /** @internal */\r\n    public _touchSharedMaterials: { [key: string]: Material } = {};\r\n\r\n    /** Gets the hosting scene */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /** Gets associated utility layer */\r\n    public get utilityLayer(): Nullable<UtilityLayerRenderer> {\r\n        return this._utilityLayer;\r\n    }\r\n\r\n    /** Gets the scaling for all UI elements owned by this manager */\r\n    public get controlScaling() {\r\n        return this._customControlScaling;\r\n    }\r\n\r\n    /** Sets the scaling adjustment for all UI elements owned by this manager */\r\n    public set controlScaling(newScale: number) {\r\n        if (this._customControlScaling !== newScale && newScale > 0) {\r\n            const scaleRatio = newScale / this._customControlScaling;\r\n            this._customControlScaling = newScale;\r\n\r\n            this._rootContainer.children.forEach((control: Control3D) => {\r\n                control.scaling.scaleInPlace(scaleRatio);\r\n\r\n                if (newScale !== 1) {\r\n                    control._isScaledByManager = true;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /** Gets if controls attached to this manager are realistically sized, based on the fact that 1 unit length is 1 meter */\r\n    public get useRealisticScaling() {\r\n        return this.controlScaling === GUI3DManager.MRTK_REALISTIC_SCALING;\r\n    }\r\n\r\n    /** Sets if controls attached to this manager are realistically sized, based on the fact that 1 unit length is 1 meter */\r\n    public set useRealisticScaling(newValue: boolean) {\r\n        this.controlScaling = newValue ? GUI3DManager.MRTK_REALISTIC_SCALING : 1;\r\n    }\r\n\r\n    /**\r\n     * Creates a new GUI3DManager\r\n     * @param scene\r\n     */\r\n    public constructor(scene?: Scene) {\r\n        this._scene = scene || EngineStore.LastCreatedScene!;\r\n        this._sceneDisposeObserver = this._scene.onDisposeObservable.add(() => {\r\n            this._sceneDisposeObserver = null;\r\n            this._utilityLayer = null;\r\n            this.dispose();\r\n        });\r\n\r\n        this._utilityLayer = UtilityLayerRenderer._CreateDefaultUtilityLayerFromScene(this._scene);\r\n        this._utilityLayer.onlyCheckPointerDownEvents = false;\r\n        this._utilityLayer.pickUtilitySceneFirst = false;\r\n        this._utilityLayer.mainSceneTrackerPredicate = (mesh: Nullable<AbstractMesh>) => {\r\n            return mesh && mesh.reservedDataStore?.GUI3D?.control?._node;\r\n        };\r\n\r\n        // Root\r\n        this._rootContainer = new Container3D(\"RootContainer\");\r\n        this._rootContainer._host = this;\r\n        const utilityLayerScene = this._utilityLayer.utilityLayerScene;\r\n\r\n        // Events\r\n        this._pointerOutObserver = this._utilityLayer.onPointerOutObservable.add((pointerId) => {\r\n            this._handlePointerOut(pointerId, true);\r\n        });\r\n\r\n        this._pointerObserver = utilityLayerScene.onPointerObservable.add((pi) => {\r\n            this._doPicking(pi);\r\n        });\r\n\r\n        // Scene\r\n        this._utilityLayer.utilityLayerScene.autoClear = false;\r\n        this._utilityLayer.utilityLayerScene.autoClearDepthAndStencil = false;\r\n        new HemisphericLight(\"hemi\", Vector3.Up(), this._utilityLayer.utilityLayerScene);\r\n    }\r\n\r\n    private _handlePointerOut(pointerId: number, isPointerUp: boolean) {\r\n        const previousControlOver = this._lastControlOver[pointerId];\r\n        if (previousControlOver) {\r\n            previousControlOver._onPointerOut(previousControlOver);\r\n            delete this._lastControlOver[pointerId];\r\n        }\r\n\r\n        if (isPointerUp) {\r\n            if (this._lastControlDown[pointerId]) {\r\n                this._lastControlDown[pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerId];\r\n            }\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.notifyObservers(null);\r\n    }\r\n\r\n    private _doPicking(pi: PointerInfo): boolean {\r\n        if (!this._utilityLayer || !this._utilityLayer.shouldRender || !this._utilityLayer.utilityLayerScene.activeCamera) {\r\n            return false;\r\n        }\r\n\r\n        const pointerEvent = <IPointerEvent>pi.event;\r\n\r\n        const pointerId = pointerEvent.pointerId || 0;\r\n        const buttonIndex = pointerEvent.button;\r\n\r\n        const pickingInfo = pi.pickInfo;\r\n        if (pickingInfo) {\r\n            this.onPickingObservable.notifyObservers(pickingInfo.pickedMesh);\r\n        }\r\n\r\n        if (!pickingInfo || !pickingInfo.hit) {\r\n            this._handlePointerOut(pointerId, pi.type === PointerEventTypes.POINTERUP);\r\n            return false;\r\n        }\r\n\r\n        if (pickingInfo.pickedPoint) {\r\n            this.onPickedPointChangedObservable.notifyObservers(pickingInfo.pickedPoint);\r\n        }\r\n\r\n        const control = <Control3D>pickingInfo.pickedMesh!.reservedDataStore?.GUI3D?.control;\r\n        if (!!control && !control._processObservables(pi.type, pickingInfo.pickedPoint!, pickingInfo.originMesh?.position || null, pointerId, buttonIndex)) {\r\n            if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        if (pi.type === PointerEventTypes.POINTERUP) {\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerEvent.pointerId];\r\n            }\r\n\r\n            if (pointerEvent.pointerType === \"touch\") {\r\n                this._handlePointerOut(pointerId, false);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container\r\n     */\r\n    public get rootContainer(): Container3D {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the root child list\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the root child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._rootContainer.containsControl(control);\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the root child list\r\n     * @param control defines the control to add\r\n     * @returns the current manager\r\n     */\r\n    public addControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.addControl(control);\r\n        if (this._customControlScaling !== 1) {\r\n            control.scaling.scaleInPlace(this._customControlScaling);\r\n            control._isScaledByManager = true;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root child list\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.removeControl(control);\r\n        if (control._isScaledByManager) {\r\n            control.scaling.scaleInPlace(1 / this._customControlScaling);\r\n            control._isScaledByManager = false;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this._rootContainer.dispose();\r\n\r\n        for (const materialName in this._sharedMaterials) {\r\n            if (!Object.prototype.hasOwnProperty.call(this._sharedMaterials, materialName)) {\r\n                continue;\r\n            }\r\n\r\n            this._sharedMaterials[materialName].dispose();\r\n        }\r\n\r\n        this._sharedMaterials = {};\r\n\r\n        for (const materialName in this._touchSharedMaterials) {\r\n            if (!Object.prototype.hasOwnProperty.call(this._touchSharedMaterials, materialName)) {\r\n                continue;\r\n            }\r\n\r\n            this._touchSharedMaterials[materialName].dispose();\r\n        }\r\n\r\n        this._touchSharedMaterials = {};\r\n\r\n        if (this._pointerOutObserver && this._utilityLayer) {\r\n            this._utilityLayer.onPointerOutObservable.remove(this._pointerOutObserver);\r\n            this._pointerOutObserver = null;\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.clear();\r\n        this.onPickingObservable.clear();\r\n\r\n        const utilityLayerScene = this._utilityLayer ? this._utilityLayer.utilityLayerScene : null;\r\n\r\n        if (utilityLayerScene) {\r\n            if (this._pointerObserver) {\r\n                utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n                this._pointerObserver = null;\r\n            }\r\n        }\r\n        if (this._scene) {\r\n            if (this._sceneDisposeObserver) {\r\n                this._scene.onDisposeObservable.remove(this._sceneDisposeObserver);\r\n                this._sceneDisposeObserver = null;\r\n            }\r\n        }\r\n\r\n        if (this._utilityLayer) {\r\n            this._utilityLayer.dispose();\r\n        }\r\n    }\r\n}\r\n","/* eslint-disable import/no-internal-modules */\nimport * as GUI from \"../index\";\n/**\n * Legacy support, defining window.BABYLON.GUI (global variable).\n *\n * This is the entry point for the UMD module.\n * The entry point for a future ESM package should be index.ts\n */\nconst globalObject = typeof global !== \"undefined\" ? global : typeof window !== \"undefined\" ? window : undefined;\nif (typeof globalObject !== \"undefined\") {\n    (<any>globalObject).BABYLON = (<any>globalObject).BABYLON || {};\n    if (!(<any>globalObject).BABYLON.GUI) {\n        (<any>globalObject).BABYLON.GUI = GUI;\n    }\n}\nexport * from \"../index\";\n","import * as gui from \"gui/legacy/legacy\";\r\n\r\nexport { gui };\r\nexport default gui;\r\n"],"names":["root","factory","exports","module","require","define","amd","self","global","this","__WEBPACK_EXTERNAL_MODULE__520__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","Function","e","window","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","extendStatics","b","setPrototypeOf","__proto__","Array","p","__extends","TypeError","String","__","constructor","create","__decorate","decorators","target","desc","c","arguments","length","getOwnPropertyDescriptor","Reflect","decorate","i","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","rejected","result","done","then","apply","__generator","body","f","y","t","_","label","sent","trys","ops","verb","iterator","n","v","op","pop","push","unit","negativeValueAllowed","ValueAndUnit","UNITMODE_PIXEL","_value","_unit","ignoreAdaptiveScaling","onChangedObservable","Observable","_originalUnit","UNITMODE_PERCENTAGE","notifyObservers","getValueInPixel","host","refValue","isPixel","getValue","updateInPlace","width","height","idealWidth","getSize","idealHeight","useSmallestIdeal","innerWidth","innerHeight","toString","decimals","percentage","toFixed","pixels","fromString","source","match","_Regex","exec","sourceValue","parseFloat","sourceUnit","_UNITMODE_PERCENTAGE","_UNITMODE_PIXEL","tmpRect","Vector2","tmpRect2","tmpV1","tmpV2","left","top","copyFrom","other","copyFromFloats","CombineToRef","a","Math","min","right","max","bottom","addAndTransformToRef","transform","addX","addY","addWidth","addHeight","Number","MAX_VALUE","transformCoordinates","x","floor","ceil","transformToRef","isEqualsTo","Empty","Measure","buttonIndex","m00","m01","m10","m11","m20","m21","m","Float32Array","fromValues","determinant","invertToRef","l0","l1","l2","l3","l4","l5","det","Epsilon","detDiv","det4","det5","multiplyToRef","r0","r1","r2","r3","r4","r5","Identity","Matrix2D","IdentityToRef","TranslationToRef","ScalingToRef","RotationToRef","angle","s","sin","cos","ComposeToRef","tx","ty","scaleX","scaleY","parentMatrix","_TempPreTranslationMatrix","_TempScalingMatrix","_TempRotationMatrix","_TempPostTranslationMatrix","_TempCompose0","_TempCompose1","_TempCompose2","Round","precision","MathTools","DefaultRoundingPrecision","round","name","_alpha","_alphaSet","_zIndex","_currentMeasure","_tempPaddingMeasure","_fontFamily","_fontStyle","_fontWeight","_fontSize","_width","_height","_color","_style","_horizontalAlignment","Control","HORIZONTAL_ALIGNMENT_CENTER","_verticalAlignment","VERTICAL_ALIGNMENT_CENTER","_isDirty","_wasDirty","_tempParentMeasure","_prevCurrentMeasureTransformedIntoGlobalSpace","_cachedParentMeasure","_descendantsOnlyPadding","_paddingLeft","_paddingRight","_paddingTop","_paddingBottom","_left","_top","_scaleX","_scaleY","_rotation","_transformCenterX","_transformCenterY","_transformMatrix","_invertTransformMatrix","_transformedPosition","_isMatrixDirty","_isVisible","_isHighlighted","_highlightColor","_highlightLineWidth","_fontSet","_dummyVector2","_downCount","_enterCount","_doNotRender","_downPointerIds","_evaluatedMeasure","_evaluatedParentMeasure","_isEnabled","_disabledColor","_disabledColorItem","_isReadOnly","_gradient","_rebuildLayout","_customData","_isClipped","_automaticSize","metadata","isHitTestVisible","isPointerBlocker","isFocusInvisible","clipChildren","clipContent","useBitmapCache","_shadowOffsetX","_shadowOffsetY","_shadowBlur","_previousShadowBlur","_shadowColor","hoverCursor","_linkOffsetX","_linkOffsetY","_accessibilityTag","onAccessibilityTagChangedObservable","onWheelObservable","onPointerMoveObservable","onPointerOutObservable","onPointerDownObservable","onPointerUpObservable","onPointerClickObservable","onPointerEnterObservable","onDirtyObservable","onBeforeDrawObservable","onAfterDrawObservable","onDisposeObservable","onIsVisibleChangedObservable","fixedRatio","_fixedRatioMasterIsWidth","animations","_tmpMeasureA","_markAsDirty","_getTypeName","getClassName","_host","_fontOffset","offset","_markMatrixAsDirty","isNaN","_resetFontCache","remove","_styleObserver","add","isPercentage","fontSizeToUse","fontSize","zIndex","parent","_reOrderControl","_linkedMesh","paddingLeft","paddingLeftInPixels","paddingRight","paddingRightInPixels","paddingTop","paddingTopInPixels","paddingBottom","paddingBottomInPixels","linkOffsetX","linkOffsetY","recursivelyFirePointerOut","control","pointer","_lastControlOver","_onPointerOut","children","forEach","getAscendantOfClass","className","markAsDirty","force","markAllAsDirty","_markAllAsDirty","isAscendant","container","getLocalCoordinates","globalCoordinates","getLocalCoordinatesToRef","getParentLocalCoordinates","moveToVector3","position","scene","_rootContainer","horizontalAlignment","HORIZONTAL_ALIGNMENT_LEFT","verticalAlignment","VERTICAL_ALIGNMENT_TOP","globalViewport","_getGlobalViewport","projectedPosition","Vector3","Matrix","getTransformMatrix","_moveToProjectedPosition","z","notRenderable","Tools","getDescendantsToRef","results","directDescendantsOnly","predicate","getDescendants","linkWithMesh","mesh","index","_linkedControls","indexOf","splice","setPadding","setPaddingInPixels","oldLeft","oldTop","parentMeasure","_processMeasures","getContext","newLeft","newTop","abs","_offsetLeft","_offsetTop","_flagDescendantsAsMatrixDirty","_intersectsRect","rect","context","_transform","_computeAdditionnalOffsetX","_computeAdditionnalOffsetY","invalidateRect","useInvalidateRectOptimization","shadowOffsetX","shadowOffsetY","shadowBlur","leftShadowOffset","rightShadowOffset","topShadowOffset","bottomShadowOffset","offsetX","offsetY","_font","_prepareFont","_link","uniqueId","getScene","getUniqueId","translate","rotate","scale","_cachedOffsetX","_cachedOffsetY","_renderHighlight","isHighlighted","save","strokeStyle","lineWidth","_renderHighlightSpecific","restore","strokeRect","_getColor","gradient","getCanvasGradient","color","_applyStates","_isFontSizeInPercentage","font","fillStyle","AllowAlphaInheritance","globalAlpha","renderToIntermediateTexture","alpha","_layout","isDirty","isVisible","_numLayoutCalls","_paddingLeftInPixels","_paddingTopInPixels","_paddingRightInPixels","_paddingBottomInPixels","rebuildCount","Logger","_evaluateClippingState","descendantsOnlyPadding","_preMeasure","_measure","_computeAlignment","_additionalProcessing","hasObservers","parentWidth","parentHeight","HORIZONTAL_ALIGNMENT_RIGHT","VERTICAL_ALIGNMENT_BOTTOM","_clipForChildren","_clip","invalidatedRectangle","beginPath","_ClipMeasure","intersection","clip","_render","_numRenderCalls","_cacheData","putImageData","_draw","getImageData","contains","_shouldBlockPointer","_processPicking","pi","type","pointerId","deltaX","deltaY","_processObservables","_onPointerMove","coordinates","_onPointerEnter","canNotify","_onPointerDown","Vector2WithInfo","rootContainer","_capturedPointerIds","event","_onPointerUp","notifyClick","canNotifyClick","delete","_forcePointerUp","_onWheelScroll","_onCanvasBlur","PointerEventTypes","previousControlOver","_registerLastControlDown","_lastPickedControl","_lastControlDown","fontStyle","fontWeight","fontSizeInPixels","fontFamily","_GetFontOffset","child","clone","serialization","serialize","cloned","parse","serializedObject","SerializationHelper","_parseFromContent","serializationObject","animationIndex","parsedAnimation","internalClass","GetClass","Parse","autoAnimate","beginAnimation","autoAnimateFrom","autoAnimateTo","autoAnimateLoop","autoAnimateSpeed","dispose","clear","removeControl","_HORIZONTAL_ALIGNMENT_LEFT","_HORIZONTAL_ALIGNMENT_RIGHT","_HORIZONTAL_ALIGNMENT_CENTER","_VERTICAL_ALIGNMENT_TOP","_VERTICAL_ALIGNMENT_BOTTOM","_VERTICAL_ALIGNMENT_CENTER","_FontHeightSizes","engine","EngineStore","Error","getFontOffset","controlType","drawEllipse","arc","PI","closePath","isReady","AddHeader","RegisterClass","_children","_measureForChildren","_background","_backgroundGradient","_adaptWidthToChildren","_adaptHeightToChildren","_renderToIntermediateTexture","_intermediateTexture","logLayoutCycleErrors","maxLayoutCycle","onControlAddedObservable","onControlRemovedObservable","isReadOnly","getChildByName","getChildByType","typeName","containsControl","addControl","clearControls","slice","_cleanControlAfterRemoval","linkedMesh","wasAdded","_getBackgroundColor","_localDraw","shadowColor","fillRect","_beforeLayout","scaleTo","DynamicTexture","Texture","Constants","hasAlpha","computedWidth","computedHeight","adaptWidthToChildren","adaptHeightToChildren","_postMeasure","renderToIntermediateTextureThisDraw","contextToDrawTo","clearRect","drawImage","canvas","item","_changeCursor","backgroundGradient","childSerializationObject","childData","Container","TextWrapping","_thickness","_cornerRadius","_getRectangleFill","_drawRoundedRect","fill","stroke","radius","moveTo","lineTo","Rectangle","text","_text","_textWrapping","Clip","_textHorizontalAlignment","_textVerticalAlignment","_resizeToFit","_lineSpacing","_outlineWidth","_outlineColor","_underline","_lineThrough","_wordDivider","_forceResizeWidth","onTextChangedObservable","onLinesReadyObservable","_linesTemp","_lines","_breakLines","maxLineWidth","line","newWidth","newHeight","internalValue","lineSpacing","_drawText","textWidth","outlineWidth","strokeText","fillText","_renderLines","outlineColor","lineJoin","miterLimit","refWidth","refHeight","split","Ellipsis","_line","_parseLineEllipsis","WordWrap","_parseLineWordWrap","WordWrapEllipsis","_parseLineWordWrapEllipsis","_parseLine","_getTextMetricsWidth","measureText","_getCharsToRemove","lineLength","diff","charWidth","removeChars","characters","from","join","textMetrics","actualBoundingBoxLeft","actualBoundingBoxRight","lines","words","wordSplittingFunction","testLine","testWidth","_computeHeightForLinesOf","lastLine","currentLine","linesToRemove","rootY","ascent","descent","lineCount","computeExpectedHeight","widthInPixels","createCanvas","heightInPixels","TextBlock","url","_workingCanvas","_loaded","_stretch","Image","STRETCH_FILL","_autoScale","_sourceLeft","_sourceTop","_sourceWidth","_sourceHeight","_svgAttributesComputationCompleted","_isSVG","_cellWidth","_cellHeight","_cellId","_populateNinePatchSlicesFromImage","_imageDataCache","data","onImageLoadedObservable","onSVGAttributesComputedObservable","isLoaded","_detectPointerOnOpaqueOnly","_sliceLeft","_sliceRight","_sliceTop","_sliceBottom","_imageWidth","_imageHeight","_extractNinePatchSliceDataFromImage","synchronizeSizeWithContent","_rotate90","preserveProperties","_domImage","getEngine","dataUrl","toDataURL","rotatedImage","_handleRotationForSVGImage","srcImage","dstImage","_rotate90SourceProperties","addOnce","srcLeft","sourceLeft","srcTop","sourceTop","srcWidth","domImage","srcHeight","dstLeft","dstTop","dstWidth","sourceWidth","dstHeight","sourceHeight","mult","imageData","_onImageLoaded","onload","_source","_removeCacheUsage","_svgCheck","SourceImgCache","has","cachedData","img","timesUsed","loaded","waitingForLoadCallback","bind","createCanvasImage","set","waitingCallback","referrerPolicy","src","ResetImageCache","SVGSVGElement","search","lastIndexOf","document","querySelector","svgDoc","contentDocument","documentElement","vb","getAttribute","docwidth","docheight","getElementById","_getSVGAttribs","addEventListener","svgImage","createElement","appendChild","svgobj","svgsrc","elemid","elem","vb_width","vb_height","elem_bbox","getBBox","elem_matrix_a","elem_matrix_d","elem_matrix_e","elem_matrix_f","mainMatrix","baseVal","consolidate","matrix","STRETCH_NONE","STRETCH_UNIFORM","STRETCH_NINE_PATCH","STRETCH_EXTEND","_prepareWorkingCanvasForOpaqueDetection","_drawImage","sx","sy","sw","sh","tw","th","cellId","rowCount","naturalWidth","cellWidth","column","row","cellHeight","hRatio","vRatio","ratio","centerX","centerY","_renderNinePatch","leftWidth","topHeight","bottomHeight","rightWidth","centerWidth","centerHeight","targetCenterWidth","targetCenterHeight","centerLeftOffset","centerTopOffset","rightOffset","bottomOffset","sliceLeft","Map","delegatePickingToChildren","thickness","alphaStore","pointerEnterAnimation","pointerOutAnimation","pointerDownAnimation","pointerUpAnimation","_image","_textBlock","isEnabled","textBlockName","imageName","CreateImageButton","imageUrl","textBlock","textWrapping","textHorizontalAlignment","iconImage","stretch","CreateImageOnlyButton","CreateSimpleButton","CreateImageWithCenterTextButton","Button","_isVertical","_manualWidth","_manualHeight","_doNotTrackManualChanges","_spacing","ignoreLayoutWarnings","isVertical","stackWidth","stackHeight","childrenCount","forceResizeWidth","panelWidthChanged","panelHeightChanged","previousHeight","previousWidth","manualWidth","manualHeight","StackPanel","_isChecked","_checkSizeRatio","onIsCheckedChangedObservable","actualWidth","actualHeight","offsetWidth","offsetHeight","isChecked","AddCheckBoxWithHeader","title","onValueChanged","panel","checkbox","Checkbox","header","_characters","txt","removePart","idxStart","idxEnd","insertTxt","newCharacters","to","pack","ar","l","concat","charAt","idx","substr","temp","substring","isWord","rWord","_placeholderText","_focusedBackground","_focusedColor","_placeholderColor","_margin","_autoStretchWidth","_maxWidth","_isFocused","_blinkIsEven","_cursorOffset","_deadKey","_addKey","_currentKey","_isTextHighlightOn","_textHighlightColor","_highligherOpacity","_highlightedText","_startHighlightIndex","_endHighlightIndex","_cursorIndex","_onFocusSelectAll","_isPointerDown","promptMessage","disableMobilePrompt","onBeforeKeyAddObservable","onFocusObservable","onBlurObservable","onTextHighlightObservable","onTextCopyObservable","onTextCutObservable","onTextPasteObservable","onKeyboardEventProcessedObservable","flag","_textWrapper","valueAsString","TextWrapper","_textHasChanged","autoStretchWidth","onBlur","_scrollLeft","clearTimeout","_blinkTimeout","unRegisterClipboardEvents","_onClipboardObserver","onClipboardObservable","_onPointerDblTapObserver","onPointerObservable","onFocus","_focusedBy","prompt","focusedControl","registerClipboardEvents","clipboardInfo","ClipboardEventTypes","_onCopyText","_onCutText","_onPasteText","pointerInfo","_processDblClick","_selectAllText","focus","moveFocusToControl","blur","keepsFocusWith","_connectedVirtualKeyboard","processKey","keyCode","evt","ctrlKey","metaKey","preventDefault","isTextHighlightOn","deletePosition","shiftKey","insertPosition","_updateValueFromCursorIndex","moveLeft","moveRight","_clickedCoordinate","processKeyboard","ev","clipboardData","setData","types","getData","clipTextLeft","_beforeRenderText","_textWidth","marginWidth","availableWidth","textLeft","absoluteCursorPosition","currentSize","previousDist","cursorOffsetText","cursorOffsetWidth","cursorLeft","setTimeout","highlightCursorOffsetWidth","highlightCursorLeft","focusedColor","_capturingControl","pointerType","textWrapper","InputText","_rowDefinitions","_rowDefinitionObservers","_columnDefinitions","_columnDefinitionObservers","_cells","_childControls","getRowDefinition","getColumnDefinition","addRowDefinition","addColumnDefinition","columnCount","setRowDefinition","current","setColumnDefinition","getChildrenAt","cell","getChildCellInfo","_tag","_removeCell","childIndex","_offsetCell","previousKey","removeColumnDefinition","removeRowDefinition","goodContainer","_getGridDefinitions","definitionCallback","widths","heights","lefts","tops","globalWidthPercentage","availableHeight","globalHeightPercentage","rowDefinition","columnDefinition","parseInt","columns","rows","tags","cd","rd","columnValue","rowValue","cellInfo","rowNumber","columnNumber","Grid","Color3","_tmpColor","_pointerStartedOnSquare","_pointerStartedOnWheel","_squareLeft","_squareTop","_squareSize","_h","_s","_v","_lastPointerDownId","onValueChangedObservable","_pointerIsDown","size","equals","toHSVToRef","ColorPicker","_Epsilon","_updateSquareProps","squareSize","sqrt","_drawGradientSquare","hueValue","lgh","createLinearGradient","addColorStop","lgv","_drawCircle","_createColorWheelCanvas","image","maxDistSq","innerRadius","minDistSq","distSq","dist","ang","atan2","alphaRatio","alphaAmount","wheelThickness","_colorWheelCanvas","cx","cy","_updateValueFromPointer","_isPointOnSquare","_isPointOnWheel","dx","dy","ShowPickerDialogAsync","advancedTexture","options","pickerWidth","pickerHeight","headerHeight","lastColor","swatchLimit","numSwatchesPerLine","buttonFontSize","butEdit","swatchNumber","swatchDrawer","butSave","lastVal","activeField","drawerMaxRows","rawSwatchSize","gutterSize","colGutters","swatchSize","drawerMaxSize","containerSize","buttonColor","buttonBackgroundColor","buttonBackgroundHoverColor","buttonBackgroundClickColor","luminanceLimitColor","luminanceLimit","inputFieldLabels","inputTextBackgroundColor","inputTextColor","editSwatchMode","dialogContainer","savedColors","topRow","background","gutterCount","initialRows","pickerPanel","panelHead","pickerPanelRows","closeButton","headerColor3","closeIconColor","toHexString","textVerticalAlignment","closePicker","currentSwatch","dialogBody","dialogBodyCols","pickerGrid","picker","editSwatches","updateValues","pickerBodyRight","pickerBodyRightRows","pickerSwatchesButtons","pickerButtonsCol","pickerSwatches","pickeSwatchesRows","activeSwatches","labelTextSize","labelWidth","labelHeight","newText","newSwatch","swatchOutline","currentText","buttonGrid","buttonGridRows","buttonWidth","buttonHeight","butOK","butCancel","disableButton","setEditButtonVisibility","updateSwatches","pickerColorValues","currentColor","rgbValuesQuadrant","rValInt","updateInt","gValInt","bValInt","rValDec","updateFloat","gValDec","bValDec","hexValueQuadrant","labelText","hexVal","minusPound","inputField","pickedColor","field","channel","newValue","test","newSwatchRGB","createSwatch","icon","swatchColor","swatchLuminence","mode","button","currentRows","thisRow","totalButtonsThisRow","buttonIterations","w","swatch","enableButton","disabled","val","newHexValue","checkHex","leadingZero","Ellipse","_unfocusedColor","displose","FocusableButton","_maxHeight","_updateCursorPosition","_highlightCursorInfo","initialStartIndex","initialRelativeStartIndex","initialLineIndex","_cursorInfo","globalStartIndex","globalEndIndex","relativeEndIndex","relativeStartIndex","currentLineIndex","_autoStretchHeight","alternativeProcessKey","code","rightDelta","upperLine","tmpIndex","relativeIndex","currentWidth","_contextForBreakLines","upperWidth","lineEnding","upperLineRelativeIndex","underLine","underWidth","underLineRelativeIndex","map","char","longerString","reduce","acc","longerStringWidth","_availableWidth","totalHeight","_availableHeight","tmpLength","_computeScroll","_clipTextLeft","_clipTextTop","selectedHeight","textTop","_scrollTop","highlightedText","deltaIndex","cursorTop","_resetBlinking","startLineIndex","endLineIndex","highlightRootY","highlightRootX","begin","end","leftOffsetWidth","selectedText","hightlightWidth","_clickedCoordinateX","_clickedCoordinateY","movementX","movementY","globalIndex","lastClickedCoordinateY","relativeCoordinateY","relativeXPosition","_evt","dipose","InputTextArea","pwdTextWrapper","InputPassword","_lineWidth","_x1","_y1","_x2","_y2","_dash","_connectedControl","_connectedControlDirtyObserver","setLineDash","_effectiveX2","_effectiveY2","x2","y2","x1","y1","Line","multiLine","_multiLine","_x","_y","_point","_control","_controlObserver","onPointUpdate","_mesh","_meshObserver","onAfterCameraRenderObservable","resetLinks","_translatePoint","getProjectedPositionWithZ","getBoundingInfo","boundingSphere","center","getWorldMatrix","xValue","_canvas","yValue","_points","getAt","MultiLinePoint","items","point","AbstractMesh","reset","previousPoint","first","_minX","_minY","_maxX","_maxY","MultiLine","group","executeOnAllControls","childRadio","offseHeight","AddRadioButtonWithHeader","radio","RadioButton","_thumbWidth","_minimum","_maximum","_barOffset","_isThumbClamped","_displayThumb","_step","_effectiveBarOffset","_getThumbPosition","maximum","minimum","_backgroundBoxLength","_getThumbThickness","thumbThickness","_backgroundBoxThickness","_prepareRenderingData","_renderLeft","_renderTop","_renderWidth","_renderHeight","_effectiveThumbThickness","displayThumb","console","error","isThumbClamped","rotation","_borderColor","_thumbColor","_isThumbCircle","_displayValueBar","isThumbCircle","thumbPosition","BaseSlider","Slider","_groupPanel","_selectors","_groupHeader","_addGroupHeader","groupHeading","_getSelector","selectorNb","removeSelector","addCheckbox","func","checked","state","_selector","isHorizontal","controlFirst","groupPanel","selectors","buttonBackground","_setSelectorLabel","_setSelectorLabelColor","_setSelectorButtonColor","_setSelectorButtonBackground","SelectorGroup","_selectNb","addRadio","nb","addSlider","onValueChange","borderColor","groups","_buttonColor","_buttonBackground","_headerColor","_barColor","_barHeight","_spacerHeight","_bars","_groups","_panel","_addSpacer","_setHeaderColor","_setbuttonColor","j","_labelColor","_setLabelColor","_setButtonBackground","_setBarColor","_setBarHeight","_setSpacerHeight","separator","bar","addGroup","removeGroup","groupNb","setHeaderName","relabel","removeFromGroupSelector","addToGroupCheckbox","addToGroupRadio","addToGroupSlider","onVal","_freezeControls","_bucketWidth","_bucketHeight","_buckets","_restoreMeasures","textureSize","renderWidth","renderHeight","measure","_updateMeasures","_useBuckets","_makeBuckets","setBucketSizes","_bucketLen","_dispatchInBuckets","_oldLeft","_oldTop","bStartX","_origLeft","origLeft","bEndX","bEndY","_origTop","origTop","bStartY","bucket","lstc","leftInPixels","topInPixels","origLeftForChildren","origTopForChildren","_updateChildrenMeasures","_parentMeasure","_scrollChildren","_scrollChildrenWithBuckets","scrollLeft","scrollTop","maxWidth","parentClientWidth","maxHeight","parentClientHeight","_tempMeasure","_invertScrollDirection","invert","sign","_first","_originX","_originY","delta","ScrollBar","_thumbLength","_thumbHeight","_barImageHeight","num90RotationInVerticalMode","_backgroundBaseImage","_backgroundImage","rotatedValue","_thumbBaseImage","_thumbImage","isImageBased","_barSize","_pointerIsOver","_wheelPrecision","_horizontalBarImageHeight","_verticalBarImageHeight","_oldWindowContentsWidth","_oldWindowContentsHeight","_forceHorizontalBar","_forceVerticalBar","_useImageBar","_horizontalBarSpace","_verticalBarSpace","_dragSpace","_grid","_horizontalBar","ImageScrollBar","_verticalBar","_window","_ScrollViewerWindow","_addBar","barColor","barBackground","freezeControls","bucketWidth","bucketHeight","resetWindow","_buildClientSizes","idealRatio","forceVerticalBar","forceHorizontalBar","_clientWidth","_clientHeight","_updateScroller","_setWindowPosition","_barImage","hb","thumbImage","_horizontalBarImage","_verticalBarImage","thumbLength","thumbHeight","barImageHeight","_barBackground","_barBackgroundImage","backgroundImage","_horizontalBarBackgroundImage","_verticalBarBackgroundImage","windowContentsWidth","windowContentsHeight","_endLeft","_endTop","thumbWidth","_attachWheel","barControl","barContainer","barOffset","_onWheelObserver","ScrollViewer","onIsActiveChangedObservable","_isActive","toActiveAnimation","toInactiveAnimation","pointerEnterActiveAnimation","pointerOutActiveAnimation","pointerDownActiveAnimation","pointerUpActiveAnimation","pointerEnterInactiveAnimation","pointerOutInactiveAnimation","pointerDownInactiveAnimation","pointerUpInactiveAnimation","_group","childToggle","isActive","ToggleButton","onKeyPressObservable","defaultButtonWidth","defaultButtonHeight","defaultButtonPaddingLeft","defaultButtonPaddingRight","defaultButtonPaddingTop","defaultButtonPaddingBottom","defaultButtonColor","defaultButtonBackground","shiftButtonColor","selectedShiftThickness","shiftState","_currentlyConnectedInputText","_connectedInputTexts","_onKeyPressObserver","_createKey","propertySet","addKeysRow","keys","propertySets","maxKey","properties","applyShiftState","rowContainer","button_tblock","toUpperCase","toLowerCase","connect","input","some","onFocusObserver","onBlurObserver","disconnect","filtered","filter","_removeConnectedInputObservables","connectedInputText","CreateDefaultLayout","returnValue","VirtualKeyboard","_minorLineTickness","_minorLineColor","_majorLineTickness","_majorLineColor","_majorLineFrequency","_displayMajorLines","_displayMinorLines","cellCountX","cellCountY","cellX","cellY","DisplayGrid","_valueBarImage","valueBarImage","ImageBasedSlider","_colorStops","_gradientDirty","_addColorStopsToCanvasGradient","_canvasGradient","_context","_createCanvasGradient","removeColorStop","colorStop","clearColorStops","colorStops","x0","y0","_x0","_y0","BaseGradient","LinearGradient","_r0","_r1","createRadialGradient","RadialGradient","generateMipMaps","samplingMode","invertY","onGuiReadyObservable","_isFullscreen","_fullscreenViewport","Viewport","_idealWidth","_idealHeight","_useSmallestIdeal","_renderAtIdealSize","_blockNextFocusCheck","_renderScale","_cursorChanged","_defaultMousePointerId","_rootChildrenHaveChanged","Set","_clipboardData","onControlPickedObservable","onBeginLayoutObservable","onEndLayoutObservable","onBeginRenderObservable","onEndRenderObservable","premulAlpha","applyYInversionOnUpdate","checkPointerEveryFrame","_useInvalidateRectOptimization","_invalidatedRectangle","_clearMeasure","_onClipboardCopy","rawEvt","ClipboardInfo","_onClipboardCut","_onClipboardPaste","parseContent","parseSerializedObject","_texture","_rootElement","getInputElement","_renderObserver","onBeforeCameraRenderObservable","camera","_checkUpdate","_controlAddedObserver","_controlRemovedObserver","_preKeyboardObserver","onPreKeyboardObservable","info","_focusedControl","KeyboardEventTypes","skipOnPointerObservable","_resizeObserver","onResizeObservable","_onResize","rwidth","rheight","_layerToDispose","getChildren","getControlsByType","getControlByName","_getControlByKey","find","layer","isBackground","invalidMinX","invalidMinY","invalidMaxX","invalidMaxY","maxX","maxY","createStyle","Style","moveToNonOverlappedPosition","overlapGroup","deltaStep","repelFactor","controlsForGroup","isArray","descendants","control1","velocity","control2","AdvancedDynamicTexture","_Overlaps","subtract","diffLength","normalize","overlapDeltaMultiplier","linkOffsetXInPixels","linkOffsetYInPixels","_prePointerObserver","onPrePointerObservable","_sceneRenderObserver","onBeforeRenderObservable","_pointerObserver","_canvasPointerOutObserver","onCanvasPointerOutObservable","_canvasBlurObserver","onCanvasBlurObservable","texture","getRenderWidth","getRenderHeight","globalViewPort","toGlobal","targetX","targetY","getProjectedPosition","worldMatrix","skipUpdate","layerMask","isDisposed","update","AllowGPUOptimizations","skipRender","_checkGuiIsReady","activeCamera","cursor","style","_doPicking","cameraToUseForPointers","viewport","doNotHandleCursors","_manageFocus","_cleanControlAfterRemovalFromList","list","pick","_scene","_translateToPicking","tempViewport","pointerX","pointerY","originalCameraToUseForPointers","rigCameras","rigCamera","toGlobalToRef","transformedX","getHardwareScalingLevel","transformedY","attach","isPointerCaptured","_attachPickingToSceneRender","_attachToOnPointerOut","_attachToOnBlur","removeEventListener","_transformUvs","uv","textureMatrix","getTextureMatrix","isIdentityAs3x2","homogeneousTextureMatrix","TmpVectors","getRowToRef","setRowFromFloats","wrapU","fX","trunc","wrapV","fY","attachToMesh","supportPointerMove","pickInfo","hit","pickedMesh","getTextureCoordinates","friendlyControls","canMoveFocus","otherHost","enablePointerMoveEvents","pickFunction","forcePicking","pointerEvent","entries","serializeContent","scaleToSize","newName","CreateFullscreenUI","isForeground","ParseFromSnippetAsync","snippetId","appendToAdt","adt","_LoadURLContentAsync","SnippetUrl","replace","serialized","parseFromSnippetAsync","ParseFromFileAsync","parseFromURLAsync","snippet","request","WebRequest","readyState","status","gui","payload","JSON","responseText","jsonPayload","encodedGui","TextDecoder","decode","DecodeBase64ToBinary","open","send","CreateForMesh","onlyAlphaTesting","materialSetupCallback","_CreateMaterial","RandomGUID","internalClassType","material","backFaceCulling","diffuseColor","specularColor","diffuseTexture","emissiveTexture","opacityTexture","CreateForMeshTexture","foreground","sampling","adaptiveScaling","resultScene","Layer","newScale","guiIsReady","_captureRenderTime","_renderTime","PerfCounter","_captureLayoutTime","_layoutTime","_onBeginRenderObserver","_onEndRenderObserver","_onBeginLayoutObserver","_onEndLayoutObserver","beginMonitoring","endMonitoring","XmlLoaderError","parentClass","_nodes","_nodeTypes","element","attribute","_isLoaded","_objectAttributes","_parentClass","_getChainElement","attributeValue","_getClassAttribute","attributeName","_createGuiElement","node","linkParent","guiNode","nodeName","attributes","includes","startsWith","endsWith","getNamedItem","id","exception","_parseGrid","cells","cellNode","totalColumnsNumber","nodeType","nodeValue","k","firstChild","_parseXml","nextSibling","_parseElement","_prepareSourceElement","variable","_parseElementsFromSource","dataSource","splittedSource","generated","setAttribute","_rootNode","getNodeById","getNodes","loadLayout","xmlFile","rootNode","onSuccess","onError","xhttp","XMLHttpRequest","responseXML","xmlDoc","onerror","loadLayoutAsync","_isScaledByManager","_behaviors","_node","scaling","addBehavior","behavior","init","isLoading","onDataLoadedObservable","removeBehavior","detach","getBehaviorByName","setEnabled","linkToTransformNode","_prepareNode","_createNode","_injectGUI3DReservedDataStore","isPickable","_affectMaterial","reservedDataStore","GUI3D","_isTouchButton3D","_generatePointerEventType","Vector3WithInfo","forcePointerUp","pickedPoint","originMeshPosition","_disposeNode","_contentResolution","_contentScaleRatio","_content","utilityLayer","_facadeTexture","utilityLayerScene","_applyFacade","_resetContent","_disposeFacadeTexture","content","facadeTexture","Control3D","TransformNode","ContentDisplay3D","_currentMaterial","emissiveColor","scaleInPlace","faceUV","Vector4","useRightHandedSystem","CreateBox","depth","wrap","StandardMaterial","AbstractButton3D","_blockLayout","_arrangeChildren","updateLayout","blockLayout","UNSET_ORIENTATION","FACEORIGIN_ORIENTATION","FACEORIGINREVERSED_ORIENTATION","FACEFORWARD_ORIENTATION","FACEFORWARDREVERSED_ORIENTATION","_columns","_rows","_rowThenColum","_orientation","Container3D","margin","controlCount","currentInverseWorld","computeWorldMatrix","boundingBox","getHierarchyBoundingVectors","extendSize","subtractToRef","startOffsetX","startOffsetY","nodeGrid","cellCounter","_mapGridNode","_finalProcessing","_radius","nodePosition","newPos","_cylindricalMapping","orientation","lookAt","Axis","Space","yAngle","VolumeBasedPanel","INNERGLOW","BORDER","HOVERLIGHT","TEXTURE","rebuild","MaterialDefines","innerGlowColorIntensity","innerGlowColor","albedoColor","renderBorders","borderWidth","edgeSmoothingValue","borderMinValue","renderHoverLight","hoverRadius","hoverColor","Color4","hoverPosition","needAlphaBlending","needAlphaTesting","getAlphaTestTexture","isReadyForSubMesh","subMesh","isFrozen","effect","_wasPreviouslyReady","materialDefines","FluentMaterialDefines","defines","checkReadyOnEveryCall","_renderId","getRenderId","_areTexturesDirty","_albedoTexture","isReadyOrNotBlocking","markAsProcessed","resetCachedMaterial","attribs","VertexBuffer","uniforms","samplers","uniformBuffers","MaterialHelper","uniformsNames","uniformBuffersNames","maxSimultaneousLights","setEffect","createEffect","fallbacks","onCompiled","indexParameters","_materialContext","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","_mustRebind","setColor4","setFloat","setVector3","setDirectColor4","setTexture","_afterBind","getActiveTextures","hasTexture","forceDisposeEffect","FluentMaterial","customType","rootUrl","expandToProperty","serializeAsColor3","serializeAsColor4","serializeAsVector3","serializeAsTexture","PushMaterial","_backPlateMargin","_updateCurrentMinMax","_updateMargins","Mesh","_backPlate","_backPlateMaterial","_pickedPointObserver","onPickedPointChangedObservable","_currentMin","_currentMax","minimizeInPlace","maximizeInPlace","addInPlaceFromFloats","backPlateMargin","subtractInPlace","addButton","wasLayoutBlocked","isBackplateVisible","TouchHolographicMenu","MENU_BUTTON_SCALE","xr","_handConstraintBehavior","HandConstraintBehavior","linkToXRExperience","BLOB_ENABLE","BLOB_ENABLE_2","SMOOTH_EDGES","IRIDESCENT_MAP_ENABLE","_needNormals","absoluteSizes","_filterWidth","baseColor","lineColor","blobIntensity","blobFarSize","blobNearDistance","blobFarDistance","blobFadeLength","blobNearSize","blobPulse","blobFade","blobNearSize2","blobPulse2","blobFade2","_rate","highlightColor","highlightWidth","_highlightTransform","_highlight","iridescenceIntensity","iridescenceEdgeIntensity","_angle","fadeOut","_reflected","_frequency","_verticalOffset","globalLeftIndexTipPosition","_globalLeftIndexTipPosition4","globalRightIndexTipPosition","_globalRightIndexTipPosition4","alphaMode","_blobTexture","FluentBackplateMaterial","BLOB_TEXTURE_URL","_iridescentMap","IM_TEXTURE_URL","FluentBackplateMaterialDefines","_isReadyForSubMesh","EffectFallbacks","FOG","addFallback","IMAGEPROCESSINGPOSTPROCESS","imageProcessingConfiguration","applyByPostProcess","NORMAL","UV1","UV2","VERTEXCOLOR","TANGENT","setVector4","getAnimatables","_shareMaterials","_model","renderingGroupId","_material","collisionMesh","visibility","SceneLoader","HolographicBackplate","MODEL_BASE_URL","MODEL_FILENAME","importedModel","meshes","_createMaterial","_touchSharedMaterials","shareMaterials","_frontPlate","_disposeTooltip","_tooltipFade","_tooltipTextBlock","_tooltipTexture","_tooltipMesh","_tooltipHoverObserver","_tooltipOutObserver","_textPlate","rightHandedScene","CreatePlane","tooltipBackground","sideOrientation","mat","addChild","FadeInOutBehavior","delay","fadeIn","_rebuildContent","_imageUrl","_backMaterial","_frontMaterial","_plateMaterial","DomManagement","_createBackMaterial","_createFrontMaterial","_createPlateMaterial","_sharedMaterials","Button3D","RELATIVE_WIDTH","ENABLE_FADE","_needUVs","edgeWidth","edgeColor","proximityMaxIntensity","proximityFarDistance","proximityNearRadius","proximityAnisotropy","selectionFuzz","selected","selectionFade","selectionFadeSize","selectedDistance","selectedFadeLength","leftBlobEnable","leftBlobNearSize","leftBlobPulse","leftBlobFade","leftBlobInnerFade","rightBlobEnable","rightBlobNearSize","rightBlobPulse","rightBlobFade","rightBlobInnerFade","activeFaceDir","activeFaceUp","enableFade","fadeWidth","smoothActiveFace","showFrame","useBlobTexture","disableDepthWrite","FluentButtonMaterial","FluentButtonMaterialDefines","_isNearPressed","_interactionSurfaceHeight","_isToggleButton","_toggleState","_toggleButtonCallback","_onToggle","onToggleObservable","collidableFrontDirection","_collisionMesh","transformedDirection","_collidableFrontDirection","frontWorldDir","isNearPickable","getChildMeshes","forward","removeCallback","newState","_isInteractionInFrontOfButton","collidablePos","_getInteractionHeight","getAbsolutePosition","getPressDepth","touchPoint","interactionHeight","interactionPos","basePos","frontDir","providedType","nearMeshPosition","activeInteractionCount","_isBackplateVisible","_frontPlateDepth","_backPlateDepth","_backplateColor","_backplateToggledColor","isActiveNearInteraction","decompose","Scalar","_pointerHoverObserver","TouchHolographicButton","alphaMesh","importedFrontPlate","tn","setParent","negate","TouchButton3D","followBehaviorEnabled","sixDofDragBehaviorEnabled","surfaceMagnetismBehaviorEnabled","_followBehavior","FollowBehavior","_sixDofDragBehavior","SixDofDragBehavior","_surfaceMagnetismBehavior","SurfaceMagnetismBehavior","ownerMesh","draggablesMeshes","sceneUnderstandingMeshes","attachedNode","_addObservables","draggableMeshes","faceCameraOnDragStart","enabled","_removeObservables","_onBeforeRenderObserver","_enabled","isMoving","_onDragObserver","onDragObservable","disableMovement","findAndUpdateTarget","HandleState","_hover","_drag","_scale","_lastTick","animationLength","hoverScale","baseScale","dragScale","_positionOffset","_updateInterpolationTarget","Date","now","_onBeforeRender","tick","scaleDiff","_targetScale","colorDiff","TmpColors","_targetColor","scaleToRef","addToRef","setColor3","drag","hover","ShaderMaterial","gizmo","_state","IDLE","_materials","_gizmo","createNode","handle","HOVER","_updateMaterial","DRAG","positionOffset","HandleMaterial","setDragBehavior","dragStartFn","dragFn","dragEndFn","dragBehavior","BaseSixDofDragBehavior","_dragBehavior","_dragStartObserver","onDragStartObservable","_draggingObserver","_dragEndObserver","onDragEndObservable","verticalBox","sideNode","isNearGrabbable","GizmoHandle","horizontalBox","angleNode","_boundingDimensions","_tmpQuaternion","Quaternion","_tmpVector","_corners","_sides","_boundingBoxGizmo","_handleSize","_attachedSlate","_existingSlateScale","fixedScreenSize","fixedScreenSizeDistanceFactor","updateScale","gizmoLayer","originalScene","attachedMesh","updateBoundingBox","onPickingObservable","_handleHovered","_handlesParent","rotationQuaternion","masksCorners","dimensions","origin","corner","CornerHandle","_assignDragBehaviorCorners","originStart","dimensionsStart","masks","_moveHandle","side","SideHandle","_assignDragBehaviorSides","_rootMesh","_keepAspectRatio","vector","aspectRatio","invertDiagonal","axis","dot","_clampDimensions","mask","keepAspectRatio","impact","multiplyInPlace","clampedDimensions","minDimensions","isCorner","offsetOriginMasked","offsetDimensionsMasked","addInPlace","moveFn","dragOrigin","toObjectFrame","dragPlaneNormal","attachedSlate","_followButton","isToggled","_handleDragged","normal","ref","projectToRef","_positionElements","_updatePivot","quaternionOrigin","directionOrigin","worldPivot","worldPlaneNormal","getAbsolutePivotPoint","_attachedNodeChanged","PivotTools","originalParent","_update","boundingMinMax","_updateHandlesPosition","_updateHandlesScaling","handleScaling","scaledWidth","scaledHeight","setAll","absolutePosition","distanceFromCamera","Gizmo","titleBarMargin","_dimensions","_titleBarHeight","_titleText","defaultDimensions","isToggleButton","_closeButton","_contentViewport","_contentDragBehavior","PointerDragBehavior","_defaultBehavior","newRatio","_titleBar","_titleBarTitle","_contentPlate","_titleTextComponent","_contentMaterial","albedoTexture","_resetContentPositionAndZoom","_applyContentViewport","_addControl","followButton","titleBar","titleBarTitle","contentPlate","backPlate","titleBarHeight","contentPlateHeight","rightHandScene","HolographicSlate","_DEFAULT_TEXT_RESOLUTION_Y","tex","uScale","vScale","uOffset","vOffset","setPivotPoint","origin2","VertexData","frontUVs","_attachContentPlateBehavior","ASSETS_BASE_URL","FOLLOW_ICON_FILENAME","CLOSE_ICON_FILENAME","followBehavior","recenter","moveAttached","useObjectOrientationForDragging","updateDragPlane","startViewport","worldDimensions","upWorld","rightWorld","projectedOffset","dragPlanePoint","_titleBarMaterial","SlateGizmo","DefaultBehavior","sixDofDragBehavior","_positionChangedObserver","onPositionChangedObservable","resetDefaultAspectAndPose","resetAspect","backward","pivot","_currentMesh","_isPinned","_dragObserver","isPinned","_pinButton","_createPinButton","NearMenu","_ASSETS_BASE_URL","_PIN_ICON_FILENAME","ignoreCameraPitchAndRoll","pitchOffset","minimumDistance","defaultDistance","maximumDistance","_iteration","_scatterMapping","random","count","sort","distance1","lengthSquared","distance2","radiusPaddingSquared","pow","cellSize","difference2D","difference","combinedRadius","distance","SKY_ENABLED","IRIDESCENCE_ENABLED","bevelFront","bevelFrontStretch","bevelBack","bevelBackStretch","radiusTopLeft","radiusTopRight","radiusBottomLeft","radiusBottomRight","bulgeEnabled","bulgeHeight","bulgeRadius","sunIntensity","sunTheta","sunPhi","indirectDiffuse","albedo","specular","shininess","sharpness","subsurface","leftGradientColor","rightGradientColor","reflection","frontReflect","edgeReflect","power","skyColor","horizonColor","groundColor","horizonPower","fuzz","minFuzz","clipFade","hueShift","saturationShift","valueShift","blobPosition","blobPosition2","blobTexture","leftIndexPosition","rightIndexPosition","leftIndexMiddlePosition","rightIndexMiddlePosition","decalScaleXY","decalFrontOnly","rimIntensity","rimHueShift","rimSaturationShift","rimValueShift","useGlobalLeftIndex","useGlobalRightIndex","globalLeftIndexTipProximity","globalRightIndexTipProximity","globaRightIndexTipPosition","globalLeftThumbTipPosition","globalRightThumbTipPosition","globalLeftIndexMiddlePosition","globalRightIndexMiddlePosition","_blueGradientTexture","MRDLSliderBarMaterial","BLUE_GRADIENT_TEXTURE_URL","_decalTexture","_reflectionMapTexture","_indirectEnvTexture","MRDLSliderBarMaterialDefines","setVector2","MRDLSliderThumbMaterial","MRDLSliderThumbMaterialDefines","IRIDESCENCE_ENABLE","iridescenceTint","gradientColor","topLeftGradientColor","topRightGradientColor","bottomLeftGradientColor","bottomRightGradientColor","edgePower","edgeLineGradientBlend","_iridescentMapTexture","MRDLBackplateMaterial","IRIDESCENT_MAP_TEXTURE_URL","MRDLBackplateMaterialDefines","sliderBackplateVisible","_sliderBackplateVisible","_sliderThumb","_convertToPosition","_sliderBar","SLIDER_SCALING","_sliderBarMaterial","_sliderThumbMaterial","_sliderBackplateMaterial","sliderBackplate","Slider3D","sliderBackplateModel","sliderBarModel","sliderThumbModel","_sliderBackplate","_createBehavior","pointerDragBehavior","dragAxis","_draggedPosition","dragDistance","_convertToValue","start","_sphericalMapping","xAngle","extendSizes","bevelRadius","tuningMotion","motion","maxIntensity","intensityFadeInExponent","outerFuzzStart","outerFuzzEnd","innerColor","blendExponent","falloff","bias","MRDLBackglowMaterialDefines","MRDLBackglowMaterial","relativeToHeight","blobEnable","blobInnerFade","blobPulseMaxSize","blobEnable2","blobInnerFade2","gazeIntensity","gazeFocus","MRDLFrontplateMaterial","MRDLFrontplateMaterialDefines","fixedRadius","glowFraction","glowMax","glowFalloff","MRDLInnerquadMaterialDefines","MRDLInnerquadMaterial","textSizeInPixels","imageSizeInPixels","plateMaterialColor","frontPlateDepth","backPlateDepth","backGlowOffset","flatPlaneDepth","innerQuadRadius","innerQuadColor","innerQuadToggledColor","innerQuadHoverColor","innerQuadToggledHoverColor","_performEnterExitAnimation","_innerQuadMaterial","_pointerClickObserver","_backGlow","_performClickAnimation","_pointerEnterObserver","_pointerOutObserver","_toggleObserver","_innerQuad","_frontPlateCollisionMesh","cornerRadius","_subtext","_backGlowMaterial","_getAspectRatio","_alignContentVertically","_alignContentHorizontally","totalPanelWidthInPixels","padding","contentContainer","imageContainer","textContainer","subtext","backPlateMesh","_createBackPlate","_createFrontPlate","innerQuadMesh","_createInnerQuad","backGlowMesh","_createBackGlow","MRTK_ASSET_BASE_URL","BACKPLATE_MODEL_FILENAME","backPlateModel","FRONTPLATE_MODEL_FILENAME","collisionPlate","_collisionPlate","frontPlateModel","INNERQUAD_MODEL_FILENAME","innerQuadModel","BACKGLOW_MODEL_FILENAME","backGlowModel","animationGroup","AnimationGroup","property","frame","values","animation","anim","Animation","animkeyFrames","inTangent","outTangent","interpolation","setKeys","addTargetedAnimation","speedRatio","play","frontMaterial","_createBackGlowMaterial","glowRadius","_createInnerQuadMaterial","_customControlScaling","_sceneDisposeObserver","_utilityLayer","UtilityLayerRenderer","onlyCheckPointerDownEvents","pickUtilitySceneFirst","mainSceneTrackerPredicate","_handlePointerOut","autoClear","autoClearDepthAndStencil","HemisphericLight","controlScaling","GUI3DManager","MRTK_REALISTIC_SCALING","isPointerUp","shouldRender","pickingInfo","originMesh","materialName","globalObject","BABYLON","GUI"],"sourceRoot":""}