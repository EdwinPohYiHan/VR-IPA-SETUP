/**
 * The type of data generated from XRAuthor.
 * @meta dict of meta information
 * @models dict of model urls
 * @video video url
 * @recordingData object of recording data
 * @editingData object of editing data
 */
export interface AuthoringData {
    /**
     * dict of meta information
     * @key name of meta information
     * @value value of meta information
     */
    meta: {
        [key: string]: string;
    };
    /**
     * dict of model urls
     * @key name of model
     * @value blob url
     */
    models: {
        [key: string]: string;
    };
    /** video url */
    video: string;
    /** object of data from recording */
    recordingData: {
        animation: {
            duration: number;
            /**
             * dict of track data
             * @key marker id, e.g., m0, m1, ...
             * @value object of data for times and matrices of each track
             */
            tracks: {
                [key: string]: {
                    times: number[];
                    matrices: {
                        elements: number[];
                    }[];
                };
            };
        };
        /**
         * dict of model information
         * @key marker id, e.g., m0, m1, ...
         * @value object of data for label, color and name of a model
         */
        modelInfo: {
            [key: string]: {
                label: string;
                color: string;
                name: string;
            };
        };
        aspectRatio: number;
        videoPlaneDepth: number;
        fovInDegrees: number;
        isRecordingVisible: boolean;
    };
    /** object of data from editing */
    editingData: {
        annotations: {
            text: string;
            x: number;
            y: number;
            startTime: number;
            endTime: number;
            isAttached: boolean;
            /** @id marker id, e.g., m0, m1, ... */
            anchor: {
                id: string;
            };
        }[];
        steps: {
            startTime: number;
            endTime: number;
        }[];
    };
}
/**
 * The helper function to load assets generated from XRAuthor.
 * @param topicPath - relative path to the topic directory
 * @param sessionIndex - index of the recorded session to load
 */
export declare function loadAuthoringData(topicPath: string, sessionIndex?: number): Promise<AuthoringData>;
